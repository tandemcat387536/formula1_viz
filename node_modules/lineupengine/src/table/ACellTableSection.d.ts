import { IAnimationContext } from '../animation';
import ARowRenderer, { IRowRendererOptions } from '../ARowRenderer';
import { EScrollResult, IMixinClass } from '../mixin';
import GridStyleManager from '../style/GridStyleManager';
import { IColumn } from '../style';
import { ICellAdapterRenderContext } from './internal/ACellAdapter';
import { ITableSection } from './MultiTableRowRenderer';
export declare type ICellRenderContext<T extends IColumn> = ICellAdapterRenderContext<T>;
export declare abstract class ACellTableSection<T extends IColumn> extends ARowRenderer implements ITableSection {
    readonly header: HTMLElement;
    readonly body: HTMLElement;
    protected readonly tableId: string;
    protected readonly style: GridStyleManager;
    private readonly cell;
    constructor(header: HTMLElement, body: HTMLElement, tableId: string, style: GridStyleManager, options?: Partial<IRowRendererOptions>);
    protected addColumnMixin(mixinClass: IMixinClass, options?: any): void;
    abstract readonly id: string;
    readonly width: number;
    protected readonly visibleColumns: {
        frozen: number[];
        first: number;
        forcedFirst: number;
        last: number;
        forcedLast: number;
    };
    protected readonly visibleFirstColumnPos: number;
    readonly height: number;
    hidden: boolean;
    protected updateSizer(firstRowPos: number): void;
    protected updateShifts(top: number, left: number): void;
    protected onVisibilityChanged(_visible: boolean): void;
    hide(): void;
    show(scrollLeft: number, clientWidth: number, isGoingRight: boolean): void;
    init(): void;
    destroy(): void;
    protected onScrolledVertically(scrollTop: number, clientHeight: number, isGoingDown: boolean): EScrollResult;
    protected onScrolledHorizontally(scrollLeft: number, clientWidth: number, isGoingRight: boolean): EScrollResult;
    protected abstract readonly context: ICellRenderContext<T>;
    protected abstract createHeader(document: Document, column: T): HTMLElement;
    protected abstract updateHeader(node: HTMLElement, column: T): HTMLElement | void;
    protected abstract createCell(document: Document, index: number, column: T): HTMLElement;
    protected abstract updateCell(node: HTMLElement, index: number, column: T): HTMLElement | void;
    protected updateHeaders(): void;
    protected updateColumnWidths(): void;
    protected recreate(ctx?: IAnimationContext): void;
    protected clearPool(): void;
    protected createRow(node: HTMLElement, rowIndex: number): void;
    protected updateRow(node: HTMLElement, rowIndex: number): void;
}
