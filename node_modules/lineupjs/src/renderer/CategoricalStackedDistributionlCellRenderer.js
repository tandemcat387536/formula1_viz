import { computeHist } from '../internal/math';
import { isCategoricalColumn } from '../model';
import CategoricalColumn from '../model/CategoricalColumn';
import OrdinalColumn from '../model/OrdinalColumn';
import { filterMissingNumberMarkup } from '../ui/missing';
import { interactiveHist } from './CategoricalCellRenderer';
import { ERenderMode } from './interfaces';
import { forEachChild, noRenderer, adaptTextColorToBgColor } from './utils';
var CategoricalStackedDistributionlCellRenderer = (function () {
    function CategoricalStackedDistributionlCellRenderer() {
        this.title = 'Distribution Bar';
    }
    CategoricalStackedDistributionlCellRenderer.prototype.canRender = function (col, mode) {
        return isCategoricalColumn(col) && mode !== ERenderMode.CELL;
    };
    CategoricalStackedDistributionlCellRenderer.prototype.create = function () {
        return noRenderer;
    };
    CategoricalStackedDistributionlCellRenderer.prototype.createGroup = function (col) {
        var _a = stackedBar(col), template = _a.template, update = _a.update;
        return {
            template: template + "</div>",
            update: function (n, _group, rows) {
                var _a = computeHist(rows, function (r) { return col.getCategory(r); }, col.categories), hist = _a.hist, missing = _a.missing;
                update(n, hist, missing);
            }
        };
    };
    CategoricalStackedDistributionlCellRenderer.prototype.createSummary = function (col, ctx, interactive) {
        return (col instanceof CategoricalColumn || col instanceof OrdinalColumn) ? interactiveSummary(col, interactive, ctx.idPrefix) : staticSummary(col);
    };
    return CategoricalStackedDistributionlCellRenderer;
}());
export default CategoricalStackedDistributionlCellRenderer;
function staticSummary(col) {
    var _a = stackedBar(col), template = _a.template, update = _a.update;
    return {
        template: template + "</div>",
        update: function (n, hist) {
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.hist, hist.missing);
        }
    };
}
function interactiveSummary(col, interactive, idPrefix) {
    var _a = stackedBar(col), template = _a.template, update = _a.update;
    var filterUpdate;
    return {
        template: "" + template + (interactive ? filterMissingNumberMarkup(false, 0, idPrefix) : '') + "</div>",
        update: function (n, hist) {
            if (!filterUpdate) {
                filterUpdate = interactiveHist(col, n);
            }
            filterUpdate(hist ? hist.missing : 0, col);
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.hist, hist.missing);
        }
    };
}
function stackedBar(col) {
    var cats = col.categories;
    var bins = cats.map(function (c) { return "<div style=\"background-color: " + c.color + "; color: " + adaptTextColorToBgColor(c.color) + "\" title=\"" + c.label + ": 0\" data-cat=\"" + c.name + "\"><span>" + c.label + "</span></div>"; }).join('');
    return {
        template: "<div>" + bins + "<div title=\"Missing Values\"></div>",
        update: function (n, hist, missing) {
            var total = hist.reduce(function (acc, _a) {
                var y = _a.y;
                return acc + y;
            }, missing);
            forEachChild(n, function (d, i) {
                var y;
                var label;
                if (i >= hist.length) {
                    y = missing;
                    label = 'Missing Values';
                }
                else {
                    y = hist[i].y;
                    label = cats[i].label;
                }
                d.style.flexGrow = "" + Math.round(total === 0 ? 0 : y);
                d.title = label + ": " + y;
            });
        }
    };
}
//# sourceMappingURL=CategoricalStackedDistributionlCellRenderer.js.map