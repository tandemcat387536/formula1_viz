import { DENSE_HISTOGRAM } from '../config';
import { computeHist } from '../internal/math';
import { isCategoricalColumn } from '../model';
import CategoricalColumn from '../model/CategoricalColumn';
import { isCategoryIncluded } from '../model/ICategoricalColumn';
import OrdinalColumn from '../model/OrdinalColumn';
import { CANVAS_HEIGHT } from '../styles';
import { filterMissingNumberMarkup, updateFilterMissingNumberMarkup } from '../ui/missing';
import { renderMissingCanvas, renderMissingDOM } from './missing';
import { setText, wideEnough, forEach } from './utils';
var CategoricalCellRenderer = (function () {
    function CategoricalCellRenderer() {
        this.title = 'Color';
        this.groupTitle = 'Histogram';
    }
    CategoricalCellRenderer.prototype.canRender = function (col) {
        return isCategoricalColumn(col);
    };
    CategoricalCellRenderer.prototype.create = function (col, context) {
        var width = context.colWidth(col);
        return {
            template: "<div>\n        <div></div><div></div>\n      </div>",
            update: function (n, d) {
                renderMissingDOM(n, col, d);
                var v = col.getCategory(d);
                n.firstElementChild.style.backgroundColor = v ? v.color : null;
                setText(n.lastElementChild, col.getLabel(d));
            },
            render: function (ctx, d) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                var v = col.getCategory(d);
                ctx.fillStyle = v ? v.color : '';
                ctx.fillRect(0, 0, width, CANVAS_HEIGHT);
            }
        };
    };
    CategoricalCellRenderer.prototype.createGroup = function (col, _context, globalHist) {
        var _a = hist(col, false), template = _a.template, update = _a.update;
        return {
            template: template + "</div>",
            update: function (n, _group, rows) {
                var _a = computeHist(rows, function (r) { return col.getCategory(r); }, col.categories), maxBin = _a.maxBin, hist = _a.hist;
                var max = Math.max(maxBin, globalHist ? globalHist.maxBin : 0);
                update(n, max, hist);
            }
        };
    };
    CategoricalCellRenderer.prototype.createSummary = function (col, ctx, interactive) {
        return (col instanceof CategoricalColumn || col instanceof OrdinalColumn) ? interactiveSummary(col, interactive, ctx.idPrefix) : staticSummary(col, interactive);
    };
    return CategoricalCellRenderer;
}());
export default CategoricalCellRenderer;
function staticSummary(col, interactive) {
    var _a = hist(col, interactive), template = _a.template, update = _a.update;
    return {
        template: template + "</div>",
        update: function (n, hist) {
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.maxBin, hist.hist);
        }
    };
}
function interactiveSummary(col, interactive, idPrefix) {
    var _a = hist(col, interactive || wideEnough(col)), template = _a.template, update = _a.update;
    var filterUpdate;
    return {
        template: "" + template + (interactive ? filterMissingNumberMarkup(false, 0, idPrefix) : '') + "</div>",
        update: function (n, hist) {
            if (!filterUpdate) {
                filterUpdate = interactiveHist(col, n);
            }
            filterUpdate(hist ? hist.missing : 0, col);
            n.classList.toggle('lu-missing', !hist);
            if (!hist) {
                return;
            }
            update(n, hist.maxBin, hist.hist);
        }
    };
}
function hist(col, showLabels) {
    var bins = col.categories.map(function (c) { return "<div title=\"" + c.label + ": 0\" data-cat=\"" + c.name + "\" " + (showLabels ? "data-title=\"" + c.label + "\"" : '') + "><div style=\"height: 0; background-color: " + c.color + "\"></div></div>"; }).join('');
    return {
        template: "<div" + (col.dataLength > DENSE_HISTOGRAM ? 'class="lu-dense"' : '') + ">" + bins,
        update: function (n, maxBin, hist) {
            forEach(n, '[data-cat]', function (d, i) {
                var y = hist[i].y;
                d.title = col.categories[i].label + ": " + y;
                var inner = d.firstElementChild;
                inner.style.height = Math.round(y * 100 / maxBin) + "%";
            });
        }
    };
}
export function interactiveHist(col, node) {
    var bins = Array.from(node.querySelectorAll('[data-cat]'));
    bins.forEach(function (bin, i) {
        var cat = col.categories[i];
        bin.onclick = function (evt) {
            evt.preventDefault();
            evt.stopPropagation();
            var old = col.getFilter();
            if (old == null || !Array.isArray(old.filter)) {
                var without = col.categories.slice();
                bin.dataset.filtered = 'filtered';
                without.splice(i, 1);
                col.setFilter({
                    filterMissing: old ? old.filterMissing : false,
                    filter: without.map(function (d) { return d.name; })
                });
                return;
            }
            var filter = old.filter.slice();
            var contained = filter.indexOf(cat.name);
            if (contained >= 0) {
                bin.dataset.filtered = 'filtered';
                filter.splice(contained, 1);
            }
            else {
                delete bin.dataset.filtered;
                filter.push(cat.name);
            }
            col.setFilter({
                filterMissing: old.filterMissing,
                filter: filter
            });
        };
    });
    var filterMissing = node.querySelector('input');
    if (filterMissing) {
        filterMissing.onchange = function () {
            var v = filterMissing.checked;
            var old = col.getFilter();
            if (old == null) {
                col.setFilter(v ? { filterMissing: v, filter: col.categories.map(function (d) { return d.name; }) } : null);
            }
            else {
                col.setFilter({ filterMissing: v, filter: old.filter });
            }
        };
    }
    return function (missing, actCol) {
        col = actCol;
        var cats = col.categories;
        var f = col.getFilter();
        bins.forEach(function (bin, i) {
            if (!isCategoryIncluded(f, cats[i])) {
                bin.dataset.filtered = 'filtered';
            }
            else {
                delete bin.dataset.filtered;
            }
        });
        if (filterMissing) {
            filterMissing.checked = f != null && f.filterMissing;
            updateFilterMissingNumberMarkup(filterMissing.parentElement, missing);
        }
    };
}
//# sourceMappingURL=CategoricalCellRenderer.js.map