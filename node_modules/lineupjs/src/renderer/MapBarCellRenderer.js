import { isMissingValue, isNumberColumn } from '../model';
import { isMapColumn } from '../model/IArrayColumn';
import { DEFAULT_FORMATTER } from '../model/INumberColumn';
import { isMapAbleColumn } from '../model/MappingFunction';
import { colorOf } from './impose';
import { ERenderMode } from './interfaces';
import { renderMissingDOM } from './missing';
import { noop, noRenderer } from './utils';
var MapBarCellRenderer = (function () {
    function MapBarCellRenderer() {
        this.title = 'Bar Table';
    }
    MapBarCellRenderer.prototype.canRender = function (col, mode) {
        return isMapColumn(col) && isNumberColumn(col) && (mode === ERenderMode.CELL || (mode === ERenderMode.SUMMARY && isMapAbleColumn(col)));
    };
    MapBarCellRenderer.prototype.create = function (col, _context, _hist, imposer) {
        return {
            template: "<div></div>",
            update: function (node, d) {
                if (renderMissingDOM(node, col, d)) {
                    return;
                }
                node.innerHTML = col.getMap(d).map(function (_a) {
                    var key = _a.key, value = _a.value;
                    if (isMissingValue(value)) {
                        return "<div>" + key + "</div><div class=\"lu-missing\"></div>";
                    }
                    var w = isNaN(value) ? 0 : Math.round(value * 100 * 100) / 100;
                    return "<div>" + key + "</div><div title=\"" + DEFAULT_FORMATTER(value) + "\"><div style=\"width: " + w + "%; background-color: " + colorOf(col, d, imposer) + "\"><span class=\"lu-hover-only\">" + value + "</span></div></div>";
                }).join('');
            },
            render: noop
        };
    };
    MapBarCellRenderer.prototype.createGroup = function () {
        return noRenderer;
    };
    MapBarCellRenderer.prototype.createSummary = function (col) {
        return {
            template: "<div><div>Key</div><div><span></span><span></span>Value</div></div>",
            update: function (node) {
                var range = col.getRange();
                var value = node.lastElementChild;
                value.firstElementChild.textContent = range[0];
                value.children[1].textContent = range[1];
            }
        };
    };
    return MapBarCellRenderer;
}());
export default MapBarCellRenderer;
//# sourceMappingURL=MapBarCellRenderer.js.map