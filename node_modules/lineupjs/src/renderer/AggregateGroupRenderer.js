import AggregateGroupColumn from '../model/AggregateGroupColumn';
import { AGGREGATE, CANVAS_HEIGHT } from '../styles';
var AggregateGroupRenderer = (function () {
    function AggregateGroupRenderer() {
        this.title = 'Default';
    }
    AggregateGroupRenderer.prototype.canRender = function (col) {
        return col instanceof AggregateGroupColumn;
    };
    AggregateGroupRenderer.prototype.create = function (col, context) {
        var width = context.colWidth(col);
        return {
            template: "<div title=\"Collapse Group\"></div>",
            update: function (node, _row, _i, group) {
                node.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    col.setAggregated(group, true);
                };
            },
            render: function (ctx) {
                ctx.fillStyle = AGGREGATE.color;
                ctx.fillRect(width - AGGREGATE.width - 1, 0, AGGREGATE.strokeWidth, CANVAS_HEIGHT);
            }
        };
    };
    AggregateGroupRenderer.prototype.createGroup = function (col) {
        return {
            template: "<div title=\"Expand Group\"></div>",
            update: function (node, group) {
                node.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    col.setAggregated(group, false);
                };
            }
        };
    };
    AggregateGroupRenderer.prototype.createSummary = function (col, context) {
        return {
            template: "<div title=\"(Un)Aggregate All\" data-icon=\"caret-down\"></div>",
            update: function (node) {
                var ranking = col.findMyRanker();
                var right = Boolean(ranking && ranking.getGroups().every(function (g) { return col.isAggregated(g); }));
                node.dataset.icon = right ? 'caret-right' : 'caret-down';
                node.onclick = function (evt) {
                    evt.stopPropagation();
                    var ranking = col.findMyRanker();
                    if (!ranking || !context) {
                        return;
                    }
                    var aggregate = node.dataset.icon === 'caret-down';
                    node.dataset.icon = aggregate ? 'caret-right' : 'caret-down';
                    context.provider.aggregateAllOf(ranking, aggregate);
                };
            }
        };
    };
    return AggregateGroupRenderer;
}());
export default AggregateGroupRenderer;
//# sourceMappingURL=AggregateGroupRenderer.js.map