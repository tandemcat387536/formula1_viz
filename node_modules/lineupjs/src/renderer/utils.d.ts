import Column from '../model/Column';
import { IArrayColumn } from '../model/IArrayColumn';
import { IDataRow } from '../model/interfaces';
export declare function attr<T extends (HTMLElement | SVGElement)>(node: T, attrs?: {
    [key: string]: any;
}, styles?: {
    [key: string]: any;
}, text?: string): T;
export declare function noop(): void;
export declare const noRenderer: {
    template: string;
    update: typeof noop;
    render: typeof noop;
};
export declare function setText<T extends Node>(node: T, text?: string): T;
export declare function forEach<T extends Element>(node: Element, selector: string, callback: (d: T, i: number) => void): void;
export declare function forEachChild<T extends Element>(node: Element, callback: (d: T, i: number) => void): void;
export declare function matchColumns(node: HTMLElement, columns: {
    column: Column;
    template: string;
    rendererId: string;
}[]): void;
export declare function wideEnough(col: IArrayColumn<any>, length?: number): boolean;
export declare function adaptTextColorToBgColor(bgColor: string): string;
export declare function adaptDynamicColorToBgColor(node: HTMLElement, bgColor: string, title: string, width: number): void;
export declare const uniqueId: (prefix: string) => string;
export declare function exampleText(col: Column, rows: IDataRow[]): string;
