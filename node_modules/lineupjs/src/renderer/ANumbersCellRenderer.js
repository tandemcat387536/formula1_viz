import { LazyBoxPlotData } from '../internal';
import { isMissingValue } from '../model';
import { renderMissingCanvas, renderMissingDOM } from './missing';
var ANumbersCellRenderer = (function () {
    function ANumbersCellRenderer() {
    }
    ANumbersCellRenderer.choose = function (col, rows) {
        var data = rows.map(function (r) { return ({ n: col.getNumbers(r), raw: col.getRawNumbers(r) }); });
        var cols = col.dataLength;
        var normalized = [];
        var raw = [];
        var _loop_1 = function (i) {
            var vs = data.map(function (d) { return ({ n: d.n[i], raw: d.raw[i] }); }).filter(function (d) { return !isMissingValue(d.n); });
            if (vs.length === 0) {
                normalized.push(NaN);
                raw.push(NaN);
            }
            else {
                var box = new LazyBoxPlotData(vs.map(function (d) { return d.n; }));
                var boxRaw = new LazyBoxPlotData(vs.map(function (d) { return d.raw; }));
                normalized.push(box[col.getSortMethod()]);
                raw.push(boxRaw[col.getSortMethod()]);
            }
        };
        for (var i = 0; i < cols; ++i) {
            _loop_1(i);
        }
        return { normalized: normalized, raw: raw };
    };
    ANumbersCellRenderer.prototype.create = function (col, context, _hist, imposer) {
        var width = context.colWidth(col);
        var _a = this.createContext(col, context, imposer), templateRow = _a.templateRow, render = _a.render, update = _a.update;
        return {
            template: "<div>" + templateRow + "</div>",
            update: function (n, d) {
                if (renderMissingDOM(n, col, d)) {
                    return;
                }
                update(n, col.getNumbers(d), col.getRawNumbers(d), d);
            },
            render: function (ctx, d) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                render(ctx, col.getNumbers(d), d);
            },
        };
    };
    ANumbersCellRenderer.prototype.createGroup = function (col, context, _hist, imposer) {
        var _a = this.createContext(col, context, imposer), templateRow = _a.templateRow, update = _a.update;
        return {
            template: "<div>" + templateRow + "</div>",
            update: function (n, _group, rows) {
                var _a = ANumbersCellRenderer.choose(col, rows), normalized = _a.normalized, raw = _a.raw;
                update(n, normalized, raw, rows[0]);
            }
        };
    };
    return ANumbersCellRenderer;
}());
export { ANumbersCellRenderer };
export function matchRows(n, rows, template) {
    var children = Array.from(n.children);
    if (children.length > rows.length) {
        children.slice(rows.length).forEach(function (c) { return c.remove(); });
    }
    else if (rows.length > children.length) {
        n.insertAdjacentHTML('beforeend', template.repeat(rows.length - children.length));
    }
}
//# sourceMappingURL=ANumbersCellRenderer.js.map