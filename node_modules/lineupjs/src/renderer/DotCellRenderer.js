import { isMissingValue, isNumberColumn } from '../model';
import Column from '../model/Column';
import { DEFAULT_FORMATTER, isNumbersColumn } from '../model/INumberColumn';
import { CANVAS_HEIGHT, DOT } from '../styles';
import { colorOf } from './impose';
import { ERenderMode } from './interfaces';
import { renderMissingCanvas, renderMissingDOM } from './missing';
import { attr, forEachChild, noRenderer } from './utils';
var DotCellRenderer = (function () {
    function DotCellRenderer() {
        this.title = 'Dot';
        this.groupTitle = 'Dots';
    }
    DotCellRenderer.prototype.canRender = function (col, mode) {
        return isNumberColumn(col) && mode !== ERenderMode.SUMMARY;
    };
    DotCellRenderer.getDOMRenderer = function (col) {
        var dots = isNumbersColumn(col) ? col.dataLength : 1;
        var tmp = '';
        for (var i = 0; i < dots; ++i) {
            tmp += "<div style='background-color: " + Column.DEFAULT_COLOR + "' title=''></div>";
        }
        var update = function (n, vs, labels, colors) {
            if (n.children.length !== vs.length) {
                var tmp_1 = '';
                for (var i = 0; i < vs.length; ++i) {
                    tmp_1 += "<div style='background-color: " + colors[i] + "' title='" + labels[i] + "'></div>";
                }
                n.innerHTML = tmp_1;
            }
            forEachChild(n, function (d, i) {
                var v = vs[i];
                attr(d, {
                    title: labels[i]
                }, {
                    display: isMissingValue(v) ? 'none' : null,
                    left: Math.round(v * 100) + "%",
                    top: vs.length > 1 ? Math.round(Math.random() * 80 + 10) + "%" : null,
                    'background-color': colors[i]
                });
            });
        };
        var render = function (ctx, vs, colors, width) {
            ctx.save();
            ctx.globalAlpha = DOT.opacity;
            vs.forEach(function (v, i) {
                ctx.fillStyle = colors[i] || DOT.color;
                ctx.fillRect(Math.max(0, v * width - DOT.size / 2), 0, DOT.size, CANVAS_HEIGHT);
            });
            ctx.restore();
        };
        return { template: "<div>" + tmp + "</div>", update: update, render: render };
    };
    DotCellRenderer.prototype.create = function (col, context, _hist, imposer) {
        var _a = DotCellRenderer.getDOMRenderer(col), template = _a.template, render = _a.render, update = _a.update;
        var width = context.colWidth(col);
        return {
            template: template,
            update: function (n, d) {
                if (renderMissingDOM(n, col, d)) {
                    return;
                }
                var color = colorOf(col, d, imposer);
                var v = col.getValue(d);
                if (!isNumbersColumn(col)) {
                    return update(n, [v], [col.getLabel(d)], [color]);
                }
                var vs = v.filter(function (vi) { return !isMissingValue(vi); });
                return update(n, vs, vs.map(DEFAULT_FORMATTER), vs.map(function (_) { return color; }));
            },
            render: function (ctx, d) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                var color = colorOf(col, d, imposer);
                var v = col.getValue(d);
                if (!isNumbersColumn(col)) {
                    return render(ctx, [v], [color], width);
                }
                var vs = v.filter(function (vi) { return !isMissingValue(vi); });
                return render(ctx, vs, vs.map(function (_) { return color; }), width);
            }
        };
    };
    DotCellRenderer.prototype.createGroup = function (col, _context, _hist, imposer) {
        var _a = DotCellRenderer.getDOMRenderer(col), template = _a.template, update = _a.update;
        return {
            template: template,
            update: function (n, _group, rows) {
                var _a;
                var vs = rows.map(function (r) { return col.getValue(r); });
                var colors = rows.map(function (r) { return colorOf(col, r, imposer); });
                if (!isNumbersColumn(col)) {
                    return update(n, vs, rows.map(function (r) { return col.getLabel(r); }), colors);
                }
                var all = (_a = []).concat.apply(_a, vs.filter(function (vi) { return !isMissingValue(vi); }));
                return update(n, all, all.map(DEFAULT_FORMATTER), vs.map(function (_v, i) { return colors[i]; }));
            }
        };
    };
    DotCellRenderer.prototype.createSummary = function () {
        return noRenderer;
    };
    return DotCellRenderer;
}());
export default DotCellRenderer;
//# sourceMappingURL=DotCellRenderer.js.map