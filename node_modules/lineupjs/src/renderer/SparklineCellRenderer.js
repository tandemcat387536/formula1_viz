import { isMissingValue } from '../model';
import { isNumbersColumn } from '../model/INumberColumn';
import NumbersColumn from '../model/NumbersColumn';
import { matchRows } from './ANumbersCellRenderer';
import { ERenderMode } from './interfaces';
import { renderMissingDOM } from './missing';
import { forEachChild, noop, noRenderer } from './utils';
export function line(data) {
    if (data.length === 0) {
        return '';
    }
    var p = '';
    var moveNext = true;
    data.forEach(function (d, i) {
        if (isMissingValue(d)) {
            moveNext = true;
        }
        else if (moveNext) {
            p += "M" + i + "," + (1 - d) + " ";
            moveNext = false;
        }
        else {
            p += "L" + i + "," + (1 - d) + " ";
        }
    });
    return p;
}
var SparklineCellRenderer = (function () {
    function SparklineCellRenderer() {
        this.title = 'Sparkline';
    }
    SparklineCellRenderer.prototype.canRender = function (col, mode) {
        return isNumbersColumn(col) && mode !== ERenderMode.SUMMARY;
    };
    SparklineCellRenderer.prototype.create = function (col) {
        var dataLength = col.dataLength;
        var yPos = 1 - col.getMapping().apply(NumbersColumn.CENTER);
        return {
            template: "<svg viewBox=\"0 0 " + (dataLength - 1) + " 1\" preserveAspectRatio=\"none meet\"><line x1=\"0\" x2=\"" + (dataLength - 1) + "\" y1=\"" + yPos + "\" y2=\"" + yPos + "\"></line><path></path></svg>",
            update: function (n, d) {
                if (renderMissingDOM(n, col, d)) {
                    return;
                }
                var data = col.getNumbers(d);
                n.querySelector('path').setAttribute('d', line(data));
            },
            render: noop
        };
    };
    SparklineCellRenderer.prototype.createGroup = function (col) {
        var dataLength = col.dataLength;
        var yPos = 1 - col.getMapping().apply(NumbersColumn.CENTER);
        return {
            template: "<svg viewBox=\"0 0 " + dataLength + " 1\" preserveAspectRatio=\"none meet\"><line x1=\"0\" x2=\"" + (dataLength - 1) + "\" y1=\"" + yPos + "\" y2=\"" + yPos + "\"></line><path></path></svg>",
            update: function (n, _group, rows) {
                matchRows(n, rows, "<path></path>");
                forEachChild(n, (function (row, i) {
                    var d = rows[i];
                    row.setAttribute('d', line(col.getNumbers(d)));
                }));
            }
        };
    };
    SparklineCellRenderer.prototype.createSummary = function () {
        return noRenderer;
    };
    return SparklineCellRenderer;
}());
export default SparklineCellRenderer;
//# sourceMappingURL=SparklineCellRenderer.js.map