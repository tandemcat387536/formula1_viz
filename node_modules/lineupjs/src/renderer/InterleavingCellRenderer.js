import CompositeNumberColumn from '../model/CompositeNumberColumn';
import { CANVAS_HEIGHT } from '../styles';
import { getHistDOMRenderer } from './HistogramCellRenderer';
import { ERenderMode } from './interfaces';
import { renderMissingCanvas, renderMissingDOM } from './missing';
import { createFlatColumnData } from './MultiLevelCellRenderer';
import { matchColumns, forEachChild } from './utils';
import { colorOf } from '../ui/dialogs/utils';
var InterleavingCellRenderer = (function () {
    function InterleavingCellRenderer() {
        this.title = 'Interleaved';
    }
    InterleavingCellRenderer.prototype.canRender = function (col) {
        return col instanceof CompositeNumberColumn;
    };
    InterleavingCellRenderer.prototype.create = function (col, context) {
        var cols = createFlatColumnData(col, context, false, ERenderMode.CELL).cols;
        var width = context.colWidth(col);
        return {
            template: "<div>" + cols.map(function (r) { return r.template; }).join('') + "</div>",
            update: function (n, d, i, group) {
                var missing = renderMissingDOM(n, col, d);
                if (missing) {
                    return;
                }
                matchColumns(n, cols);
                forEachChild(n, function (ni, j) {
                    cols[j].renderer.update(ni, d, i, group);
                });
            },
            render: function (ctx, d, _i, group) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                ctx.save();
                ctx.scale(1, 1 / cols.length);
                cols.forEach(function (r, i) {
                    r.renderer.render(ctx, d, i, group);
                    ctx.translate(0, CANVAS_HEIGHT);
                });
                ctx.restore();
            }
        };
    };
    InterleavingCellRenderer.prototype.createGroup = function (col, context) {
        var cols = createFlatColumnData(col, context, false, ERenderMode.GROUP).cols;
        return {
            template: "<div>" + cols.map(function (r) { return r.template; }).join('') + "</div>",
            update: function (n, group, rows) {
                matchColumns(n, cols);
                forEachChild(n, function (ni, j) {
                    cols[j].groupRenderer.update(ni, group, rows);
                });
            }
        };
    };
    InterleavingCellRenderer.prototype.createSummary = function (col, context) {
        var cols = col.children;
        var acc = 0;
        var _a = getHistDOMRenderer(context.totalNumberOfRows, col, {
            color: function () { return colorOf(cols[(acc++) % cols.length]); }
        }), template = _a.template, render = _a.render;
        return {
            template: template,
            update: function (n) {
                var stats = cols.map(function (c) { return context.statsOf(c); });
                if (!stats.some(Boolean)) {
                    n.classList.add('lu-missing');
                    return;
                }
                n.classList.remove('lu-missing');
                var grouped = groupedHist(stats);
                render(n, grouped);
            }
        };
    };
    return InterleavingCellRenderer;
}());
export default InterleavingCellRenderer;
var dummyBin = {
    length: 0,
    x0: 0,
    x1: 0
};
function groupedHist(stats) {
    var sample = stats.find(Boolean);
    var bins = sample.hist.length;
    var hist = [];
    var maxBin = 0;
    var _loop_1 = function (i) {
        stats.forEach(function (s) {
            var bin = s ? s.hist[i] : null;
            if (!bin) {
                hist.push(dummyBin);
                return;
            }
            if (bin.length > maxBin) {
                maxBin = bin.length;
            }
            hist.push(bin);
        });
    };
    for (var i = 0; i < bins; ++i) {
        _loop_1(i);
    }
    return { bins: bins, max: maxBin, hist: hist };
}
//# sourceMappingURL=InterleavingCellRenderer.js.map