import { isMissingValue } from '../model';
import { isArrayColumn, isMapColumn } from '../model/IArrayColumn';
import { renderMissingDOM } from './missing';
import { forEach, noop } from './utils';
var TableCellRenderer = (function () {
    function TableCellRenderer() {
        this.title = 'Table';
    }
    TableCellRenderer.prototype.canRender = function (col) {
        return isMapColumn(col);
    };
    TableCellRenderer.prototype.create = function (col) {
        if (isArrayColumn(col) && col.dataLength) {
            return this.createFixed(col);
        }
        return {
            template: "<div></div>",
            update: function (node, d) {
                if (renderMissingDOM(node, col, d)) {
                    return;
                }
                node.innerHTML = col.getMapLabel(d).map(function (_a) {
                    var key = _a.key, value = _a.value;
                    return "<div>" + key + "</div><div>" + value + "</div>";
                }).join('');
            },
            render: noop
        };
    };
    TableCellRenderer.template = function (col) {
        var labels = col.labels;
        return "<div>" + labels.map(function (l) { return "<div>" + l + "</div><div data-v></div>"; }).join('\n') + "</div>";
    };
    TableCellRenderer.prototype.createFixed = function (col) {
        return {
            template: TableCellRenderer.template(col),
            update: function (node, d) {
                if (renderMissingDOM(node, col, d)) {
                    return;
                }
                var value = col.getLabels(d);
                forEach(node, '[data-v]', function (n, i) {
                    n.innerHTML = value[i];
                });
            },
            render: noop
        };
    };
    TableCellRenderer.example = function (arr) {
        var numExampleRows = 5;
        return "" + arr.slice(0, numExampleRows).map(function (d) { return d.value; }).join(', ') + (numExampleRows < arr.length ? ', &hellip;' : '');
    };
    TableCellRenderer.prototype.createGroup = function (col) {
        if (isArrayColumn(col) && col.dataLength) {
            return this.createFixedGroup(col);
        }
        return {
            template: "<div></div>",
            update: function (node, _group, rows) {
                var vs = rows.filter(function (d) { return !col.isMissing(d); }).map(function (d) { return col.getMapLabel(d); });
                var entries = groupByKey(vs);
                node.innerHTML = entries.map(function (_a) {
                    var key = _a.key, values = _a.values;
                    return "<div>" + key + "</div><div>" + TableCellRenderer.example(values) + "</div>";
                }).join('');
            }
        };
    };
    TableCellRenderer.prototype.createFixedGroup = function (col) {
        return {
            template: TableCellRenderer.template(col),
            update: function (node, _group, rows) {
                var numExampleRows = 5;
                var vs = rows.filter(function (d) { return !col.isMissing(d); }).map(function (d) { return col.getLabels(d); });
                forEach(node, '[data-v]', function (n, i) {
                    var values = [];
                    for (var _i = 0, vs_1 = vs; _i < vs_1.length; _i++) {
                        var v = vs_1[_i];
                        var vi = v[i];
                        if (isMissingValue(vi)) {
                            continue;
                        }
                        values.push(vi);
                        if (values.length >= numExampleRows) {
                            break;
                        }
                    }
                    n.innerHTML = "" + values.join(', ') + (numExampleRows < vs.length ? ', &hellip;' : '');
                });
            }
        };
    };
    TableCellRenderer.prototype.createSummary = function () {
        return {
            template: "<div><div>Key</div><div>Value</div></div>",
            update: noop
        };
    };
    return TableCellRenderer;
}());
export default TableCellRenderer;
export function groupByKey(arr) {
    var m = new Map();
    arr.forEach(function (a) { return a.forEach(function (d) {
        if (!m.has(d.key)) {
            m.set(d.key, [d]);
        }
        else {
            m.get(d.key).push(d);
        }
    }); });
    return Array.from(m).sort(function (a, b) { return a[0].localeCompare(b[0]); }).map(function (_a) {
        var key = _a[0], values = _a[1];
        return ({ key: key, values: values });
    });
}
//# sourceMappingURL=TableCellRenderer.js.map