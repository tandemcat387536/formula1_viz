import { LazyBoxPlotData, round } from '../internal';
import { isNumberColumn } from '../model';
import { default as BoxPlotColumn } from '../model/BoxPlotColumn';
import { isBoxPlotColumn, isNumbersColumn } from '../model/INumberColumn';
import NumberColumn from '../model/NumberColumn';
import { BOX_PLOT, CANVAS_HEIGHT, DOT } from '../styles';
import { colorOf } from './impose';
import { ERenderMode } from './interfaces';
import { renderMissingCanvas, renderMissingDOM } from './missing';
import { isMapAbleColumn } from '../model/MappingFunction';
export function computeLabel(v) {
    if (v == null) {
        return '';
    }
    var f = BoxPlotColumn.DEFAULT_FORMATTER;
    var mean = v.mean != null ? "mean = " + f(v.mean) + "\n" : '';
    return "min = " + f(v.min) + "\nq1 = " + f(v.q1) + "\nmedian = " + f(v.median) + "\n" + mean + "q3 = " + f(v.q3) + "\nmax = " + f(v.max);
}
var BoxplotCellRenderer = (function () {
    function BoxplotCellRenderer() {
        this.title = 'Box Plot';
    }
    BoxplotCellRenderer.prototype.canRender = function (col, mode) {
        return (isBoxPlotColumn(col) && mode === ERenderMode.CELL || (isNumberColumn(col) && mode !== ERenderMode.CELL));
    };
    BoxplotCellRenderer.prototype.create = function (col, context, _hist, imposer) {
        var sortMethod = col.getSortMethod();
        var sortedByMe = col.isSortedByMe().asc !== undefined;
        var width = context.colWidth(col);
        return {
            template: "<div title=\"\">\n                    <div><div></div><div></div></div>\n                 </div>",
            update: function (n, d) {
                var data = col.getBoxPlotData(d);
                if (!data || col.isMissing(d)) {
                    n.classList.add('lu-missing');
                    return;
                }
                n.classList.remove('lu-missing');
                var label = col.getRawBoxPlotData(d);
                renderDOMBoxPlot(n, data, label, sortedByMe ? sortMethod : '', colorOf(col, d, imposer));
            },
            render: function (ctx, d) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                var data = col.getBoxPlotData(d);
                if (!data) {
                    return;
                }
                var scaled = {
                    min: data.min * width,
                    median: data.median * width,
                    q1: data.q1 * width,
                    q3: data.q3 * width,
                    max: data.max * width,
                    outlier: data.outlier ? data.outlier.map(function (d) { return d * width; }) : undefined,
                    whiskerLow: data.whiskerLow != null ? data.whiskerLow * width : undefined,
                    whiskerHigh: data.whiskerHigh != null ? data.whiskerHigh * width : undefined
                };
                renderBoxPlot(ctx, scaled, sortedByMe ? sortMethod : '', colorOf(col, d, imposer), CANVAS_HEIGHT, 0);
            }
        };
    };
    BoxplotCellRenderer.createAggregatedBoxPlot = function (col, rows, raw) {
        var _a;
        if (raw === void 0) { raw = false; }
        var vs = (_a = []).concat.apply(_a, rows.map(function (r) { return (raw ? col.getRawNumbers(r) : col.getNumber(r)); }));
        return new LazyBoxPlotData(vs);
    };
    BoxplotCellRenderer.prototype.createGroup = function (col, _context, _hist, imposer) {
        var sort = (col instanceof NumberColumn && col.isGroupSortedByMe().asc !== undefined) ? col.getSortMethod() : '';
        return {
            template: "<div title=\"\">\n                    <div><div></div><div></div></div>\n                 </div>",
            update: function (n, _group, rows) {
                if (rows.every(function (row) { return col.isMissing(row); })) {
                    renderMissingDOM(n, col, rows[0]);
                    return;
                }
                n.classList.remove('lu-missing');
                var box, label;
                if (isNumbersColumn(col)) {
                    box = BoxplotCellRenderer.createAggregatedBoxPlot(col, rows);
                    label = BoxplotCellRenderer.createAggregatedBoxPlot(col, rows, true);
                }
                else {
                    box = new LazyBoxPlotData(rows.map(function (row) { return col.getNumber(row); }));
                    label = new LazyBoxPlotData(rows.map(function (row) { return col.getRawNumber(row); }));
                }
                renderDOMBoxPlot(n, box, label, sort, colorOf(col, null, imposer));
            }
        };
    };
    BoxplotCellRenderer.prototype.createSummary = function (col, _comtext, _interactive, imposer) {
        var template = "<div title=\"\">\n    <div><div></div><div></div></div>";
        if (isMapAbleColumn(col)) {
            var range = col.getRange();
            template += "<span>" + range[0] + "</span><span>" + range[1] + "</span>";
        }
        template += '</div>';
        return {
            template: template,
            update: function (n, hist) {
                if (hist == null || hist.count === 0) {
                    n.classList.add('lu-missing');
                    return;
                }
                n.classList.remove('lu-missing');
                var sort = (col instanceof NumberColumn && col.isGroupSortedByMe().asc !== undefined) ? col.getSortMethod() : '';
                if (isMapAbleColumn(col)) {
                    var range_1 = col.getRange();
                    Array.from(n.querySelectorAll('span')).forEach(function (d, i) { return d.textContent = range_1[i]; });
                }
                renderDOMBoxPlot(n, hist, hist, sort, colorOf(col, null, imposer), isMapAbleColumn(col));
            }
        };
    };
    return BoxplotCellRenderer;
}());
export default BoxplotCellRenderer;
function renderDOMBoxPlot(n, data, label, sort, color, hasRange) {
    if (hasRange === void 0) { hasRange = false; }
    n.title = computeLabel(label);
    var whiskers = n.firstElementChild;
    var box = whiskers.firstElementChild;
    var median = whiskers.lastElementChild;
    var leftWhisker = data.whiskerLow != null ? data.whiskerLow : Math.max(data.q1 - 1.5 * (data.q3 - data.q1), data.min);
    var rightWhisker = data.whiskerHigh != null ? data.whiskerHigh : Math.min(data.q3 + 1.5 * (data.q3 - data.q1), data.max);
    whiskers.style.left = round(leftWhisker * 100, 2) + "%";
    var range = rightWhisker - leftWhisker;
    whiskers.style.width = round(range * 100, 2) + "%";
    box.style.left = round((data.q1 - leftWhisker) / range * 100, 2) + "%";
    box.style.width = round((data.q3 - data.q1) / range * 100, 2) + "%";
    box.style.backgroundColor = color;
    median.style.left = round((data.median - leftWhisker) / range * 100, 2) + "%";
    var outliers = Array.from(n.children).slice(1, hasRange ? -2 : undefined);
    var numOutliers = data.outlier ? data.outlier.length : 0;
    outliers.splice(numOutliers, outliers.length - numOutliers).forEach(function (v) { return v.remove(); });
    whiskers.dataset.sort = sort;
    if (!data.outlier || numOutliers === 0) {
        return;
    }
    for (var i = outliers.length; i < numOutliers; ++i) {
        console.assert(n.ownerDocument != null);
        var p = n.ownerDocument.createElement('div');
        outliers.unshift(p);
        whiskers.insertAdjacentElement('afterend', p);
    }
    data.outlier.forEach(function (v, i) {
        delete outliers[i].dataset.sort;
        outliers[i].style.left = round(v * 100, 2) + "%";
    });
    if (sort === 'min' && data.outlier[0] <= leftWhisker) {
        whiskers.dataset.sort = '';
        outliers[0].dataset.sort = 'min';
        if (outliers.length > 1) {
            outliers[outliers.length - 1].insertAdjacentElement('afterend', outliers[0]);
        }
    }
    else if (sort === 'max' && data.outlier[outliers.length - 1] >= rightWhisker) {
        whiskers.dataset.sort = '';
        outliers[outliers.length - 1].dataset.sort = 'max';
    }
}
function renderBoxPlot(ctx, box, sort, color, height, topPadding) {
    var left = box.whiskerLow != null ? box.whiskerLow : Math.max((box.q1 - 1.5 * (box.q3 - box.q1)), box.min);
    var right = box.whiskerHigh != null ? box.whiskerHigh : Math.min((box.q3 + 1.5 * (box.q3 - box.q1)), box.max);
    ctx.fillStyle = color || BOX_PLOT.box;
    ctx.strokeStyle = BOX_PLOT.stroke;
    ctx.beginPath();
    ctx.rect(box.q1, 0, box.q3 - box.q1, height);
    ctx.fill();
    ctx.stroke();
    var bottomPos = height - topPadding;
    var middlePos = height / 2;
    ctx.beginPath();
    ctx.moveTo(left, middlePos);
    ctx.lineTo(box.q1, middlePos);
    ctx.moveTo(left, topPadding);
    ctx.lineTo(left, bottomPos);
    ctx.moveTo(box.median, 0);
    ctx.lineTo(box.median, height);
    ctx.moveTo(box.q3, middlePos);
    ctx.lineTo(right, middlePos);
    ctx.moveTo(right, topPadding);
    ctx.lineTo(right, bottomPos);
    ctx.stroke();
    ctx.fill();
    if (sort !== '') {
        ctx.strokeStyle = BOX_PLOT.sort;
        ctx.beginPath();
        ctx.moveTo(box[sort], topPadding);
        ctx.lineTo(box[sort], height - topPadding);
        ctx.stroke();
        ctx.fill();
    }
    if (!box.outlier) {
        return;
    }
    ctx.fillStyle = BOX_PLOT.outlier;
    box.outlier.forEach(function (v) {
        ctx.fillRect(Math.max(v - DOT.size / 2, 0), middlePos - DOT.size / 2, DOT.size, DOT.size);
    });
}
//# sourceMappingURL=BoxplotCellRenderer.js.map