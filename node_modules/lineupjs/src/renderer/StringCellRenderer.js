import StringColumn from '../model/StringColumn';
import { filterMissingMarkup, findFilterMissing } from '../ui/missing';
import { renderMissingDOM } from './missing';
import { noop, setText, uniqueId, exampleText } from './utils';
var StringCellRenderer = (function () {
    function StringCellRenderer() {
        this.title = 'Default';
    }
    StringCellRenderer.prototype.canRender = function (col) {
        return col instanceof StringColumn;
    };
    StringCellRenderer.prototype.create = function (col) {
        var align = col.alignment || 'left';
        return {
            template: "<div" + (align !== 'left' ? " class=\"lu-" + align + "\"" : '') + "> </div>",
            update: function (n, d) {
                renderMissingDOM(n, col, d);
                if (col.escape) {
                    setText(n, col.getLabel(d));
                }
                else {
                    n.innerHTML = col.getLabel(d);
                }
                n.title = n.textContent;
            },
            render: noop
        };
    };
    StringCellRenderer.prototype.createGroup = function (col) {
        return {
            template: "<div> </div>",
            update: function (n, _group, rows) {
                var v = exampleText(col, rows);
                if (col.escape) {
                    setText(n, v);
                }
                else {
                    n.innerHTML = v;
                    n.title = v;
                }
            }
        };
    };
    StringCellRenderer.interactiveSummary = function (col, node) {
        var form = node;
        var filterMissing = findFilterMissing(node);
        var input = node.querySelector('input[type="text"]');
        var isRegex = node.querySelector('input[type="checkbox"]');
        var update = function () {
            input.disabled = filterMissing.checked;
            isRegex.disabled = filterMissing.checked;
            if (filterMissing.checked) {
                col.setFilter(StringColumn.FILTER_MISSING);
                return;
            }
            var valid = input.value.trim();
            filterMissing.disabled = valid.length > 0;
            if (valid.length <= 0) {
                col.setFilter(null);
                return;
            }
            col.setFilter(isRegex.checked ? new RegExp(input.value) : input.value);
        };
        filterMissing.onchange = update;
        input.onchange = update;
        isRegex.onchange = update;
        form.onsubmit = function (evt) {
            evt.preventDefault();
            evt.stopPropagation();
            update();
            return false;
        };
        return function (actCol) {
            col = actCol;
            var bak = col.getFilter() || '';
            var bakMissing = bak === StringColumn.FILTER_MISSING;
            if (bakMissing) {
                bak = '';
            }
            filterMissing.checked = bakMissing;
            input.value = bak instanceof RegExp ? bak.source : bak;
            isRegex.checked = bak instanceof RegExp;
            filterMissing.disabled = input.value.trim().length > 0;
            input.disabled = filterMissing.checked;
            isRegex.disabled = filterMissing.checked;
        };
    };
    StringCellRenderer.prototype.createSummary = function (col, context, interactive) {
        if (!interactive) {
            return {
                template: "<div></div>",
                update: function (node) {
                    var filter = col.getFilter() || '';
                    node.textContent = toString(filter);
                }
            };
        }
        var bak = col.getFilter() || '';
        var bakMissing = bak === StringColumn.FILTER_MISSING;
        if (bakMissing) {
            bak = '';
        }
        var update;
        var id = uniqueId(context.idPrefix);
        return {
            template: "<form><input type=\"text\" placeholder=\"Filter " + col.desc.label + "...\" autofocus value=\"" + ((bak instanceof RegExp) ? bak.source : bak) + "\">\n          <div class=\"lu-checkbox\"><input id=\"" + id + "\" type=\"checkbox\" " + ((bak instanceof RegExp) ? 'checked="checked"' : '') + "><label for=\"" + id + "\">Use regular expressions</label></div>\n          " + filterMissingMarkup(bakMissing, context.idPrefix) + "</form>",
            update: function (node) {
                if (!update) {
                    update = StringCellRenderer.interactiveSummary(col, node);
                }
                update(col);
            }
        };
    };
    return StringCellRenderer;
}());
export default StringCellRenderer;
function toString(filter) {
    if (filter == null || filter === '' || filter === StringColumn.FILTER_MISSING) {
        return '';
    }
    if (filter instanceof RegExp) {
        return filter.source;
    }
    return String(filter);
}
//# sourceMappingURL=StringCellRenderer.js.map