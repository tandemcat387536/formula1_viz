import { ICategoricalStatistics, IStatistics } from '../internal';
import { IDataRow } from '../model';
import Column from '../model/Column';
import { default as IRenderContext, ERenderMode, ICellRenderer, ICellRendererFactory, IGroupCellRenderer, IImposer } from './interfaces';
import { ISummaryRenderer } from './interfaces';
export declare abstract class AAggregatedGroupRenderer<T extends Column> implements ICellRendererFactory {
    abstract readonly title: string;
    abstract canRender(col: Column, mode: ERenderMode): boolean;
    abstract create(col: T, context: IRenderContext, hist: IStatistics | ICategoricalStatistics | null, imposer?: IImposer): ICellRenderer;
    protected abstract aggregatedIndex(rows: IDataRow[], col: T): number;
    createGroup(col: T, context: IRenderContext, hist: IStatistics | ICategoricalStatistics | null, imposer?: IImposer): IGroupCellRenderer;
    createSummary(): ISummaryRenderer;
}
export default AAggregatedGroupRenderer;
