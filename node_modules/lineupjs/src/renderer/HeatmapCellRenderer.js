import { isMissingValue } from '../model';
import { DEFAULT_FORMATTER, isNumbersColumn } from '../model/INumberColumn';
import { CANVAS_HEIGHT } from '../styles';
import { ANumbersCellRenderer } from './ANumbersCellRenderer';
import { toHeatMapColor } from './BrightnessCellRenderer';
import { renderMissingValue, renderMissingDOM } from './missing';
import { noop, wideEnough } from './utils';
var GUESSED_HEIGHT = 20;
var HeatmapCellRenderer = (function () {
    function HeatmapCellRenderer() {
        this.title = 'Heatmap';
    }
    HeatmapCellRenderer.prototype.canRender = function (col) {
        return isNumbersColumn(col) && Boolean(col.dataLength);
    };
    HeatmapCellRenderer.prototype.createContext = function (col, context, _hist, imposer) {
        var width = context.colWidth(col);
        var cellDimension = width / col.dataLength;
        var labels = col.labels;
        var render = function (ctx, data, item, height) {
            data.forEach(function (d, j) {
                var x = j * cellDimension;
                if (isMissingValue(d)) {
                    renderMissingValue(ctx, cellDimension, height, x, 0);
                    return;
                }
                ctx.fillStyle = toHeatMapColor(d, item, col, imposer);
                ctx.fillRect(x, 0, cellDimension, height);
            });
        };
        return {
            template: "<canvas height=\"" + GUESSED_HEIGHT + "\" title=\"\"></canvas>",
            render: render,
            width: width,
            mover: function (n, values) { return function (evt) {
                var percent = evt.offsetX / width;
                var index = Math.max(0, Math.min(col.dataLength - 1, Math.floor(percent * (col.dataLength - 1) + 0.5)));
                n.title = labels[index] + ": " + values[index];
            }; }
        };
    };
    HeatmapCellRenderer.prototype.create = function (col, context, _hist, imposer) {
        var _a = this.createContext(col, context, _hist, imposer), template = _a.template, render = _a.render, mover = _a.mover, width = _a.width;
        return {
            template: template,
            update: function (n, d) {
                var ctx = n.getContext('2d');
                ctx.canvas.width = width;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                if (renderMissingDOM(n, col, d)) {
                    return;
                }
                n.onmousemove = mover(n, col.getRawNumbers(d).map(DEFAULT_FORMATTER));
                n.onmouseleave = function () { return n.title = ''; };
                render(ctx, col.getNumbers(d), d, GUESSED_HEIGHT);
            },
            render: function (ctx, d) {
                render(ctx, col.getNumbers(d), d, CANVAS_HEIGHT);
            }
        };
    };
    HeatmapCellRenderer.prototype.createGroup = function (col, context, _hist, imposer) {
        var _a = this.createContext(col, context, _hist, imposer), template = _a.template, render = _a.render, mover = _a.mover, width = _a.width;
        return {
            template: template,
            update: function (n, _group, rows) {
                var _a = ANumbersCellRenderer.choose(col, rows), normalized = _a.normalized, raw = _a.raw;
                var ctx = n.getContext('2d');
                ctx.canvas.width = width;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                n.onmousemove = mover(n, raw.map(DEFAULT_FORMATTER));
                n.onmouseleave = function () { return n.title = ''; };
                render(ctx, normalized, rows[0], GUESSED_HEIGHT);
            }
        };
    };
    HeatmapCellRenderer.prototype.createSummary = function (col) {
        var labels = col.labels.slice();
        while (labels.length > 0 && !wideEnough(col, labels.length)) {
            labels = labels.filter(function (_, i) { return i % 2 === 0; });
        }
        var templateRows = '<div>';
        for (var _i = 0, labels_1 = labels; _i < labels_1.length; _i++) {
            var label = labels_1[_i];
            templateRows += "<div title=\"" + label + "\" data-title=\"" + label + "\"></div>";
        }
        templateRows += '</div>';
        return {
            template: templateRows,
            update: noop
        };
    };
    return HeatmapCellRenderer;
}());
export default HeatmapCellRenderer;
//# sourceMappingURL=HeatmapCellRenderer.js.map