import { hsl } from 'd3-color';
import { isNumberColumn, isMapAbleColumn } from '../model';
import Column from '../model/Column';
import { isNumbersColumn } from '../model/INumberColumn';
import { CANVAS_HEIGHT } from '../styles';
import { colorOf } from './impose';
import { ERenderMode } from './interfaces';
import { renderMissingCanvas, renderMissingDOM } from './missing';
import { noRenderer, setText } from './utils';
export function toHeatMapColor(v, row, col, imposer) {
    if (v == null || isNaN(v)) {
        v = 1;
    }
    if (imposer || !isMapAbleColumn(col)) {
        var color = hsl(colorOf(col, row, imposer, v) || Column.DEFAULT_COLOR);
        color.l = 1 - v;
        return color.toString();
    }
    var map = col.getColorMapping();
    var valueColor = map.apply(v);
    if (map.type === 'solid') {
        var color = hsl(valueColor);
        color.l = 1 - v;
        return color.toString();
    }
    return valueColor;
}
var BrightnessCellRenderer = (function () {
    function BrightnessCellRenderer() {
        this.title = 'Brightness';
    }
    BrightnessCellRenderer.prototype.canRender = function (col, mode) {
        return isNumberColumn(col) && mode === ERenderMode.CELL && !isNumbersColumn(col);
    };
    BrightnessCellRenderer.prototype.create = function (col, context, _hist, imposer) {
        var width = context.colWidth(col);
        return {
            template: "<div title=\"\">\n        <div style=\"background-color: " + Column.DEFAULT_COLOR + "\"></div><div> </div>\n      </div>",
            update: function (n, d) {
                var missing = renderMissingDOM(n, col, d);
                n.title = col.getLabel(d);
                n.firstElementChild.style.backgroundColor = missing ? null : toHeatMapColor(col.getNumber(d), d, col, imposer);
                setText(n.lastElementChild, n.title);
            },
            render: function (ctx, d) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                ctx.fillStyle = toHeatMapColor(col.getNumber(d), d, col, imposer);
                ctx.fillRect(0, 0, width, CANVAS_HEIGHT);
            }
        };
    };
    BrightnessCellRenderer.prototype.createGroup = function () {
        return noRenderer;
    };
    BrightnessCellRenderer.prototype.createSummary = function () {
        return noRenderer;
    };
    return BrightnessCellRenderer;
}());
export default BrightnessCellRenderer;
//# sourceMappingURL=BrightnessCellRenderer.js.map