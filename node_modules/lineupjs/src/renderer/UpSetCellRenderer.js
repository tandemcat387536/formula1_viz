import { isSetColumn } from '../model/ICategoricalColumn';
import { CANVAS_HEIGHT, UPSET } from '../styles';
import { ERenderMode } from './interfaces';
import { renderMissingCanvas, renderMissingDOM } from './missing';
import { noRenderer } from './utils';
var UpSetCellRenderer = (function () {
    function UpSetCellRenderer() {
        this.title = 'Matrix';
    }
    UpSetCellRenderer.prototype.canRender = function (col, mode) {
        return isSetColumn(col) && mode !== ERenderMode.SUMMARY;
    };
    UpSetCellRenderer.calculateSetPath = function (setData, cellDimension) {
        var catindexes = [];
        setData.forEach(function (d, i) { return (d) ? catindexes.push(i) : -1; });
        var left = (catindexes[0] * cellDimension) + (cellDimension / 2);
        var right = (catindexes[catindexes.length - 1] * cellDimension) + (cellDimension / 2);
        return { left: left, right: right };
    };
    UpSetCellRenderer.createDOMContext = function (col) {
        var categories = col.categories;
        var templateRows = '';
        for (var _i = 0, categories_1 = categories; _i < categories_1.length; _i++) {
            var cat = categories_1[_i];
            templateRows += "<div title=\"" + cat.label + "\"></div>";
        }
        return {
            templateRow: templateRows,
            render: function (n, value) {
                Array.from(n.children).slice(1).forEach(function (d, i) {
                    var v = value[i];
                    d.classList.toggle('enabled', v);
                });
                var line = n.firstElementChild;
                var left = value.findIndex(function (d) { return d; });
                var right = (value.length - 1) - value.reverse().findIndex(function (d) { return d; });
                if (left < 0 || left === right) {
                    line.style.display = 'none';
                    return;
                }
                line.style.display = null;
                line.style.left = Math.round(100 * (left + 0.5) / value.length) + "%";
                line.style.width = Math.round(100 * (right - left) / value.length) + "%";
            }
        };
    };
    UpSetCellRenderer.prototype.create = function (col, context) {
        var _a = UpSetCellRenderer.createDOMContext(col), templateRow = _a.templateRow, render = _a.render;
        var width = context.colWidth(col);
        var cellDimension = width / col.dataLength;
        return {
            template: "<div><div></div>" + templateRow + "</div>",
            update: function (n, d) {
                if (renderMissingDOM(n, col, d)) {
                    return;
                }
                render(n, col.getValues(d));
            },
            render: function (ctx, d) {
                if (renderMissingCanvas(ctx, col, d, width)) {
                    return;
                }
                var data = col.getValues(d);
                var hasTrueValues = data.some(function (d) { return d; });
                ctx.save();
                ctx.fillStyle = UPSET.circle;
                ctx.strokeStyle = UPSET.stroke;
                if (hasTrueValues) {
                    var _a = UpSetCellRenderer.calculateSetPath(data, cellDimension), left = _a.left, right = _a.right;
                    ctx.beginPath();
                    ctx.moveTo(left, CANVAS_HEIGHT / 2);
                    ctx.lineTo(right, CANVAS_HEIGHT / 2);
                    ctx.stroke();
                }
                data.forEach(function (d, j) {
                    var posx = (j * cellDimension);
                    ctx.beginPath();
                    ctx.globalAlpha = d ? 1 : UPSET.inactive;
                    ctx.fillRect(posx, 0, cellDimension, CANVAS_HEIGHT);
                    ctx.fill();
                });
                ctx.restore();
            }
        };
    };
    UpSetCellRenderer.prototype.createGroup = function (col) {
        var _a = UpSetCellRenderer.createDOMContext(col), templateRow = _a.templateRow, render = _a.render;
        return {
            template: "<div><div></div>" + templateRow + "</div>",
            update: function (n, _group, rows) {
                var value = union(col, rows);
                render(n, value);
            }
        };
    };
    UpSetCellRenderer.prototype.createSummary = function () {
        return noRenderer;
    };
    return UpSetCellRenderer;
}());
export default UpSetCellRenderer;
export function union(col, rows) {
    var values = new Set();
    rows.forEach(function (d) {
        col.getSet(d).forEach(function (c) { return values.add(c); });
    });
    return col.categories.map(function (cat) { return values.has(cat); });
}
//# sourceMappingURL=UpSetCellRenderer.js.map