import GroupColumn from '../model/GroupColumn';
import { noop, noRenderer } from './utils';
var GroupCellRenderer = (function () {
    function GroupCellRenderer() {
        this.title = 'Default';
    }
    GroupCellRenderer.prototype.canRender = function (col) {
        return col instanceof GroupColumn;
    };
    GroupCellRenderer.prototype.create = function () {
        return {
            template: "<div><div></div></div>",
            update: function (node, _row, i, group) {
                var p = node.firstElementChild;
                if (i !== 0) {
                    p.innerText = '';
                }
                else if (Array.isArray(group.order)) {
                    p.innerText = group.name + " (" + group.order.length + ")";
                }
                else {
                    p.innerText = group.name;
                }
            },
            render: noop
        };
    };
    GroupCellRenderer.prototype.createGroup = function () {
        return {
            template: "<div><div></div></div>",
            update: function (node, group, rows) {
                node.firstElementChild.innerText = group.name + " (" + rows.length + ")";
            }
        };
    };
    GroupCellRenderer.prototype.createSummary = function () {
        return noRenderer;
    };
    return GroupCellRenderer;
}());
export default GroupCellRenderer;
//# sourceMappingURL=GroupCellRenderer.js.map