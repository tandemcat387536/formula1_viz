import ActionRenderer from './ActionRenderer';
import AggregateGroupRenderer from './AggregateGroupRenderer';
import AnnotationRenderer from './AnnotationRenderer';
import BarCellRenderer from './BarCellRenderer';
import BooleanCellRenderer from './BooleanCellRenderer';
import BoxplotCellRenderer from './BoxplotCellRenderer';
import BrightnessCellRenderer from './BrightnessCellRenderer';
import CategoricalCellRenderer from './CategoricalCellRenderer';
import CategoricalHeatmapCellRenderer from './CategoricalHeatmapCellRenderer';
import CategoricalStackedDistributionlCellRenderer from './CategoricalStackedDistributionlCellRenderer';
import CircleCellRenderer from './CircleCellRenderer';
import { DefaultCellRenderer } from './DefaultCellRenderer';
import DotCellRenderer from './DotCellRenderer';
import GroupCellRenderer from './GroupCellRenderer';
import HeatmapCellRenderer from './HeatmapCellRenderer';
import HistogramCellRenderer from './HistogramCellRenderer';
import ImageCellRenderer from './ImageCellRenderer';
import { ERenderMode } from './interfaces';
import InterleavingCellRenderer from './InterleavingCellRenderer';
import LinkCellRenderer from './LinkCellRenderer';
import LinkMapCellRenderer from './LinkMapCellRenderer';
import LoadingCellRenderer from './LoadingCellRenderer';
import MapBarCellRenderer from './MapBarCellRenderer';
import MultiLevelCellRenderer from './MultiLevelCellRenderer';
import RankCellRenderer from './RankCellRenderer';
import SelectionRenderer from './SelectionRenderer';
import SparklineCellRenderer from './SparklineCellRenderer';
import StringCellRenderer from './StringCellRenderer';
import TableCellRenderer from './TableCellRenderer';
import UpSetCellRenderer from './UpSetCellRenderer';
import VerticalBarCellRenderer from './VerticalBarCellRenderer';
import DateCellRenderer from './DateCellRenderer';
export { ActionRenderer, AggregateGroupRenderer, AnnotationRenderer, BarCellRenderer, BooleanCellRenderer, BoxplotCellRenderer, BrightnessCellRenderer, CategoricalCellRenderer, CategoricalHeatmapCellRenderer, CategoricalStackedDistributionlCellRenderer, CircleCellRenderer, DefaultCellRenderer, DotCellRenderer, GroupCellRenderer, HeatmapCellRenderer, HistogramCellRenderer, ImageCellRenderer, InterleavingCellRenderer, LinkCellRenderer, LinkMapCellRenderer, LoadingCellRenderer, MapBarCellRenderer, MultiLevelCellRenderer, RankCellRenderer, SelectionRenderer, SparklineCellRenderer, StringCellRenderer, TableCellRenderer, UpSetCellRenderer, VerticalBarCellRenderer, DateCellRenderer };
export { ERenderMode } from './interfaces';
export { colorOf } from './impose';
export { renderMissingDOM, renderMissingCanvas } from './missing';
var defaultCellRenderer = new DefaultCellRenderer();
export var renderers = {
    actions: new ActionRenderer(),
    aggregate: new AggregateGroupRenderer(),
    annotate: new AnnotationRenderer(),
    boolean: new BooleanCellRenderer(),
    boxplot: new BoxplotCellRenderer(),
    brightness: new BrightnessCellRenderer(),
    catdistributionbar: new CategoricalStackedDistributionlCellRenderer(),
    categorical: new CategoricalCellRenderer(),
    circle: new CircleCellRenderer(),
    date: new DateCellRenderer(),
    default: defaultCellRenderer,
    dot: new DotCellRenderer(),
    group: new GroupCellRenderer(),
    heatmap: new HeatmapCellRenderer(),
    catheatmap: new CategoricalHeatmapCellRenderer(),
    histogram: new HistogramCellRenderer(),
    image: new ImageCellRenderer(),
    interleaving: new InterleavingCellRenderer(),
    link: new LinkCellRenderer(),
    linkMap: new LinkMapCellRenderer(),
    loading: new LoadingCellRenderer(),
    nested: new MultiLevelCellRenderer(false),
    number: new BarCellRenderer(),
    mapbars: new MapBarCellRenderer(),
    rank: new RankCellRenderer(),
    selection: new SelectionRenderer(),
    sparkline: new SparklineCellRenderer(),
    stack: new MultiLevelCellRenderer(),
    string: new StringCellRenderer(),
    table: new TableCellRenderer(),
    upset: new UpSetCellRenderer(),
    verticalbar: new VerticalBarCellRenderer()
};
export function chooseRenderer(col, renderers) {
    var r = renderers[col.getRenderer()];
    return r || defaultCellRenderer;
}
export function chooseGroupRenderer(col, renderers) {
    var r = renderers[col.getGroupRenderer()];
    return r || defaultCellRenderer;
}
export function chooseSummaryRenderer(col, renderers) {
    var r = renderers[col.getSummaryRenderer()];
    return r || defaultCellRenderer;
}
export function possibleRenderer(col, renderers, mode) {
    if (mode === void 0) { mode = ERenderMode.CELL; }
    var valid = Object.keys(renderers).filter(function (type) {
        var factory = renderers[type];
        return factory.canRender(col, mode);
    });
    return valid.map(function (type) {
        var r = renderers[type];
        return {
            type: type,
            label: mode === ERenderMode.CELL ? r.title : (mode === ERenderMode.GROUP ? r.groupTitle || r.title : r.summaryTitle || r.groupTitle || r.title)
        };
    });
}
export function possibleGroupRenderer(col, renderers) {
    return possibleRenderer(col, renderers, ERenderMode.GROUP);
}
export function possibleSummaryRenderer(col, renderers) {
    return possibleRenderer(col, renderers, ERenderMode.SUMMARY);
}
//# sourceMappingURL=index.js.map