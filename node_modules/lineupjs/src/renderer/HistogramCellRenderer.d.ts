import { INumberBin, IStatistics } from '../internal/math';
import Column from '../model/Column';
import { INumberColumn, INumbersColumn } from '../model/INumberColumn';
import { default as IRenderContext, ERenderMode, ICellRendererFactory, IImposer, ICellRenderer, IGroupCellRenderer, ISummaryRenderer } from './interfaces';
export default class HistogramCellRenderer implements ICellRendererFactory {
    readonly title: string;
    canRender(col: Column, mode: ERenderMode): boolean;
    create(col: INumbersColumn, context: IRenderContext, hist: IStatistics | null, imposer?: IImposer): ICellRenderer;
    createGroup(col: INumberColumn, context: IRenderContext, hist: IStatistics | null, imposer?: IImposer): IGroupCellRenderer;
    createSummary(col: INumberColumn, context: IRenderContext, interactive: boolean, imposer?: IImposer): ISummaryRenderer;
}
export declare function getHistDOMRenderer(totalNumberOfRows: number, col: INumberColumn, imposer?: IImposer): {
    template: string;
    render: (n: HTMLElement, stats: {
        bins: number;
        max: number;
        hist: INumberBin[];
    }) => void;
    guessedBins: number;
};
