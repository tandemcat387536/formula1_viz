import SelectionColumn from '../model/SelectionColumn';
import { noop } from './utils';
var SelectionRenderer = (function () {
    function SelectionRenderer() {
        this.title = 'Default';
    }
    SelectionRenderer.prototype.canRender = function (col) {
        return col instanceof SelectionColumn;
    };
    SelectionRenderer.prototype.create = function (col, ctx) {
        return {
            template: "<div></div>",
            update: function (n, d, i) {
                n.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    if (event.shiftKey) {
                        var ranking = col.findMyRanker().id;
                        if (rangeSelection(ctx.provider, ranking, d.i, i, event.ctrlKey)) {
                            return;
                        }
                    }
                    col.toggleValue(d);
                };
            },
            render: noop
        };
    };
    SelectionRenderer.prototype.createGroup = function (col) {
        return {
            template: "<div></div>",
            update: function (n, _group, rows) {
                var selected = rows.reduce(function (act, r) { return col.getValue(r) ? act + 1 : act; }, 0);
                var all = selected >= rows.length / 2;
                if (all) {
                    n.classList.add('lu-group-selected');
                }
                else {
                    n.classList.remove('lu-group-selected');
                }
                n.onclick = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    var value = n.classList.toggle('lu-group-selected');
                    col.setValues(rows, value);
                };
            }
        };
    };
    SelectionRenderer.prototype.createSummary = function (col, context) {
        return {
            template: "<div title=\"(Un)Select All\" data-icon=\"unchecked\"></div>",
            update: function (node) {
                node.onclick = function (evt) {
                    evt.stopPropagation();
                    var icon = node.dataset.icon;
                    if (icon === 'unchecked') {
                        context.provider.selectAllOf(col.findMyRanker());
                        node.dataset.icon = 'checked';
                    }
                    else {
                        context.provider.setSelection([]);
                        node.dataset.icon = 'unchecked';
                    }
                };
            }
        };
    };
    return SelectionRenderer;
}());
export default SelectionRenderer;
export function rangeSelection(provider, rankingId, dataIndex, relIndex, ctrlKey) {
    var ranking = provider.getRankings().find(function (d) { return d.id === rankingId; });
    if (!ranking) {
        return false;
    }
    var selection = provider.getSelection();
    if (selection.length === 0 || selection.includes(dataIndex)) {
        return false;
    }
    var order = ranking.getOrder();
    var lookup = new Map(ranking.getOrder().map(function (d, i) { return [d, i]; }));
    var distances = selection.map(function (d) {
        var index = (lookup.has(d) ? lookup.get(d) : Infinity);
        return { s: d, index: index, distance: Math.abs(relIndex - index) };
    });
    var nearest = distances.sort(function (a, b) { return a.distance - b.distance; })[0];
    if (!isFinite(nearest.distance)) {
        return false;
    }
    if (!ctrlKey) {
        selection.splice(0, selection.length);
        selection.push(nearest.s);
    }
    if (nearest.index < relIndex) {
        for (var i = nearest.index + 1; i <= relIndex; ++i) {
            selection.push(order[i]);
        }
    }
    else {
        for (var i = relIndex; i <= nearest.index; ++i) {
            selection.push(order[i]);
        }
    }
    provider.setSelection(selection);
    return true;
}
//# sourceMappingURL=SelectionRenderer.js.map