import Column from '../model/Column';
import ActionRenderer from './ActionRenderer';
import AggregateGroupRenderer from './AggregateGroupRenderer';
import AnnotationRenderer from './AnnotationRenderer';
import BarCellRenderer from './BarCellRenderer';
import BooleanCellRenderer from './BooleanCellRenderer';
import BoxplotCellRenderer from './BoxplotCellRenderer';
import BrightnessCellRenderer from './BrightnessCellRenderer';
import CategoricalCellRenderer from './CategoricalCellRenderer';
import CategoricalHeatmapCellRenderer from './CategoricalHeatmapCellRenderer';
import CategoricalStackedDistributionlCellRenderer from './CategoricalStackedDistributionlCellRenderer';
import CircleCellRenderer from './CircleCellRenderer';
import { DefaultCellRenderer } from './DefaultCellRenderer';
import DotCellRenderer from './DotCellRenderer';
import GroupCellRenderer from './GroupCellRenderer';
import HeatmapCellRenderer from './HeatmapCellRenderer';
import HistogramCellRenderer from './HistogramCellRenderer';
import ImageCellRenderer from './ImageCellRenderer';
import { ERenderMode, ICellRendererFactory } from './interfaces';
import InterleavingCellRenderer from './InterleavingCellRenderer';
import LinkCellRenderer from './LinkCellRenderer';
import LinkMapCellRenderer from './LinkMapCellRenderer';
import LoadingCellRenderer from './LoadingCellRenderer';
import MapBarCellRenderer from './MapBarCellRenderer';
import MultiLevelCellRenderer from './MultiLevelCellRenderer';
import RankCellRenderer from './RankCellRenderer';
import SelectionRenderer from './SelectionRenderer';
import SparklineCellRenderer from './SparklineCellRenderer';
import StringCellRenderer from './StringCellRenderer';
import TableCellRenderer from './TableCellRenderer';
import UpSetCellRenderer from './UpSetCellRenderer';
import VerticalBarCellRenderer from './VerticalBarCellRenderer';
import DateCellRenderer from './DateCellRenderer';
export { ActionRenderer, AggregateGroupRenderer, AnnotationRenderer, BarCellRenderer, BooleanCellRenderer, BoxplotCellRenderer, BrightnessCellRenderer, CategoricalCellRenderer, CategoricalHeatmapCellRenderer, CategoricalStackedDistributionlCellRenderer, CircleCellRenderer, DefaultCellRenderer, DotCellRenderer, GroupCellRenderer, HeatmapCellRenderer, HistogramCellRenderer, ImageCellRenderer, InterleavingCellRenderer, LinkCellRenderer, LinkMapCellRenderer, LoadingCellRenderer, MapBarCellRenderer, MultiLevelCellRenderer, RankCellRenderer, SelectionRenderer, SparklineCellRenderer, StringCellRenderer, TableCellRenderer, UpSetCellRenderer, VerticalBarCellRenderer, DateCellRenderer };
export { default as IRenderContext, IImposer, ERenderMode, ISummaryRenderer, IGroupCellRenderer, ICellRenderer, ICellRendererFactory } from './interfaces';
export { colorOf } from './impose';
export { renderMissingDOM, renderMissingCanvas } from './missing';
export declare const renderers: {
    [key: string]: ICellRendererFactory;
};
export declare function chooseRenderer(col: Column, renderers: {
    [key: string]: ICellRendererFactory;
}): ICellRendererFactory;
export declare function chooseGroupRenderer(col: Column, renderers: {
    [key: string]: ICellRendererFactory;
}): ICellRendererFactory;
export declare function chooseSummaryRenderer(col: Column, renderers: {
    [key: string]: ICellRendererFactory;
}): ICellRendererFactory;
export declare function possibleRenderer(col: Column, renderers: {
    [key: string]: ICellRendererFactory;
}, mode?: ERenderMode): {
    type: string;
    label: string;
}[];
export declare function possibleGroupRenderer(col: Column, renderers: {
    [key: string]: ICellRendererFactory;
}): {
    type: string;
    label: string;
}[];
export declare function possibleSummaryRenderer(col: Column, renderers: {
    [key: string]: ICellRendererFactory;
}): {
    type: string;
    label: string;
}[];
