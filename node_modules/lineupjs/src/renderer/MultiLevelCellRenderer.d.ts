import { ICategoricalStatistics, IStatistics } from '../internal';
import { IDataRow, IMultiLevelColumn } from '../model';
import Column from '../model/Column';
import { AAggregatedGroupRenderer } from './AAggregatedGroupRenderer';
import { default as IRenderContext, ERenderMode, ICellRendererFactory, IImposer, ICellRenderer, IGroupCellRenderer, ISummaryRenderer } from './interfaces';
export interface ICols {
    column: Column;
    shift: number;
    width: number;
    template: string;
    rendererId: string;
    renderer: ICellRenderer | null;
    groupRenderer: IGroupCellRenderer | null;
    summaryRenderer: ISummaryRenderer | null;
}
export declare function createFlatColumnData(col: {
    children: Column[];
} & Column, context: IRenderContext, stacked: boolean, mode: ERenderMode, imposer?: IImposer): {
    cols: ICols[];
    stacked: boolean;
    padding: number;
};
export default class MultiLevelCellRenderer extends AAggregatedGroupRenderer<IMultiLevelColumn & Column> implements ICellRendererFactory {
    private readonly stacked;
    readonly title: string;
    constructor(stacked?: boolean);
    canRender(col: Column, mode: ERenderMode): boolean;
    create(col: IMultiLevelColumn & Column, context: IRenderContext, _hist: IStatistics | ICategoricalStatistics | null, imposer?: IImposer): ICellRenderer;
    createGroup(col: IMultiLevelColumn & Column, context: IRenderContext, hist: IStatistics | ICategoricalStatistics | null, imposer?: IImposer): IGroupCellRenderer;
    protected aggregatedIndex(rows: IDataRow[], col: IMultiLevelColumn & Column): number;
}
