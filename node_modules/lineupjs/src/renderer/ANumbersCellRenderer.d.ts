import { IDataRow } from '../model';
import { INumbersColumn } from '../model/INumberColumn';
import { default as IRenderContext, IImposer, ICellRenderer, IGroupCellRenderer } from './interfaces';
export declare abstract class ANumbersCellRenderer {
    abstract readonly title: string;
    protected abstract createContext(col: INumbersColumn, context: IRenderContext, imposer?: IImposer): {
        templateRow: string;
        update: (row: HTMLElement, data: number[], raw: number[], d: IDataRow) => void;
        render: (ctx: CanvasRenderingContext2D, data: number[], d: IDataRow) => void;
    };
    static choose(col: INumbersColumn, rows: IDataRow[]): {
        normalized: number[];
        raw: number[];
    };
    create(col: INumbersColumn, context: IRenderContext, _hist: any, imposer?: IImposer): ICellRenderer;
    createGroup(col: INumbersColumn, context: IRenderContext, _hist: any, imposer?: IImposer): IGroupCellRenderer;
}
export declare function matchRows(n: HTMLElement | SVGElement, rows: IDataRow[], template: string): void;
