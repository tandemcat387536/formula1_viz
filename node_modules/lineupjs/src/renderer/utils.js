import { MIN_LABEL_WIDTH } from '../config';
import { hsl } from 'd3-color';
export function attr(node, attrs, styles, text) {
    if (attrs === void 0) { attrs = {}; }
    if (styles === void 0) { styles = {}; }
    Object.keys(attrs).forEach(function (attr) {
        var v = String(attrs[attr]);
        if (node.getAttribute(attr) !== v) {
            node.setAttribute(attr, v);
        }
    });
    Object.keys(styles).forEach(function (attr) {
        var v = styles[attr];
        if (node.style.getPropertyValue(attr) !== v) {
            node.style.setProperty(attr, v);
        }
    });
    return setText(node, text);
}
export function noop() {
}
export var noRenderer = {
    template: "<div></div>",
    update: noop,
    render: noop
};
export function setText(node, text) {
    if (text === undefined) {
        return node;
    }
    if (node.textContent !== text) {
        node.textContent = text;
    }
    return node;
}
export function forEach(node, selector, callback) {
    Array.from(node.querySelectorAll(selector)).forEach(callback);
}
export function forEachChild(node, callback) {
    Array.from(node.children).forEach(callback);
}
export function matchColumns(node, columns) {
    if (node.childElementCount === 0) {
        node.innerHTML = columns.map(function (c) { return c.template; }).join('');
        var children_1 = Array.from(node.children);
        columns.forEach(function (col, i) {
            var cnode = children_1[i];
            cnode.dataset.columnId = col.column.id;
            cnode.dataset.renderer = col.rendererId;
        });
        return;
    }
    function matches(c, i) {
        var n = node.children[i];
        return n != null && n.dataset.columnId === c.column.id && n.dataset.renderer === c.rendererId;
    }
    if (columns.every(matches)) {
        return;
    }
    var idsAndRenderer = new Set(columns.map(function (c) { return c.column.id + "@" + c.rendererId; }));
    forEachChild(node, function (n) {
        var id = n.dataset.columnId;
        var renderer = n.dataset.renderer;
        var idAndRenderer = id + "@" + renderer;
        if (!idsAndRenderer.has(idAndRenderer)) {
            node.removeChild(n);
        }
    });
    columns.forEach(function (col) {
        var cnode = node.querySelector("[data-column-id=\"" + col.column.id + "\"]");
        if (!cnode) {
            node.insertAdjacentHTML('beforeend', col.template);
            cnode = node.lastElementChild;
            cnode.dataset.columnId = col.column.id;
            cnode.dataset.renderer = col.rendererId;
        }
        node.appendChild(cnode);
    });
}
export function wideEnough(col, length) {
    if (length === void 0) { length = col.labels.length; }
    var w = col.getWidth();
    return w / length > MIN_LABEL_WIDTH;
}
export function adaptTextColorToBgColor(bgColor) {
    return hsl(bgColor).l > 0.5 ? 'black' : 'white';
}
export function adaptDynamicColorToBgColor(node, bgColor, title, width) {
    var adapt = adaptTextColorToBgColor(bgColor);
    if ((width <= 0.05 || adapt === 'black') || width > 0.9) {
        node.style.color = adapt === 'black' || width <= 0.05 ? null : adapt;
        return;
    }
    node.style.color = null;
    node.innerText = title;
    console.assert(node.ownerDocument != null);
    var span = node.ownerDocument.createElement('span');
    span.classList.add('lu-gradient-text');
    span.style.color = adapt;
    span.innerText = title;
    node.appendChild(span);
}
export var uniqueId = (function () {
    var idCounter = 0;
    return function (prefix) { return "" + prefix + (idCounter++).toString(36); };
})();
var NUM_EXAMPLE_VALUES = 5;
export function exampleText(col, rows) {
    var examples = [];
    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        if (col.isMissing(row)) {
            continue;
        }
        var v = col.getLabel(row);
        examples.push(v);
        if (examples.length >= NUM_EXAMPLE_VALUES) {
            break;
        }
    }
    return "" + examples.join(', ') + (examples.length < rows.length ? ', ...' : '');
}
//# sourceMappingURL=utils.js.map