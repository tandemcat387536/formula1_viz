export interface IEventContext {
    readonly source: AEventDispatcher;
    readonly origin: AEventDispatcher;
    readonly type: string;
    readonly primaryType: string;
    readonly args: any[];
}
export interface IEventListener {
    (this: IEventContext, ...args: any[]): any;
}
export interface IEventHandler {
    on(type: string | string[], listener: IEventListener | null): this;
}
export default class AEventDispatcher implements IEventHandler {
    private readonly listeners;
    private readonly listenerEvents;
    private readonly forwarder;
    constructor();
    on(type: string | string[], listener: IEventListener | null): this;
    protected listenersChanged(_type: string, _active: boolean): void;
    protected createEventList(): string[];
    protected fire(type: string | string[], ...args: any[]): void;
    private fireImpl;
    protected forward(from: IEventHandler, ...types: string[]): void;
    protected unforward(from: IEventHandler, ...types: string[]): void;
}
