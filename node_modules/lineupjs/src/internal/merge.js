var TYPE_OBJECT = '[object Object]';
export default function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var result = null;
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var toMerge = args_1[_a];
        var keys = Object.keys(toMerge);
        if (result == null) {
            result = toMerge;
            continue;
        }
        for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
            var keyName = keys_1[_b];
            var value = toMerge[keyName];
            if (Object.prototype.toString.call(value) === TYPE_OBJECT && (Object.getPrototypeOf(value) === Object.prototype)) {
                if (result[keyName] === undefined) {
                    result[keyName] = {};
                }
                result[keyName] = merge(result[keyName], value);
            }
            else if (Array.isArray(value)) {
                if (result[keyName] === undefined) {
                    result[keyName] = [];
                }
                result[keyName] = value.concat(result[keyName]);
            }
            else {
                result[keyName] = value;
            }
        }
    }
    return result;
}
//# sourceMappingURL=merge.js.map