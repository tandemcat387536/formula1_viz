import { IColumnDesc } from '../model';
import Column from '../model/Column';
import ADataProvider from '../provider/ADataProvider';
import LocalDataProvider from '../provider/LocalDataProvider';
import LineUp from '../ui/LineUp';
import Taggle from '../ui/taggle/Taggle';
import ColumnBuilder from './column/ColumnBuilder';
import LineUpBuilder from './LineUpBuilder';
import RankingBuilder from './RankingBuilder';
export default class DataBuilder extends LineUpBuilder {
    private readonly data;
    private readonly columns;
    private readonly providerOptions;
    private readonly rankBuilders;
    private _deriveColors;
    constructor(data: object[]);
    singleSelection(): this;
    filterGlobally(): this;
    noCriteriaLimits(): this;
    limitCriteria(sortingCritera: number, groupingCriteria: number): this;
    deriveColumns(...columns: string[]): this;
    deriveColors(): this;
    registerColumnType(type: string, clazz: typeof Column): this;
    column(column: IColumnDesc | ColumnBuilder): this;
    restore(dump: any): this;
    defaultRanking(addSupportTypes?: boolean): this;
    ranking(builder: ((data: ADataProvider) => void) | RankingBuilder): this;
    buildData(): LocalDataProvider;
    build(node: HTMLElement): LineUp;
    buildTaggle(node: HTMLElement): Taggle;
}
export declare function builder(arr: object[]): DataBuilder;
