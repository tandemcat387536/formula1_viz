import { __extends } from "tslib";
import { deriveColors, deriveColumnDescriptions } from '../provider';
import LocalDataProvider from '../provider/LocalDataProvider';
import LineUp from '../ui/LineUp';
import Taggle from '../ui/taggle/Taggle';
import ColumnBuilder from './column/ColumnBuilder';
import LineUpBuilder from './LineUpBuilder';
import RankingBuilder from './RankingBuilder';
var DataBuilder = (function (_super) {
    __extends(DataBuilder, _super);
    function DataBuilder(data) {
        var _this = _super.call(this) || this;
        _this.data = data;
        _this.columns = [];
        _this.providerOptions = {
            columnTypes: {}
        };
        _this.rankBuilders = [];
        _this._deriveColors = false;
        return _this;
    }
    DataBuilder.prototype.singleSelection = function () {
        this.providerOptions.multiSelection = false;
        return this;
    };
    DataBuilder.prototype.filterGlobally = function () {
        this.providerOptions.filterGlobally = true;
        return this;
    };
    DataBuilder.prototype.noCriteriaLimits = function () {
        this.providerOptions.maxGroupColumns = Infinity;
        this.providerOptions.maxNestedSortingCriteria = Infinity;
        return this;
    };
    DataBuilder.prototype.limitCriteria = function (sortingCritera, groupingCriteria) {
        this.providerOptions.maxGroupColumns = sortingCritera;
        this.providerOptions.maxNestedSortingCriteria = groupingCriteria;
        return this;
    };
    DataBuilder.prototype.deriveColumns = function () {
        var _a;
        var columns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            columns[_i] = arguments[_i];
        }
        (_a = this.columns).push.apply(_a, deriveColumnDescriptions(this.data, { columns: columns }));
        return this;
    };
    DataBuilder.prototype.deriveColors = function () {
        this._deriveColors = true;
        return this;
    };
    DataBuilder.prototype.registerColumnType = function (type, clazz) {
        this.providerOptions.columnTypes[type] = clazz;
        return this;
    };
    DataBuilder.prototype.column = function (column) {
        this.columns.push(column instanceof ColumnBuilder ? column.build.bind(column) : column);
        return this;
    };
    DataBuilder.prototype.restore = function (dump) {
        this.rankBuilders.push(function (data) { return data.restore(dump); });
        return this;
    };
    DataBuilder.prototype.defaultRanking = function (addSupportTypes) {
        if (addSupportTypes === void 0) { addSupportTypes = true; }
        this.rankBuilders.push(function (data) { return data.deriveDefault(addSupportTypes); });
        return this;
    };
    DataBuilder.prototype.ranking = function (builder) {
        this.rankBuilders.push(builder instanceof RankingBuilder ? builder.build.bind(builder) : builder);
        return this;
    };
    DataBuilder.prototype.buildData = function () {
        var _this = this;
        var columns = this.columns.map(function (d) { return typeof d === 'function' ? d(_this.data) : d; });
        if (this._deriveColors) {
            deriveColors(columns);
        }
        var r = new LocalDataProvider(this.data, columns, this.providerOptions);
        if (this.rankBuilders.length === 0) {
            this.defaultRanking();
        }
        this.rankBuilders.forEach(function (builder) { return builder(r); });
        return r;
    };
    DataBuilder.prototype.build = function (node) {
        return new LineUp(node, this.buildData(), this.options);
    };
    DataBuilder.prototype.buildTaggle = function (node) {
        return new Taggle(node, this.buildData(), this.options);
    };
    return DataBuilder;
}(LineUpBuilder));
export default DataBuilder;
export function builder(arr) {
    return new DataBuilder(arr);
}
//# sourceMappingURL=DataBuilder.js.map