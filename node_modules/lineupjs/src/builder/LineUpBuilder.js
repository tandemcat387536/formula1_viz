var LineUpBuilder = (function () {
    function LineUpBuilder() {
        this.options = {
            renderers: {},
            toolbar: {},
            flags: {}
        };
    }
    LineUpBuilder.prototype.animated = function (enable) {
        this.options.animated = enable;
        return this;
    };
    LineUpBuilder.prototype.labelRotation = function (rotation) {
        this.options.labelRotation = rotation;
        return this;
    };
    LineUpBuilder.prototype.sidePanel = function (enable, collapsed) {
        if (collapsed === void 0) { collapsed = false; }
        this.options.sidePanel = enable;
        this.options.sidePanelCollapsed = collapsed;
        return this;
    };
    LineUpBuilder.prototype.hierarchyIndicator = function (enable) {
        this.options.hierarchyIndicator = enable;
        return this;
    };
    LineUpBuilder.prototype.defaultSlopeGraphMode = function (mode) {
        this.options.defaultSlopeGraphMode = mode;
        return this;
    };
    LineUpBuilder.prototype.summaryHeader = function (enable) {
        this.options.summaryHeader = enable;
        return this;
    };
    LineUpBuilder.prototype.expandLineOnHover = function (enable) {
        this.options.expandLineOnHover = enable;
        return this;
    };
    LineUpBuilder.prototype.overviewMode = function () {
        this.options.overviewMode = true;
        return this;
    };
    LineUpBuilder.prototype.ignoreUnsupportedBrowser = function () {
        this.options.ignoreUnsupportedBrowser = true;
        return this;
    };
    LineUpBuilder.prototype.registerRenderer = function (id, factory) {
        this.options.renderers[id] = factory;
        return this;
    };
    LineUpBuilder.prototype.registerToolbarAction = function (id, action) {
        this.options.toolbar[id] = action;
        return this;
    };
    LineUpBuilder.prototype.registerToolbarDialogAddon = function (id, addon) {
        this.options.toolbar[id] = addon;
        return this;
    };
    LineUpBuilder.prototype.rowHeight = function (rowHeight, rowPadding) {
        this.options.rowHeight = rowHeight;
        this.options.rowPadding = rowPadding;
        return this;
    };
    LineUpBuilder.prototype.groupRowHeight = function (groupHeight, groupPadding) {
        this.options.groupHeight = groupHeight;
        this.options.groupPadding = groupPadding;
        return this;
    };
    LineUpBuilder.prototype.dynamicHeight = function (callback) {
        this.options.dynamicHeight = callback;
        return this;
    };
    LineUpBuilder.prototype.disableAdvancedRankingFeatures = function () {
        this.options.flags.advancedRankingFeatures = false;
        return this;
    };
    LineUpBuilder.prototype.disableAdvancedModelFeatures = function () {
        this.options.flags.advancedModelFeatures = false;
        return this;
    };
    LineUpBuilder.prototype.disableAdvancedUIFeatures = function () {
        this.options.flags.advancedUIFeatures = false;
        return this;
    };
    return LineUpBuilder;
}());
export default LineUpBuilder;
//# sourceMappingURL=LineUpBuilder.js.map