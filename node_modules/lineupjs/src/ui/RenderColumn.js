import { createHeader, updateHeader } from './header';
var RenderColumn = (function () {
    function RenderColumn(c, index, ctx, flags) {
        this.c = c;
        this.index = index;
        this.ctx = ctx;
        this.flags = flags;
        this.renderers = null;
    }
    Object.defineProperty(RenderColumn.prototype, "width", {
        get: function () {
            return this.c.getWidth();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderColumn.prototype, "id", {
        get: function () {
            return this.c.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderColumn.prototype, "frozen", {
        get: function () {
            return this.flags.disableFrozenColumns ? false : this.c.frozen;
        },
        enumerable: true,
        configurable: true
    });
    RenderColumn.prototype.singleRenderer = function () {
        if (!this.renderers || !this.renderers.single) {
            return null;
        }
        if (this.renderers.singleTemplate) {
            return this.renderers.singleTemplate.cloneNode(true);
        }
        var elem = asElement(this.ctx.document, this.renderers.single.template);
        elem.dataset.renderer = this.renderers.singleId;
        elem.dataset.group = 'd';
        this.renderers.singleTemplate = elem.cloneNode(true);
        return elem;
    };
    RenderColumn.prototype.groupRenderer = function () {
        if (!this.renderers || !this.renderers.group) {
            return null;
        }
        if (this.renderers.groupTemplate) {
            return this.renderers.groupTemplate.cloneNode(true);
        }
        var elem = asElement(this.ctx.document, this.renderers.group.template);
        elem.dataset.renderer = this.renderers.groupId;
        elem.dataset.group = 'g';
        this.renderers.groupTemplate = elem.cloneNode(true);
        return elem;
    };
    RenderColumn.prototype.summaryRenderer = function () {
        if (!this.renderers || !this.renderers.summary) {
            return null;
        }
        if (this.renderers.summaryTemplate) {
            return this.renderers.summaryTemplate.cloneNode(true);
        }
        var elem = asElement(this.ctx.document, this.renderers.summary.template);
        elem.dataset.renderer = this.renderers.summaryId;
        elem.classList.add('lu-summary');
        this.renderers.summaryTemplate = elem.cloneNode(true);
        return elem;
    };
    RenderColumn.prototype.createHeader = function () {
        var node = createHeader(this.c, this.ctx, {
            dragAble: this.flags.advancedUIFeatures,
            mergeDropAble: this.flags.advancedModelFeatures,
            rearrangeAble: this.flags.advancedUIFeatures,
            resizeable: this.flags.advancedUIFeatures
        });
        node.className = "lu-header";
        node.classList.toggle('frozen', this.frozen);
        if (this.renderers && this.renderers.summary) {
            var summary = this.summaryRenderer();
            node.appendChild(summary);
        }
        this.updateHeader(node);
        return node;
    };
    RenderColumn.prototype.updateHeader = function (node) {
        updateHeader(node, this.c);
        if (!this.renderers || !this.renderers.summary) {
            return;
        }
        var summary = node.querySelector('.lu-summary');
        var oldRenderer = summary.dataset.renderer;
        var currentRenderer = this.renderers.summaryId;
        if (oldRenderer !== currentRenderer) {
            summary.remove();
            summary = this.summaryRenderer();
            node.appendChild(summary);
        }
        this.renderers.summary.update(summary, this.ctx.statsOf(this.c));
    };
    RenderColumn.prototype.createCell = function (index) {
        var isGroup = this.ctx.isGroup(index);
        var node = isGroup ? this.groupRenderer() : this.singleRenderer();
        this.updateCell(node, index);
        return node;
    };
    RenderColumn.prototype.updateCell = function (node, index) {
        node.classList.toggle('frozen', this.frozen);
        var isGroup = this.ctx.isGroup(index);
        var oldRenderer = node.dataset.renderer;
        var currentRenderer = isGroup ? this.renderers.groupId : this.renderers.singleId;
        var oldGroup = node.dataset.group;
        var currentGroup = (isGroup ? 'g' : 'd');
        if (oldRenderer !== currentRenderer || oldGroup !== currentGroup) {
            node = isGroup ? this.groupRenderer() : this.singleRenderer();
        }
        if (isGroup) {
            var g = this.ctx.getGroup(index);
            this.renderers.group.update(node, g, g.rows);
        }
        else {
            var r = this.ctx.getRow(index);
            this.renderers.single.update(node, r, r.relativeIndex, r.group);
        }
        return node;
    };
    RenderColumn.prototype.renderCell = function (ctx, index) {
        var r = this.ctx.getRow(index);
        this.renderers.single.render(ctx, r, r.relativeIndex, r.group);
    };
    return RenderColumn;
}());
export default RenderColumn;
function asElement(doc, html) {
    var helper = doc.createElement('div');
    helper.innerHTML = html;
    var s = helper.firstElementChild;
    helper.innerHTML = '';
    return s;
}
//# sourceMappingURL=RenderColumn.js.map