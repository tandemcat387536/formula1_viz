import { __extends } from "tslib";
import ADialog from './ADialog';
import { schemeCategory10, schemeSet1, schemeSet2, schemeSet3, schemeAccent, schemeDark2, schemePastel2, schemePastel1 } from 'd3-scale-chromatic';
import { round, fixCSS } from '../../internal';
import { uniqueId } from '../../renderer/utils';
import { sequentialColors, divergentColors, createColorMappingFunction, lookupInterpolatingColor, QuantizedColorFunction, asColorFunction, CustomColorMappingFunction } from '../../model/ColorMappingFunction';
import Column from '../../model';
var ColorMappingDialog = (function (_super) {
    __extends(ColorMappingDialog, _super);
    function ColorMappingDialog(column, dialog) {
        var _this = _super.call(this, dialog) || this;
        _this.column = column;
        return _this;
    }
    ColorMappingDialog.prototype.build = function (node) {
        node.classList.add('lu-dialog-color');
        var id = uniqueId('col');
        var current = this.column.getColorMapping();
        var entries = current.type === 'custom' ? current.entries : [];
        var h = '';
        h += "<datalist id=\"" + id + "L\">" + schemeCategory10.map(function (d) { return "<option>" + d + "\"</option>"; }).join('') + "</datalist>";
        h += "<datalist id=\"" + id + "LW\"><option>#FFFFFF\"</option>" + schemeCategory10.slice(0, -1).map(function (d) { return "<option>" + d + "</option>"; }).join('') + "</datalist>";
        h += "<strong>Quantization</strong>\n    <div class=\"lu-checkbox\">\n      <input id=\"" + id + "KC\" name=\"kind\" type=\"radio\" value=\"continuous\" " + (current.type !== 'quantized' ? 'checked' : '') + ">\n      <label for=\"" + id + "CK\">Continuous</label>\n    </div>\n    <div class=\"lu-checkbox\">\n      <input id=\"" + id + "KQ\" name=\"kind\" type=\"radio\" value=\"quantized\" " + (current.type === 'quantized' ? 'checked' : '') + ">\n      <label for=\"" + id + "KQ\"><input type=\"number\" id=\"" + id + "KQS\" min=\"2\" step=\"1\" value=\"" + (current.type === 'quantized' ? current.steps : 5) + "\">&nbsp; steps</label>\n    </div>";
        h += "<strong data-toggle=\"" + (current.type === 'solid' ? 'open' : '') + "\">Solid Color</strong>";
        h += "<div>";
        {
            var refColor_1 = current.type === 'solid' ? current.color : '';
            var has = false;
            var colorsets = [schemeCategory10, schemeAccent, schemeDark2, schemePastel1, schemePastel2, schemeSet1, schemeSet2, schemeSet3];
            for (var _i = 0, colorsets_1 = colorsets; _i < colorsets_1.length; _i++) {
                var colors = colorsets_1[_i];
                has = has || colors.includes(refColor_1);
                h += "<div class=\"lu-color-line\">\n          " + colors.map(function (d) { return "<div class=\"lu-checkbox-color\">\n              <input id=\"" + id + fixCSS(d) + "\" name=\"color\" type=\"radio\" value=\"" + d + "\" " + (d === refColor_1 ? 'checked="checked"' : '') + ">\n              <label for=\"" + id + fixCSS(d) + "\" style=\"background: " + d + "\"></label>\n            </div>"; }).join('') + "\n        </div>";
            }
            h += "<div class=\"lu-checkbox\"><input id=\"" + id + "O\" name=\"color\" type=\"radio\" value=\"custom:solid\" " + (refColor_1 && !has ? 'checked="checked"' : '') + ">\n        <label for=\"" + id + "O\"><input type=\"color\" name=\"solid\" list=\"" + id + "L\" value=\"" + (current.type === 'solid' ? current.color : Column.DEFAULT_COLOR) + "\" " + (refColor_1 && !has ? '' : 'disabled') + "></label>\n      </div>";
        }
        h += '</div>';
        h += "<strong data-toggle=\"" + (current.type === 'sequential' || (current.type === 'custom' && entries.length === 2) ? 'open' : '') + "\">Sequential Color</strong>";
        h += '<div>';
        {
            var name_1 = current.type === 'sequential' ? current.name : '';
            for (var _a = 0, sequentialColors_1 = sequentialColors; _a < sequentialColors_1.length; _a++) {
                var colors = sequentialColors_1[_a];
                h += "<div class=\"lu-checkbox lu-color-gradient\"><input id=\"" + id + colors.name + "\" name=\"color\" type=\"radio\" value=\"" + colors.name + "\" " + (colors.name === name_1 ? 'checked="checked"' : '') + ">\n        <label for=\"" + id + colors.name + "\" data-c=\"" + colors.name + "\" style=\"background: " + gradient(colors.apply, 9) + "\"></label>\n      </div>";
            }
            var isCustom = entries.length === 2;
            h += "<div class=\"lu-checkbox lu-color-gradient\">\n        <input id=\"" + id + "S\" name=\"color\" type=\"radio\" value=\"custom:sequential\" " + (isCustom ? 'checked' : '') + ">\n        <label for=\"" + id + "S\" class=\"lu-color-custom\">\n          <input type=\"color\" name=\"interpolate0\" list=\"" + id + "LW\" " + (!isCustom ? 'disabled' : "value=\"" + entries[0].color + "\"") + ">\n          <input type=\"color\" name=\"interpolate1\" list=\"" + id + "LW\" " + (!isCustom ? 'disabled' : "value=\"" + entries[entries.length - 1].color + "\"") + ">\n        </label>\n      </div>";
        }
        h += '</div>';
        h += "<strong data-toggle=\"" + (current.type === 'divergent' || (current.type === 'custom' && entries.length === 3) ? 'open' : '') + "\">Diverging Color</strong>";
        h += '<div>';
        {
            var name_2 = current.type === 'sequential' ? current.name : '';
            for (var _b = 0, divergentColors_1 = divergentColors; _b < divergentColors_1.length; _b++) {
                var colors = divergentColors_1[_b];
                h += "<div class=\"lu-checkbox lu-color-gradient\"><input id=\"" + id + colors.name + "\" name=\"color\" type=\"radio\" value=\"" + colors.name + "\" " + (colors.name === name_2 ? 'checked="checked"' : '') + ">\n        <label for=\"" + id + colors.name + "\" data-c=\"" + colors.name + "\" style=\"background: " + gradient(colors.apply, 11) + "\"></label>\n      </div>";
            }
            var isCustom = entries.length === 3;
            h += "<div class=\"lu-checkbox lu-color-gradient\"><input id=\"" + id + "D\" name=\"color\" type=\"radio\" value=\"custom:divergent\" " + (isCustom ? 'checked' : '') + ">\n        <label for=\"" + id + "D\" class=\"lu-color-custom\">\n          <input type=\"color\" name=\"divergingm1\" list=\"" + id + "L\" " + (!isCustom ? 'disabled' : "value=\"" + entries[0].color + "\"") + ">\n          <input type=\"color\" name=\"diverging0\" list=\"" + id + "LW\" " + (!isCustom ? 'disabled' : "value=\"" + entries[1].color + "\"") + ">\n          <input type=\"color\" name=\"diverging1\" list=\"" + id + "L\" " + (!isCustom ? 'disabled' : "value=\"" + entries[2].color + "\"") + ">\n          </label>\n      </div>";
        }
        h += '</div>';
        node.insertAdjacentHTML('beforeend', h);
        this.interactive(node, id);
    };
    ColorMappingDialog.prototype.interactive = function (node, id) {
        var _this = this;
        var continuouos = this.findInput("#" + id + "KC");
        var quantized = this.findInput("#" + id + "KQ");
        var steps = this.findInput("#" + id + "KQS");
        var toggles = Array.from(node.querySelectorAll('strong[data-toggle]'));
        continuouos.onchange = function () {
            if (continuouos.checked) {
                _this.updateGradients(-1);
            }
        };
        quantized.onchange = steps.onchange = function () {
            if (!quantized.checked) {
                _this.updateGradients(-1);
                return;
            }
            if (toggles[0].dataset.toggle === 'open') {
                toggles[0].dataset.toggle = '';
                toggles[1].dataset.toggle = 'open';
            }
            _this.updateGradients(parseInt(steps.value, 10));
        };
        var _loop_1 = function (toggle) {
            toggle.onclick = function (evt) {
                evt.preventDefault();
                evt.stopPropagation();
                for (var _i = 0, toggles_2 = toggles; _i < toggles_2.length; _i++) {
                    var t2 = toggles_2[_i];
                    t2.dataset.toggle = t2.dataset.toggle === 'open' || toggle !== t2 ? '' : 'open';
                }
            };
        };
        for (var _i = 0, toggles_1 = toggles; _i < toggles_1.length; _i++) {
            var toggle = toggles_1[_i];
            _loop_1(toggle);
        }
        var customs = [];
        var toColor = function (input) {
            switch (input.value) {
                case 'custom:solid':
                    return asColorFunction(node.querySelector('input[name=solid]').value);
                case 'custom:sequential':
                    var s0 = node.querySelector('input[name=interpolate0]').value;
                    var s1 = node.querySelector('input[name=interpolate1]').value;
                    return new CustomColorMappingFunction([{ color: s0, value: 0 }, { color: s1, value: 1 }]);
                case 'custom:diverging':
                    var dm1 = node.querySelector('input[name=divergentm1]').value;
                    var d0 = node.querySelector('input[name=divergent0]').value;
                    var d1 = node.querySelector('input[name=divergent1]').value;
                    return new CustomColorMappingFunction([{ color: dm1, value: 0 }, { color: d0, value: 0.5 }, { color: d1, value: 1 }]);
            }
            return createColorMappingFunction(input.value);
        };
        this.forEach('input[name=color]', function (d) {
            if (d.value.startsWith('custom:')) {
                customs.push(d);
            }
            d.onchange = function () {
                if (!d.checked) {
                    return;
                }
                var _loop_2 = function (custom) {
                    Array.from(custom.nextElementSibling.querySelectorAll('input')).forEach(function (s) { return s.disabled = custom !== d; });
                };
                for (var _i = 0, customs_1 = customs; _i < customs_1.length; _i++) {
                    var custom = customs_1[_i];
                    _loop_2(custom);
                }
                var base = toColor(d);
                if (quantized.checked && base.type !== 'solid') {
                    _this.column.setColorMapping(new QuantizedColorFunction(base, parseInt(steps.value, 10)));
                }
                else {
                    _this.column.setColorMapping(base);
                }
            };
        });
        this.forEach('label > input[type=color]', function (d) {
            d.onchange = function () {
                var item = d.parentElement.previousElementSibling;
                item.onchange.call(item, null);
            };
        });
    };
    ColorMappingDialog.prototype.updateGradients = function (steps) {
        this.forEach("label[data-c]", function (d) {
            var f = lookupInterpolatingColor.get(d.dataset.c);
            d.style.background = steps < 0 ? gradient(f.apply, f.type === 'sequential' ? 9 : 11) : steppedGradient(f.apply, steps);
        });
    };
    return ColorMappingDialog;
}(ADialog));
export default ColorMappingDialog;
function gradient(interpolate, steps) {
    if (steps === void 0) { steps = 2; }
    if (steps <= 1) {
        return "" + interpolate(0);
    }
    var stepSize = 1 / (steps - 1);
    var r = "linear-gradient(to right";
    for (var i = 0; i < steps; ++i) {
        r += ", " + interpolate(i * stepSize) + " " + round((i * stepSize) * 100, 2) + "%";
    }
    r += ')';
    return r;
}
function steppedGradient(color, count) {
    if (count === void 0) { count = 2; }
    if (count === 1) {
        return "" + color(0);
    }
    var r = "linear-gradient(to right";
    var stepSize = 1 / count;
    var half = stepSize / 2;
    for (var i = 0; i < count; ++i) {
        var shift = i === 0 ? 0 : (i === (count - 1) ? stepSize : half);
        var c = color(i * stepSize + shift);
        r += ", " + c + " " + round((i * stepSize) * 100, 2) + "%, " + c + " " + round(((i + 1) * stepSize) * 100, 2) + "%";
    }
    r += ')';
    return r;
}
//# sourceMappingURL=ColorMappingDialog.js.map