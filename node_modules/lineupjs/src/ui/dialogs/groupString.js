import { EStringGroupCriteriaType } from '../../model/StringColumn';
export default function append(col, node, dialog) {
    var current = col.getGroupCriteria();
    var type = current.type, values = current.values;
    node.insertAdjacentHTML('beforeend', "\n    <div class=\"lu-checkbox\">\n      <input type=\"radio\" name=\"" + dialog.idPrefix + "groupString\" value=\"" + EStringGroupCriteriaType.value + "\" id=\"" + dialog.idPrefix + "VAL\" " + (type === EStringGroupCriteriaType.value ? 'checked' : '') + ">\n      <label for=\"" + dialog.idPrefix + "VAL\">Use text value</label>\n    </div>\n    <div class=\"lu-checkbox\">\n      <input type=\"radio\" name=\"" + dialog.idPrefix + "groupString\" value=\"" + EStringGroupCriteriaType.startsWith + "\" id=\"" + dialog.idPrefix + "RW\" " + (type === EStringGroupCriteriaType.startsWith ? 'checked' : '') + ">\n      <label for=\"" + dialog.idPrefix + "RW\">Text starts with &hellip;</label>\n    </div>\n    <div class=\"lu-checkbox\">\n      <input type=\"radio\" name=\"" + dialog.idPrefix + "groupString\" value=\"" + EStringGroupCriteriaType.regex + "\" id=\"" + dialog.idPrefix + "RE\" " + (type === EStringGroupCriteriaType.regex ? 'checked' : '') + ">\n      <label for=\"" + dialog.idPrefix + "RE\">Use regular expressions</label>\n    </div>\n    <textarea required rows=\"5\" placeholder=\"e.g. Test,a.*\" id=\"" + dialog.idPrefix + "T\">" + values.map(function (value) { return value instanceof RegExp ? value.source : value; }).join('\n') + "</textarea>\n    <button id=\"" + dialog.idPrefix + "A\">Apply</button>\n  ");
    var button = node.querySelector("#" + dialog.idPrefix + "A");
    var valueRadioButton = node.querySelector("#" + dialog.idPrefix + "VAL");
    var startsWithRadioButton = node.querySelector("#" + dialog.idPrefix + "RW");
    var regexRadioButton = node.querySelector("#" + dialog.idPrefix + "RE");
    var text = node.querySelector("#" + dialog.idPrefix + "T");
    var showOrHideTextarea = function (show) {
        text.style.display = show ? null : 'none';
    };
    showOrHideTextarea(type !== EStringGroupCriteriaType.value);
    valueRadioButton.onchange = function () { return showOrHideTextarea(!valueRadioButton.checked); };
    startsWithRadioButton.onchange = function () { return showOrHideTextarea(startsWithRadioButton.checked); };
    regexRadioButton.onchange = function () { return showOrHideTextarea(regexRadioButton.checked); };
    button.onclick = function (evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var checkedNode = node.querySelector("input[name=\"" + dialog.idPrefix + "groupString\"]:checked");
        var newType = checkedNode.value;
        var items = text.value.trim().split('\n').map(function (d) { return d.trim(); }).filter(function (d) { return d.length > 0; });
        if (newType !== EStringGroupCriteriaType.value) {
            var invalid = items.length === 0;
            text.setCustomValidity(invalid ? 'At least one entry is required' : '');
            if (invalid) {
                text.reportValidity();
                return;
            }
        }
        if (newType === EStringGroupCriteriaType.regex) {
            items = items.map(function (d) { return new RegExp(d.toString(), 'gm'); });
        }
        col.setGroupCriteria({
            type: newType,
            values: items
        });
    };
}
//# sourceMappingURL=groupString.js.map