import { __extends } from "tslib";
import { isCategoryIncluded } from '../../model/ICategoricalColumn';
import { filterMissingMarkup, findFilterMissing } from '../missing';
import ADialog from './ADialog';
import { updateFilterState, uniqueId, forEach } from './utils';
var CategoricalFilterDialog = (function (_super) {
    __extends(CategoricalFilterDialog, _super);
    function CategoricalFilterDialog(column, dialog) {
        var _this = _super.call(this, dialog, {
            fullDialog: true
        }) || this;
        _this.column = column;
        _this.before = _this.column.getFilter() || { filter: _this.column.categories.map(function (d) { return d.name; }), filterMissing: false };
        return _this;
    }
    CategoricalFilterDialog.prototype.build = function (node) {
        var _this = this;
        node.classList.add('lu-filter-table');
        var id = uniqueId(this.dialog.idPrefix);
        node.insertAdjacentHTML('beforeend', "<div>\n        <div class=\"lu-checkbox\"><input id=\"" + id + "\" type=\"checkbox\" checked><label for=\"" + id + "\"><span></span><div>Un/Select All</div></label></div>\n        " + this.column.categories.map(function (c) { return "<div class=\"lu-checkbox\"><input id=\"" + id + c.name + "\" data-cat=\"" + c.name + "\" type=\"checkbox\"" + (isCategoryIncluded(_this.before, c) ? 'checked' : '') + "><label for=\"" + id + c.name + "\"><span style=\"background-color: " + c.color + "\"></span><div>" + c.label + "</div></label></div>"; }).join('') + "\n    </div>");
        this.findInput('input:not([data-cat])').onchange = function () {
            var input = this;
            forEach(node, 'input[data-cat]', function (n) { return n.checked = input.checked; });
        };
        node.insertAdjacentHTML('beforeend', filterMissingMarkup(this.before.filterMissing, this.dialog.idPrefix));
    };
    CategoricalFilterDialog.prototype.updateFilter = function (filter, filterMissing) {
        var noFilter = filter == null && filterMissing === false;
        updateFilterState(this.attachment, this.column, !noFilter);
        this.column.setFilter(noFilter ? null : { filter: filter, filterMissing: filterMissing });
    };
    CategoricalFilterDialog.prototype.reset = function () {
        this.forEach('input[data-cat]', function (n) { return n.checked = true; });
        this.updateFilter(null, false);
    };
    CategoricalFilterDialog.prototype.submit = function () {
        var f = this.forEach('input[data-cat]', function (n) { return n.checked ? n.dataset.cat : ''; }).filter(Boolean);
        if (f.length === this.column.categories.length) {
            f = null;
        }
        var filterMissing = findFilterMissing(this.node).checked;
        this.updateFilter(f, filterMissing);
        return true;
    };
    return CategoricalFilterDialog;
}(ADialog));
export default CategoricalFilterDialog;
//# sourceMappingURL=CategoricalFilterDialog.js.map