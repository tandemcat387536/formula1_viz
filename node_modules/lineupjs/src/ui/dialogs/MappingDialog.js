import { __extends } from "tslib";
import { round } from '../../internal';
import { isMissingValue, ScaleMappingFunction, ScriptMappingFunction, isMapAbleColumn } from '../../model';
import ADialog from './ADialog';
import { MappingLine } from './MappingLineDialog';
var MappingDialog = (function (_super) {
    __extends(MappingDialog, _super);
    function MappingDialog(column, dialog, ctx) {
        var _this = _super.call(this, dialog, {
            fullDialog: true
        }) || this;
        _this.column = column;
        _this.mappingLines = [];
        _this.loadedData = null;
        _this.mappingAdapter = {
            destroyed: function (self) {
                _this.mappingLines.splice(_this.mappingLines.indexOf(self), 1);
            },
            updated: function () { return _this.updateLines(_this.computeScale()); },
            domain: function () { return _this.rawDomain; },
            normalizeRaw: _this.normalizeRaw.bind(_this),
            unnormalizeRaw: _this.unnormalizeRaw.bind(_this),
            dialog: _this.dialog
        };
        _this.idPrefix = "me" + ctx.idPrefix;
        _this.scale = _this.column.getMapping().clone();
        var domain = _this.scale.domain;
        _this.rawDomain = [domain[0], domain[domain.length - 1]];
        _this.data = Promise.resolve(ctx.provider.mappingSample(column));
        return _this;
    }
    Object.defineProperty(MappingDialog.prototype, "scaleType", {
        get: function () {
            if (!(this.scale instanceof ScaleMappingFunction)) {
                return 'script';
            }
            var base = this.scale.scaleType;
            if (base !== 'linear') {
                return base;
            }
            var r = this.scale.range;
            if (r.length === 2 && r[0] === 1 && r[1] === 0) {
                return 'linear_invert';
            }
            if (r.length === 3 && r[0] === 1 && r[1] === 0 && r[2] === 1) {
                return 'linear_abs';
            }
            return 'linear';
        },
        enumerable: true,
        configurable: true
    });
    MappingDialog.prototype.build = function (node) {
        var _this = this;
        node.classList.add('lu-dialog-mapper');
        var r = this.column.findMyRanker();
        var others = !r ? [] : r.flatColumns.filter(function (d) { return isMapAbleColumn(d) && d !== _this.column; });
        node.insertAdjacentHTML('beforeend', "\n        <div><label for=\"" + this.idPrefix + "mapping_type\"><strong>Normalization Scaling:</strong></label><select id=\"" + this.idPrefix + "mapping_type\" class=\"browser-default\">\n        <option value=\"linear\">Linear</option>\n        <option value=\"linear_invert\">Invert</option>\n        <option value=\"linear_abs\">Absolute</option>\n        <option value=\"log\">Log</option>\n        <option value=\"pow1.1\">Pow 1.1</option>\n        <option value=\"pow2\">Pow 2</option>\n        <option value=\"pow3\">Pow 3</option>\n        <option value=\"sqrt\">Sqrt</option>\n        <option value=\"script\">Custom Script</option>\n        " + (others.length > 0 ? "<optgroup label=\"Copy From\">" + others.map(function (d) { return "<option value=\"copy_" + d.id + "\">" + d.label + "</option>"; }).join('') + "</optgroup>" : '') + "\n      </select>\n      </div>\n        <div class=\"lu-details\"><strong>Domain (min - max): </strong><input id=\"" + this.idPrefix + "min\" required type=\"number\" value=\"" + round(this.rawDomain[0], 3) + "\" step=\"any\"> - <input id=\"" + this.idPrefix + "max\" required type=\"number\" value=\"" + round(this.rawDomain[1], 3) + "\" step=\"any\"></div>\n        <strong class=\"lu-details\" style=\"text-align: center\">Input Domain (min - max)</strong>\n        <svg class=\"lu-details\" viewBox=\"0 0 106 66\">\n           <g transform=\"translate(3,3)\">\n              <line x2=\"100\"></line>\n              <rect y=\"-3\" width=\"100\" height=\"10\"></rect>\n              <line y1=\"60\" x2=\"100\" y2=\"60\"></line>\n              <rect y=\"36\" width=\"100\" height=\"10\"></rect>\n           </g>\n        </svg>\n        <strong class=\"lu-details\" style=\"text-align: center; margin-top: 0\">Output Normalized Domain (0 - 1)</strong>\n        <div class=\"lu-script\">\n          <strong>Custom Normalization Script</strong>\n          <textarea></textarea>\n        </div>");
        var g = node.querySelector('.lu-details > g');
        this.forEach('.lu-details rect', function (d) { return d.onclick = function (evt) {
            evt.preventDefault();
            evt.stopPropagation();
            var bb = d.getBoundingClientRect();
            var x = round((evt.x - bb.left) * 100 / bb.width, 2);
            var m = new MappingLine(g, x, x, _this.mappingAdapter);
            _this.mappingLines.push(m);
        }; });
        {
            var select = this.find('select');
            var textarea_1 = this.find('textarea');
            select.onchange = function (evt) {
                var select = evt.currentTarget;
                switch (select.value) {
                    case 'linear_invert':
                        _this.scale = new ScaleMappingFunction(_this.rawDomain.slice(), 'linear', [1, 0]);
                        break;
                    case 'linear_abs':
                        _this.scale = new ScaleMappingFunction([_this.rawDomain[0], (_this.rawDomain[1] - _this.rawDomain[0]) / 2, _this.rawDomain[1]], 'linear', [1, 0, 1]);
                        break;
                    case 'script':
                        var s = new ScriptMappingFunction(_this.rawDomain.slice());
                        _this.scale = s;
                        textarea_1.value = s.code;
                        break;
                    default:
                        if (select.value.startsWith('copy_')) {
                            _this.copyMapping(select.value.slice('copy_'.length));
                            return;
                        }
                        _this.scale = new ScaleMappingFunction(_this.rawDomain.slice(), select.value);
                        break;
                }
                _this.createMappings();
                node.dataset.scale = select.value;
                _this.updateLines();
            };
            var scaleType_1 = node.dataset.scale = this.scaleType;
            select.selectedIndex = Array.from(select.options).findIndex(function (d) { return d.value === scaleType_1; });
            if (scaleType_1 === 'script') {
                textarea_1.value = this.scale.code;
            }
            this.createMappings();
        }
        {
            this.forEach('.lu-details input[type=number]', function (d, i) { return d.onchange = function () {
                var v = parseFloat(d.value);
                if (v === _this.rawDomain[i]) {
                    d.setCustomValidity('');
                    return;
                }
                var other = _this.rawDomain[1 - i];
                if (isNaN(v) || (i === 0 && v >= other) || (i === 1 && v <= other)) {
                    d.setCustomValidity("value has to be " + (i === 0 ? '<= max' : '>= min'));
                    return;
                }
                d.setCustomValidity('');
                _this.rawDomain[i] = v;
                _this.scale.domain = _this.rawDomain.slice();
                if (!_this.loadedData) {
                    return;
                }
                _this.applyMapping(_this.scale);
                _this.updateLines();
            }; });
        }
        this.data.then(function (values) {
            _this.loadedData = values;
            Array.from(values).forEach(function (v) {
                if (!isMissingValue(v)) {
                    g.insertAdjacentHTML('afterbegin', "<line data-v=\"" + v + "\" x1=\"" + round(_this.normalizeRaw(v), 2) + "\" x2=\"" + round(_this.scale.apply(v) * 100, 2) + "\" y2=\"60\"></line>");
                }
            });
        });
    };
    MappingDialog.prototype.createMappings = function () {
        var _a;
        var _this = this;
        this.mappingLines.splice(0, this.mappingLines.length).forEach(function (d) { return d.destroy(); });
        if (!(this.scale instanceof ScaleMappingFunction)) {
            return;
        }
        var g = this.node.querySelector('.lu-details > g');
        var domain = this.scale.domain;
        var range = this.scale.range;
        (_a = this.mappingLines).push.apply(_a, domain.map(function (d, i) { return new MappingLine(g, _this.normalizeRaw(d), range[i] * 100, _this.mappingAdapter); }));
    };
    MappingDialog.prototype.update = function () {
        var scaleType = this.node.dataset.scale = this.scaleType;
        var select = this.find('select');
        select.selectedIndex = Array.from(select.options).findIndex(function (d) { return d.value === scaleType; });
        if (scaleType === 'script') {
            this.find('textarea').value = this.scale.code;
        }
        var domain = this.scale.domain;
        this.forEach('.lu-details input[type=number]', function (d, i) {
            d.value = String(domain[i]);
        });
    };
    MappingDialog.prototype.updateLines = function (scale) {
        var _this = this;
        if (scale === void 0) { scale = this.scale; }
        this.forEach('.lu-details > g > line[x1]', function (d) {
            var v = parseFloat(d.getAttribute('data-v'));
            d.setAttribute('x1', round(_this.normalizeRaw(v), 2).toString());
            d.setAttribute('x2', round(scale.apply(v) * 100, 2).toString());
        });
    };
    MappingDialog.prototype.applyMapping = function (newScale) {
        this.column.setMapping(newScale);
    };
    MappingDialog.prototype.reset = function () {
        this.scale = this.column.getOriginalMapping();
        this.rawDomain = this.scale.domain.slice();
        this.applyMapping(this.scale);
        this.update();
        this.updateLines();
        this.createMappings();
    };
    MappingDialog.prototype.copyMapping = function (columnId) {
        var r = this.column.findMyRanker();
        if (!r) {
            return;
        }
        var ref = r.find(columnId);
        this.scale = ref.getMapping().clone();
        this.rawDomain = this.scale.domain.slice();
        this.applyMapping(this.scale);
        this.update();
        this.updateLines();
    };
    MappingDialog.prototype.normalizeRaw = function (d) {
        var v = (d - this.rawDomain[0]) * 100 / (this.rawDomain[1] - this.rawDomain[0]);
        return Math.max(Math.min(v, 100), 0);
    };
    MappingDialog.prototype.unnormalizeRaw = function (d) {
        return (d) * (this.rawDomain[1] - this.rawDomain[0]) / 100 + this.rawDomain[0];
    };
    MappingDialog.prototype.computeScale = function () {
        var _this = this;
        var s = this.scale.clone();
        if (this.scaleType === 'script') {
            s.code = this.node.querySelector('textarea').value;
            s.domain = this.rawDomain.slice();
        }
        if (s instanceof ScaleMappingFunction) {
            this.mappingLines.sort(function (a, b) { return a.domain - b.domain; });
            s.domain = this.mappingLines.map(function (d) { return _this.unnormalizeRaw(d.domain); });
            s.range = this.mappingLines.map(function (d) { return d.range / 100; });
        }
        return s;
    };
    MappingDialog.prototype.submit = function () {
        var _this = this;
        if (!this.node.checkValidity()) {
            return false;
        }
        if (this.scaleType === 'script') {
            this.scale.code = this.node.querySelector('textarea').value;
            this.scale.domain = this.rawDomain.slice();
        }
        if (this.scale instanceof ScaleMappingFunction) {
            this.mappingLines.sort(function (a, b) { return a.domain - b.domain; });
            this.scale.domain = this.mappingLines.map(function (d) { return _this.unnormalizeRaw(d.domain); });
            this.scale.range = this.mappingLines.map(function (d) { return d.range / 100; });
        }
        this.applyMapping(this.scale);
        return true;
    };
    return MappingDialog;
}(ADialog));
export default MappingDialog;
//# sourceMappingURL=MappingDialog.js.map