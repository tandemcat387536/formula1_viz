import { __extends } from "tslib";
import { round } from '../../internal';
import { isCategoryIncluded } from '../../model/ICategoricalColumn';
import { filterMissingMarkup, findFilterMissing } from '../missing';
import ADialog from './ADialog';
import { updateFilterState, uniqueId, forEach } from './utils';
var CategoricalMappingFilterDialog = (function (_super) {
    __extends(CategoricalMappingFilterDialog, _super);
    function CategoricalMappingFilterDialog(column, dialog) {
        var _this = _super.call(this, dialog, {
            fullDialog: true
        }) || this;
        _this.column = column;
        _this.before = _this.column.getFilter() || { filter: _this.column.categories.map(function (d) { return d.name; }), filterMissing: false };
        return _this;
    }
    CategoricalMappingFilterDialog.prototype.build = function (node) {
        var _this = this;
        node.classList.add('lu-filter-table');
        var joint = this.column.categories.map(function (d) { return Object.assign({
            range: round(d.value * 100, 2)
        }); });
        joint.sort(function (a, b) { return a.label.localeCompare(b.label); });
        var id = uniqueId(this.dialog.idPrefix);
        node.insertAdjacentHTML('beforeend', "<div>\n        <div class=\"lu-checkbox\"><input id=\"" + id + "\" type=\"checkbox\" checked><label for=\"" + id + "\"><div>Un/Select All</div></label></div>\n        " + joint.map(function (_a) {
            var name = _a.name, color = _a.color, label = _a.label, range = _a.range;
            return "<input id=\"" + id + name + "\" data-cat=\"" + name + "\" type=\"checkbox\"" + (isCategoryIncluded(_this.before, name) ? 'checked' : '') + ">\n        <div class=\"lu-checkbox\"><input type=\"number\" value=\"" + range + "\" min=\"0\" max=\"100\" size=\"5\"><label for=\"" + id + name + "\"><div><div style=\"background-color: " + color + "; width: " + range + "%\"></div></div><div>" + label + "</div></label></div>";
        }).join('') + "\n    </div>");
        this.findInput('input[type=checkbox]:not([data-cat])').onchange = function () {
            var input = this;
            forEach(node, '[data-cat]', function (n) { return n.checked = input.checked; });
        };
        this.forEach('input[type=number]', function (d) {
            d.oninput = function () {
                d.nextElementSibling.firstElementChild.style.width = d.value + "%";
            };
        });
        node.insertAdjacentHTML('beforeend', filterMissingMarkup(this.before.filterMissing, this.dialog.idPrefix));
    };
    CategoricalMappingFilterDialog.prototype.updateFilter = function (filter, filterMissing) {
        var noFilter = filter == null && filterMissing === false;
        updateFilterState(this.attachment, this.column, !noFilter);
        this.column.setFilter(noFilter ? null : { filter: filter, filterMissing: filterMissing });
    };
    CategoricalMappingFilterDialog.prototype.reset = function () {
        this.forEach('[data-cat]', function (n) {
            n.checked = false;
            n.nextElementSibling.value = '50';
        });
        this.updateFilter(null, false);
        this.column.setMapping(this.column.categories.map(function () { return 1; }));
    };
    CategoricalMappingFilterDialog.prototype.submit = function () {
        var items = this.forEach('input[data-cat]', function (n) { return ({
            checked: n.checked,
            cat: n.dataset.cat,
            range: parseFloat(n.nextElementSibling.value)
        }); });
        var f = items.filter(function (d) { return d.checked; }).map(function (d) { return d.cat; });
        if (f.length === this.column.categories.length) {
            f = null;
        }
        var filterMissing = findFilterMissing(this.node).checked;
        this.updateFilter(f, filterMissing);
        this.column.setMapping(items.map(function (d) { return d.range / 100; }));
        return true;
    };
    return CategoricalMappingFilterDialog;
}(ADialog));
export default CategoricalMappingFilterDialog;
//# sourceMappingURL=CategoricalMappingFilterDialog.js.map