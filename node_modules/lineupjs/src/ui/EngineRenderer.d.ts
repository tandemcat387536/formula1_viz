import { GridStyleManager } from 'lineupengine';
import { ILineUpOptions } from '../interfaces';
import AEventDispatcher, { IEventListener } from '../internal/AEventDispatcher';
import ADataProvider from '../provider/ADataProvider';
import { IRenderContext } from '../renderer';
import EngineRanking, { IEngineRankingContext } from './EngineRanking';
import { IRankingHeaderContext, IRankingHeaderContextContainer } from './interfaces';
export declare function highlightChanged(dataIndex: number): void;
export default class EngineRenderer extends AEventDispatcher {
    protected data: ADataProvider;
    static readonly EVENT_HIGHLIGHT_CHANGED = "highlightChanged";
    protected readonly options: Readonly<ILineUpOptions>;
    private readonly histCache;
    readonly node: HTMLElement;
    private readonly table;
    private readonly rankings;
    private readonly slopeGraphs;
    readonly ctx: IRankingHeaderContextContainer & IRenderContext & IEngineRankingContext;
    private readonly updateAbles;
    private zoomFactor;
    readonly idPrefix: string;
    private enabledHighlightListening;
    constructor(data: ADataProvider, parent: HTMLElement, options: Readonly<ILineUpOptions>);
    readonly style: GridStyleManager;
    zoomOut(): void;
    zoomIn(): void;
    private updateZoomFactor;
    pushUpdateAble(updateAble: (ctx: IRankingHeaderContext) => void): void;
    protected createEventList(): string[];
    on(type: typeof EngineRenderer.EVENT_HIGHLIGHT_CHANGED, listener: typeof highlightChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    setDataProvider(data: ADataProvider): void;
    private takeDownProvider;
    private initProvider;
    private updateSelection;
    private updateHist;
    private addRanking;
    private updateRotatedHeaderState;
    private removeRanking;
    update(rankings?: EngineRanking[]): void;
    private updateSlopeGraphs;
    setHighlight(dataIndex: number, scrollIntoView: boolean): boolean;
    setHighlightToNearest(dataIndices: number[], scrollIntoView: boolean): boolean;
    getHighlight(): number;
    enableHighlightListening(enable: boolean): void;
    destroy(): void;
}
