import Column from '../model/Column';
import ADialog, { IDialogContext } from './dialogs/ADialog';
import { IRankingHeaderContext } from './interfaces';
export interface IUIOptions {
    shortcut: boolean | 'only';
    order: number;
    featureLevel: 'basic' | 'advanced';
    featureCategory: 'ranking' | 'model' | 'ui';
}
export interface IMouseEvent {
    stopPropagation(): void;
    currentTarget: Element;
    shiftKey: boolean;
    altKey: boolean;
    ctrlKey: boolean;
    [key: string]: any;
}
export interface IOnClickHandler {
    (col: Column, evt: IMouseEvent, ctx: IRankingHeaderContext, level: number, viaShortcut: boolean): any;
}
export interface IToolbarAction {
    title: string;
    onClick: IOnClickHandler;
    options: Partial<IUIOptions>;
}
export interface IToolbarDialogAddon {
    title: string;
    order: number;
    append(col: Column, node: HTMLElement, dialog: IDialogContext, ctx: IRankingHeaderContext): void;
}
export interface IDialogClass {
    new (col: any, dialog: IDialogContext, ...args: any[]): ADialog;
}
export declare function dialogContext(ctx: IRankingHeaderContext, level: number, evt: {
    currentTarget: Element;
}): IDialogContext;
export declare const toolbarActions: {
    [key: string]: IToolbarAction | IToolbarDialogAddon;
};
export declare function getToolbar(col: Column, ctx: IRankingHeaderContext): IToolbarAction[];
export declare function getToolbarDialogAddons(col: Column, key: string, ctx: IRankingHeaderContext): IToolbarDialogAddon[];
export declare function isSortAble(col: Column, ctx: IRankingHeaderContext): boolean;
export declare function isGroupAble(col: Column, ctx: IRankingHeaderContext): boolean;
export declare function isGroupSortAble(col: Column, ctx: IRankingHeaderContext): boolean;
