import { __extends } from "tslib";
import AEventDispatcher from '../../internal/AEventDispatcher';
function isItem(v) {
    return v.id !== undefined;
}
var SearchBox = (function (_super) {
    __extends(SearchBox, _super);
    function SearchBox(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.options = {
            formatItem: function (item) { return item.text; },
            doc: document,
            placeholder: 'Select...',
        };
        _this.values = [];
        Object.assign(_this.options, options);
        _this.node = _this.options.doc.createElement('div');
        _this.node.classList.add('lu-search');
        _this.node.innerHTML = "<input type=\"search\" placeholder=\"" + _this.options.placeholder + "\"><ul></ul>";
        _this.search = _this.node.querySelector('input');
        _this.body = _this.node.querySelector('ul');
        _this.search.onfocus = function () { return _this.focus(); };
        _this.search.onblur = function () { return _this.blur(); };
        _this.search.oninput = function () { return _this.filter(); };
        _this.search.onkeydown = function (evt) { return _this.handleKey(evt); };
        return _this;
    }
    Object.defineProperty(SearchBox.prototype, "data", {
        get: function () {
            return this.values;
        },
        set: function (data) {
            this.values = data;
            this.body.innerHTML = '';
            this.buildDialog(this.body, this.values);
        },
        enumerable: true,
        configurable: true
    });
    SearchBox.prototype.buildDialog = function (node, values) {
        var _this = this;
        values.forEach(function (v) {
            if (isItem(v)) {
                node.insertAdjacentHTML('beforeend', "<li class=\"lu-search-item\"><span></span></li>");
                var span_1 = node.lastElementChild;
                span_1.onmousedown = function (evt) {
                    evt.preventDefault();
                };
                span_1.onclick = function () { return _this.select(v); };
                span_1.onmouseenter = function () { return _this.highlighted = span_1; };
                span_1.onmouseleave = function () { return _this.highlighted = null; };
            }
            else {
                node.insertAdjacentHTML('beforeend', "<li class=\"lu-search-group\"><span></span><ul></ul></li>");
                var ul = node.lastElementChild.lastElementChild;
                _this.buildDialog(ul, v.children);
            }
            var item = node.lastElementChild.firstElementChild;
            item.innerHTML = _this.options.formatItem(v, item);
        });
    };
    SearchBox.prototype.handleKey = function (evt) {
        var KEYS = {
            ESC: 27,
            ENTER: 13,
            UP: 38,
            DOWN: 40
        };
        switch (evt.which) {
            case KEYS.ESC:
                this.search.blur();
                break;
            case KEYS.ENTER:
                var h = this.highlighted;
                if (h) {
                    h.click();
                }
                break;
            case KEYS.UP:
                this.highlightPrevious();
                break;
            case KEYS.DOWN:
                this.highlightNext();
                break;
        }
    };
    SearchBox.prototype.select = function (item) {
        this.search.value = '';
        this.search.blur();
        this.fire(SearchBox.EVENT_SELECT, item);
    };
    SearchBox.prototype.focus = function () {
        this.body.style.width = this.search.offsetWidth + "px";
        this.highlighted = this.body.firstElementChild || null;
        this.node.classList.add('lu-search-open');
    };
    Object.defineProperty(SearchBox.prototype, "highlighted", {
        get: function () {
            return this.body.querySelector('.lu-search-highlighted') || null;
        },
        set: function (value) {
            var old = this.highlighted;
            if (old === value) {
                return;
            }
            if (old) {
                old.classList.remove('lu-search-highlighted');
            }
            if (value) {
                value.classList.add('lu-search-highlighted');
            }
        },
        enumerable: true,
        configurable: true
    });
    SearchBox.prototype.highlightNext = function () {
        var h = this.highlighted;
        if (!h || h.classList.contains('hidden')) {
            this.highlighted = this.body.querySelector('.lu-search-item:not(.hidden)') || null;
            return;
        }
        var items = Array.from(this.body.querySelectorAll('.lu-search-item:not(.hidden)'));
        var index = items.indexOf(h);
        this.highlighted = items[index + 1] || null;
    };
    SearchBox.prototype.highlightPrevious = function () {
        var h = this.highlighted;
        var items = Array.from(this.body.querySelectorAll('.lu-search-item:not(.hidden)'));
        if (!h || h.classList.contains('hidden')) {
            this.highlighted = items[items.length - 1] || null;
            return;
        }
        var index = items.indexOf(h);
        this.highlighted = items[index - 1] || null;
    };
    SearchBox.prototype.blur = function () {
        this.search.value = '';
        this.filterResults(this.body, '');
        this.node.classList.remove('lu-search-open');
    };
    SearchBox.prototype.filter = function () {
        var empty = this.filterResults(this.body, this.search.value.toLowerCase());
        this.body.classList.toggle('lu-search-empty', empty);
    };
    SearchBox.prototype.filterResults = function (node, text) {
        var _this = this;
        if (text === '') {
            Array.from(node.querySelectorAll('.hidden')).forEach(function (d) { return d.classList.remove('hidden'); });
            return false;
        }
        var children = Array.from(node.children);
        children.forEach(function (d) {
            var content = d.firstElementChild.innerHTML.toLowerCase();
            var hidden = !content.includes(text);
            if (d.classList.contains('lu-search-group')) {
                var ul = d.lastElementChild;
                var allChildrenHidden = _this.filterResults(ul, text);
                hidden = hidden && allChildrenHidden;
            }
            d.classList.toggle('hidden', hidden);
        });
        return children.every(function (d) { return d.classList.contains('hidden'); });
    };
    SearchBox.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([SearchBox.EVENT_SELECT]);
    };
    SearchBox.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    SearchBox.EVENT_SELECT = 'select';
    return SearchBox;
}(AEventDispatcher));
export default SearchBox;
//# sourceMappingURL=SearchBox.js.map