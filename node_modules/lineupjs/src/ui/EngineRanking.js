import { __extends, __spreadArrays } from "tslib";
import { nonUniformContext, uniformContext, PrefetchMixin, setColumn, ACellTableSection } from 'lineupengine';
import { HOVER_DELAY_SHOW_DETAIL } from '../config';
import AEventDispatcher from '../internal/AEventDispatcher';
import debounce from '../internal/debounce';
import { isGroup, isMultiLevelColumn, ValueColumn } from '../model';
import Column from '../model/Column';
import Ranking from '../model/Ranking';
import StackColumn from '../model/StackColumn';
import { CANVAS_HEIGHT, COLUMN_PADDING } from '../styles';
import { lineupAnimation } from './animation';
import MultiLevelRenderColumn from './MultiLevelRenderColumn';
import RenderColumn from './RenderColumn';
import SelectionManager from './SelectionManager';
var RankingEvents = (function (_super) {
    __extends(RankingEvents, _super);
    function RankingEvents() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RankingEvents.prototype.fire = function (type) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        _super.prototype.fire.apply(this, __spreadArrays([type], args));
    };
    RankingEvents.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([RankingEvents.EVENT_WIDTH_CHANGED, RankingEvents.EVENT_UPDATE_DATA, RankingEvents.EVENT_UPDATE_HIST, RankingEvents.EVENT_HIGHLIGHT_CHANGED]);
    };
    RankingEvents.EVENT_WIDTH_CHANGED = 'widthChanged';
    RankingEvents.EVENT_UPDATE_DATA = 'updateData';
    RankingEvents.EVENT_UPDATE_HIST = 'updateHist';
    RankingEvents.EVENT_HIGHLIGHT_CHANGED = 'highlightChanged';
    return RankingEvents;
}(AEventDispatcher));
var EngineRanking = (function (_super) {
    __extends(EngineRanking, _super);
    function EngineRanking(ranking, header, body, tableId, style, ctx, roptions) {
        if (roptions === void 0) { roptions = {}; }
        var _this = _super.call(this, header, body, tableId, style, { mixins: [PrefetchMixin], batchSize: 10 }) || this;
        _this.ranking = ranking;
        _this.ctx = ctx;
        _this.data = [];
        _this.highlight = -1;
        _this.canvasPool = [];
        _this.oldLeft = 0;
        _this.events = new RankingEvents();
        _this.roptions = {
            animation: true,
            levelOfDetail: function () { return 'high'; },
            customRowUpdate: function () { return undefined; },
            flags: {
                disableFrozenColumns: false,
                advancedModelFeatures: true,
                advancedRankingFeatures: true,
                advancedUIFeatures: true
            }
        };
        _this.canvasMouseHandler = {
            timer: -1,
            enter: function (evt) {
                var c = _this.canvasMouseHandler;
                if (c.timer > 0) {
                    self.clearTimeout(c.timer);
                }
                var row = evt.currentTarget;
                row.addEventListener('mouseleave', c.leave, {
                    passive: true
                });
                c.timer = self.setTimeout(function () { return _this.updateHoveredRow(row, true); }, HOVER_DELAY_SHOW_DETAIL);
            },
            leave: function (evt) {
                var c = _this.canvasMouseHandler;
                if (c.timer > 0) {
                    self.clearTimeout(c.timer);
                    c.timer = -1;
                }
                var row = evt.currentTarget;
                if (!EngineRanking.isCanvasRenderedRow(row)) {
                    self.setTimeout(function () { return _this.updateHoveredRow(row, false); });
                }
                row.removeEventListener('mouseleave', c.leave);
            }
        };
        _this.highlightHandler = {
            enabled: false,
            enter: function (evt) {
                if (_this.highlight >= 0) {
                    var old = _this.body.querySelector('.le-highlighted');
                    if (old) {
                        old.classList.remove('le-highlighted');
                    }
                    _this.highlight = -1;
                }
                var row = evt.currentTarget;
                var dataIndex = parseInt(row.dataset.i || '-1', 10);
                _this.events.fire(EngineRanking.EVENT_HIGHLIGHT_CHANGED, dataIndex);
            },
            leave: function () {
                if (_this.highlight >= 0) {
                    var old = _this.body.querySelector('.le-highlighted');
                    if (old) {
                        old.classList.remove('le-highlighted');
                    }
                    _this.highlight = -1;
                }
                _this.events.fire(EngineRanking.EVENT_HIGHLIGHT_CHANGED, -1);
            }
        };
        Object.assign(_this.roptions, roptions);
        body.classList.add('lu-row-body');
        body.dataset.ranking = ranking.id;
        var that = _this;
        _this.delayedUpdate = debounce((function () {
            if (this.type !== Ranking.EVENT_DIRTY_VALUES) {
                that.events.fire(EngineRanking.EVENT_UPDATE_DATA);
                return;
            }
            if (this.primaryType !== Column.EVENT_RENDERER_TYPE_CHANGED && this.primaryType !== Column.EVENT_GROUP_RENDERER_TYPE_CHANGED && this.primaryType !== Column.EVENT_LABEL_CHANGED) {
                that.updateBody();
            }
        }), 50, function (current, next) {
            var currentEvent = current.self.type;
            return currentEvent === Ranking.EVENT_ORDER_CHANGED ? current : next;
        });
        _this.delayedUpdateAll = debounce(function () { return _this.updateAll(); }, 50);
        _this.delayedUpdateColumnWidths = debounce(function () { return _this.updateColumnWidths(); }, 50);
        ranking.on(Ranking.EVENT_ADD_COLUMN + ".hist", function (col, index) {
            _this.columns.splice(index, 0, _this.createCol(col, index));
            _this.reindex();
            _this.updateHist(col);
            _this.delayedUpdateAll();
        });
        ranking.on(Ranking.EVENT_REMOVE_COLUMN + ".body", function (col, index) {
            EngineRanking.disableListener(col);
            _this.columns.splice(index, 1);
            _this.reindex();
            _this.delayedUpdateAll();
        });
        ranking.on(Ranking.EVENT_MOVE_COLUMN + ".body", function (col, index, old) {
            var c = _this.columns.splice(old, 1)[0];
            console.assert(c.c === col);
            _this.columns.splice(old < index ? index - 1 : index, 0, c);
            _this.reindex();
            _this.delayedUpdateAll();
        });
        ranking.on(Ranking.EVENT_COLUMN_VISIBILITY_CHANGED + ".body", function (col, _oldValue, newValue) {
            if (newValue) {
                var index = ranking.children.indexOf(col);
                _this.columns.splice(index, 0, _this.createCol(col, index));
                _this.updateHist(col);
            }
            else {
                var index = _this.columns.findIndex(function (d) { return d.c === col; });
                EngineRanking.disableListener(col);
                _this.columns.splice(index, 1);
            }
            _this.reindex();
            _this.delayedUpdateAll();
        });
        ranking.on(Ranking.EVENT_ORDER_CHANGED + ".body", _this.delayedUpdate);
        _this.selection = new SelectionManager(_this.ctx, body);
        _this.selection.on(SelectionManager.EVENT_SELECT_RANGE, function (from, to, additional) {
            _this.selection.selectRange(_this.data.slice(from, to + 1), additional);
        });
        _this.renderCtx = Object.assign({
            isGroup: function (index) { return isGroup(_this.data[index]); },
            getRow: function (index) { return _this.data[index]; },
            getGroup: function (index) { return _this.data[index]; }
        }, ctx);
        _this.columns = ranking.children.filter(function (c) { return c.isVisible(); }).map(function (c, i) { return _this.createCol(c, i); });
        _this._context = Object.assign({
            columns: _this.columns,
            column: nonUniformContext(_this.columns.map(function (w) { return w.width; }), 100, COLUMN_PADDING)
        }, uniformContext(0, 20));
        _this.columns.forEach(function (column) {
            if (column instanceof MultiLevelRenderColumn) {
                column.updateWidthRule(_this.style);
            }
            column.renderers = _this.ctx.createRenderer(column.c);
        });
        return _this;
    }
    EngineRanking.prototype.on = function (type, listener) {
        this.events.on(type, listener);
        return this;
    };
    Object.defineProperty(EngineRanking.prototype, "id", {
        get: function () {
            return this.ranking.id;
        },
        enumerable: true,
        configurable: true
    });
    EngineRanking.prototype.onVisibilityChanged = function (visible) {
        _super.prototype.onVisibilityChanged.call(this, visible);
        if (visible) {
            this.delayedUpdate.call({ type: Ranking.EVENT_ORDER_CHANGED });
        }
    };
    EngineRanking.prototype.updateHeaders = function () {
        return _super.prototype.updateHeaders.call(this);
    };
    Object.defineProperty(EngineRanking.prototype, "currentData", {
        get: function () {
            return this.data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EngineRanking.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    EngineRanking.prototype.createHeader = function (_document, column) {
        return column.createHeader();
    };
    EngineRanking.prototype.updateHeader = function (node, column) {
        if (column instanceof MultiLevelRenderColumn) {
            column.updateWidthRule(this.style);
        }
        return column.updateHeader(node);
    };
    EngineRanking.prototype.createCell = function (_document, index, column) {
        return column.createCell(index);
    };
    EngineRanking.prototype.updateCell = function (node, index, column) {
        return column.updateCell(node, index);
    };
    EngineRanking.prototype.selectCanvas = function () {
        if (this.canvasPool.length > 0) {
            return this.canvasPool.pop();
        }
        console.assert(this.body.ownerDocument != null);
        var c = this.body.ownerDocument.createElement('canvas');
        c.classList.add('lu-detail-canvas');
        return c;
    };
    EngineRanking.prototype.rowFlags = function (row) {
        var rowany = row;
        var v = rowany.__lu__;
        if (v == null) {
            return rowany.__lu__ = {};
        }
        return v;
    };
    EngineRanking.prototype.visibleRenderedWidth = function () {
        var width = 0;
        for (var _i = 0, _a = this.visibleColumns.frozen; _i < _a.length; _i++) {
            var col = _a[_i];
            width += this.columns[col].width + COLUMN_PADDING;
        }
        for (var col = this.visibleColumns.first; col <= this.visibleColumns.last; ++col) {
            width += this.columns[col].width + COLUMN_PADDING;
        }
        if (width > 0) {
            width -= COLUMN_PADDING;
        }
        return width;
    };
    EngineRanking.prototype.renderRow = function (canvas, index, width) {
        if (width === void 0) { width = this.visibleRenderedWidth(); }
        canvas.width = width;
        canvas.style.width = width + "px";
        canvas.height = CANVAS_HEIGHT;
        var ctx = canvas.getContext('2d');
        ctx.imageSmoothingEnabled = false;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        for (var _i = 0, _a = this.visibleColumns.frozen; _i < _a.length; _i++) {
            var col = _a[_i];
            var c = this.columns[col];
            c.renderCell(ctx, index);
            var shift = c.width + COLUMN_PADDING;
            ctx.translate(shift, 0);
        }
        for (var col = this.visibleColumns.first; col <= this.visibleColumns.last; ++col) {
            var c = this.columns[col];
            c.renderCell(ctx, index);
            var shift = c.width + COLUMN_PADDING;
            ctx.translate(shift, 0);
        }
        ctx.restore();
    };
    EngineRanking.prototype.updateCanvasCell = function (canvas, index, column, x) {
        var ctx = canvas.getContext('2d');
        ctx.clearRect(x - 1, 0, column.width + 2, canvas.height);
        ctx.save();
        ctx.translate(x, 0);
        column.renderCell(ctx, index);
        ctx.restore();
    };
    EngineRanking.prototype.reindex = function () {
        this.columns.forEach(function (c, i) {
            c.index = i;
        });
    };
    EngineRanking.prototype.updateAll = function () {
        var _this = this;
        this.columns.forEach(function (c, i) {
            c.index = i;
            c.renderers = _this.ctx.createRenderer(c.c);
        });
        this._context = Object.assign({}, this._context, {
            column: nonUniformContext(this.columns.map(function (w) { return w.width; }), 100, COLUMN_PADDING)
        });
        _super.prototype.recreate.call(this);
        this.events.fire(EngineRanking.EVENT_WIDTH_CHANGED);
    };
    EngineRanking.prototype.updateBody = function () {
        var _this = this;
        if (this.hidden) {
            return;
        }
        this.events.fire(EngineRanking.EVENT_WIDTH_CHANGED);
        _super.prototype.forEachRow.call(this, function (row, rowIndex) { return _this.updateRow(row, rowIndex); });
    };
    EngineRanking.prototype.updateHeaderOf = function (col) {
        var i = this._context.columns.findIndex(function (d) { return d.c === col; });
        if (i < 0) {
            return false;
        }
        var node = this.header.children[i];
        var column = this._context.columns[i];
        if (node && column) {
            this.updateHeader(node, column);
        }
        return node && column;
    };
    EngineRanking.prototype.createRow = function (node, rowIndex) {
        node.classList.add('lu-row');
        this.roptions.customRowUpdate(node, rowIndex);
        if (this.highlightHandler.enabled) {
            node.addEventListener('mouseenter', this.highlightHandler.enter, {
                passive: true
            });
            this.rowFlags(node).highlight = true;
        }
        var isGroup = this.renderCtx.isGroup(rowIndex);
        if (isGroup) {
            node.dataset.agg = 'group';
            _super.prototype.createRow.call(this, node, rowIndex);
            return;
        }
        var _a = this.renderCtx.getRow(rowIndex), i = _a.i, meta = _a.meta;
        node.classList.toggle('le-highlighted', this.highlight === i);
        node.dataset.i = i.toString();
        node.dataset.agg = 'detail';
        if (!meta) {
            delete node.dataset.meta;
        }
        else {
            node.dataset.meta = meta;
        }
        this.selection.updateState(node, i);
        this.selection.add(node);
        var lod = this.roptions.levelOfDetail(rowIndex);
        if (lod === 'high') {
            delete node.dataset.lod;
        }
        else {
            node.dataset.lod = lod;
        }
        if (lod === 'high' || meta || this.ctx.provider.isSelected(i)) {
            _super.prototype.createRow.call(this, node, rowIndex);
            return;
        }
        var canvas = this.selectCanvas();
        node.appendChild(canvas);
        this.renderRow(canvas, rowIndex);
        node.addEventListener('mouseenter', this.canvasMouseHandler.enter, {
            passive: true
        });
    };
    EngineRanking.prototype.updateRow = function (node, rowIndex, forcedLod) {
        this.roptions.customRowUpdate(node, rowIndex);
        var computedLod = this.roptions.levelOfDetail(rowIndex);
        var lod = forcedLod ? forcedLod : computedLod;
        var wasLod = node.dataset.lod || 'high';
        var isGroup = this.renderCtx.isGroup(rowIndex);
        var wasGroup = node.dataset.agg === 'group';
        if (computedLod === 'high') {
            delete node.dataset.lod;
        }
        else {
            node.dataset.lod = computedLod;
        }
        if (this.highlightHandler.enabled && !this.rowFlags(node).highlight) {
            node.addEventListener('mouseenter', this.highlightHandler.enter, {
                passive: true
            });
            this.rowFlags(node).highlight = true;
        }
        node.removeEventListener('mouseenter', this.canvasMouseHandler.enter);
        if (isGroup !== wasGroup) {
            node.innerHTML = '';
            node.dataset.agg = isGroup ? 'group' : 'detail';
            if (isGroup) {
                node.dataset.i = '';
                this.selection.remove(node);
            }
            else {
                this.selection.add(node);
            }
        }
        if (isGroup) {
            node.classList.remove('le-highlighted');
            _super.prototype.updateRow.call(this, node, rowIndex);
            return;
        }
        var _a = this.renderCtx.getRow(rowIndex), i = _a.i, meta = _a.meta;
        node.classList.toggle('le-highlighted', this.highlight === i);
        node.dataset.i = i.toString();
        if (!meta) {
            delete node.dataset.meta;
        }
        else {
            node.dataset.meta = meta;
        }
        this.selection.updateState(node, i);
        var canvas = Array.from(node.children).find(function (d) { return d.classList.contains('lu-detail-canvas'); });
        if (lod === 'high' || meta || this.ctx.provider.isSelected(i)) {
            if (canvas) {
                this.canvasPool.push(canvas);
                canvas.remove();
            }
            _super.prototype.updateRow.call(this, node, rowIndex);
            return;
        }
        node.addEventListener('mouseenter', this.canvasMouseHandler.enter, {
            passive: true
        });
        if (wasLod !== 'high' && canvas) {
            this.renderRow(canvas, rowIndex);
            return;
        }
        node.innerHTML = '';
        node.dataset.agg = 'detail';
        var canvas2 = this.selectCanvas();
        node.appendChild(canvas2);
        this.renderRow(canvas2, rowIndex);
    };
    EngineRanking.prototype.updateCanvasBody = function () {
        var _this = this;
        var width = this.visibleRenderedWidth();
        _super.prototype.forEachRow.call(this, function (row, index) {
            if (EngineRanking.isCanvasRenderedRow(row)) {
                _this.renderRow(row.querySelector('canvas'), index, width);
            }
        });
    };
    EngineRanking.prototype.updateShifts = function (top, left) {
        _super.prototype.updateShifts.call(this, top, left);
        if (left === this.oldLeft) {
            return;
        }
        this.oldLeft = left;
        this.updateCanvasBody();
    };
    EngineRanking.prototype.enableHighlightListening = function (enable) {
        var _this = this;
        if (this.highlightHandler.enabled === enable) {
            return;
        }
        this.highlightHandler.enabled = enable;
        if (enable) {
            this.body.addEventListener('mouseleave', this.highlightHandler.leave, {
                passive: true
            });
            _super.prototype.forEachRow.call(this, function (row) {
                row.addEventListener('mouseenter', _this.highlightHandler.enter, {
                    passive: true
                });
                _this.rowFlags(row).highlight = true;
            });
            return;
        }
        this.body.removeEventListener('mouseleave', this.highlightHandler.leave);
        _super.prototype.forEachRow.call(this, function (row) {
            row.removeEventListener('mouseenter', _this.highlightHandler.enter);
            _this.rowFlags(row).highlight = false;
        });
    };
    EngineRanking.prototype.updateHoveredRow = function (row, hover) {
        var isCanvas = EngineRanking.isCanvasRenderedRow(row);
        if (isCanvas !== hover) {
            return;
        }
        var index = parseInt(row.dataset.index, 10);
        this.updateRow(row, index, hover ? 'high' : 'low');
    };
    EngineRanking.prototype.forEachRow = function (callback, inplace) {
        if (inplace === void 0) { inplace = false; }
        var adapter = function (row, rowIndex) {
            if (EngineRanking.isCanvasRenderedRow(row)) {
                return;
            }
            callback(row, rowIndex);
        };
        return _super.prototype.forEachRow.call(this, adapter, inplace);
    };
    EngineRanking.prototype.updateSelection = function (selectedDataIndices) {
        var _this = this;
        _super.prototype.forEachRow.call(this, function (node, rowIndex) {
            if (_this.renderCtx.isGroup(rowIndex)) {
                _this.updateRow(node, rowIndex);
            }
            else {
                _this.selection.update(node, selectedDataIndices);
            }
        }, true);
    };
    EngineRanking.prototype.updateColumnWidths = function () {
        var _this = this;
        this._context.column = nonUniformContext(this._context.columns.map(function (w) { return w.width; }), 100, COLUMN_PADDING);
        _super.prototype.updateColumnWidths.call(this);
        var columns = this.context.columns;
        columns.forEach(function (column) {
            if (column instanceof MultiLevelRenderColumn) {
                column.updateWidthRule(_this.style);
            }
            column.renderers = _this.ctx.createRenderer(column.c);
        });
        this.events.fire(EngineRanking.EVENT_WIDTH_CHANGED);
    };
    EngineRanking.prototype.updateHist = function (col) {
        this.events.fire(EngineRanking.EVENT_UPDATE_HIST, col);
    };
    EngineRanking.prototype.updateColumn = function (index) {
        var _this = this;
        var columns = this.context.columns;
        var column = columns[index];
        if (!column) {
            return false;
        }
        var x = 0;
        for (var i = this.visibleColumns.first; i < index; ++i) {
            x += columns[i].width + COLUMN_PADDING;
        }
        _super.prototype.forEachRow.call(this, function (row, rowIndex) {
            if (EngineRanking.isCanvasRenderedRow(row)) {
                _this.updateCanvasCell(row.querySelector('canvas'), rowIndex, column, x);
                return;
            }
            var before = row.children[index];
            if (!before) {
                return;
            }
            var after = _this.updateCell(before, rowIndex, column);
            if (before !== after && after) {
                setColumn(after, column);
                row.replaceChild(after, before);
            }
        });
        return true;
    };
    EngineRanking.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.ranking.flatColumns.forEach(function (c) { return EngineRanking.disableListener(c); });
    };
    EngineRanking.prototype.groupData = function (data) {
        var _this = this;
        var groups = this.ranking.getGroups();
        var provider = this.ctx.provider;
        var toMeta = function (relativeIndex, length) {
            if (length === 1) {
                return 'first last';
            }
            if (relativeIndex === 0) {
                return 'first';
            }
            if (relativeIndex === length - 1) {
                return 'last';
            }
            return undefined;
        };
        if (groups.length === 1) {
            if (provider.isAggregated(this.ranking, groups[0])) {
                return [Object.assign({ rows: data }, groups[0])];
            }
            return data.map(function (r, i) { return Object.assign({ group: groups[0], relativeIndex: i, meta: toMeta(i, data.length) }, r); });
        }
        var offset = 0;
        var r = [];
        groups.forEach(function (group) {
            var length = group.order.length;
            var groupData = data.slice(offset, offset + length);
            offset += length;
            if (provider.isAggregated(_this.ranking, group)) {
                r.push(Object.assign({ rows: groupData }, group));
                return;
            }
            r.push.apply(r, groupData.map(function (r, i) { return Object.assign({
                group: group,
                relativeIndex: i,
                meta: toMeta(i, groupData.length)
            }, r); }));
        });
        return r;
    };
    EngineRanking.prototype.render = function (data, rowContext) {
        var _this = this;
        var previous = this._context;
        var previousData = this.data;
        this.data = data;
        this.renderCtx.totalNumberOfRows = data.length;
        this.columns.forEach(function (c, i) {
            c.index = i;
            c.renderers = _this.ctx.createRenderer(c.c);
        });
        this._context = Object.assign({
            columns: this.columns,
            column: nonUniformContext(this.columns.map(function (w) { return w.width; }), 100, COLUMN_PADDING)
        }, rowContext);
        if (!this.bodyScroller) {
            return;
        }
        return _super.prototype.recreate.call(this, this.roptions.animation ? lineupAnimation(previous, previousData, this.data) : undefined);
    };
    EngineRanking.prototype.setHighlight = function (dataIndex) {
        this.highlight = dataIndex;
        var old = this.body.querySelector("[data-i].le-highlighted");
        if (old) {
            old.classList.remove('le-highlighted');
        }
        if (dataIndex < 0) {
            return;
        }
        var item = this.body.querySelector("[data-i=\"" + dataIndex + "\"]");
        if (item) {
            item.classList.add('le-highlighted');
        }
        return item != null;
    };
    EngineRanking.prototype.findNearest = function (dataIndices) {
        var _this = this;
        var index = dataIndices.find(function (d) { return Boolean(_this.body.querySelectorAll("[data-i=\"" + d + "\"]")); });
        if (index != null) {
            return index;
        }
        var visible = this.visible;
        var lookFor = new Set(dataIndices);
        var firstBeforePos = -1;
        var firstAfterPos = -1;
        for (var i = visible.first; i >= 0; --i) {
            var d = this.data[i];
            if (!isGroup(d) && lookFor.has(d.i)) {
                firstBeforePos = i;
                break;
            }
        }
        for (var i = visible.last; i < this.data.length; ++i) {
            var d = this.data[i];
            if (!isGroup(d) && lookFor.has(d.i)) {
                firstAfterPos = i;
                break;
            }
        }
        if (firstBeforePos < 0 && firstBeforePos < 0) {
            return -1;
        }
        var nearestPos = (firstBeforePos >= 0 && (visible.first - firstBeforePos) < (firstAfterPos - visible.last)) ? firstBeforePos : firstAfterPos;
        return this.data[nearestPos].i;
    };
    EngineRanking.prototype.scrollIntoView = function (dataIndex) {
        var _this = this;
        var item = this.body.querySelector("[data-i=\"" + dataIndex + "\"]");
        if (item) {
            item.scrollIntoView(true);
            return true;
        }
        var index = this.data.findIndex(function (d) { return !isGroup(d) && d.i === dataIndex; });
        if (index < 0) {
            return false;
        }
        var posOf = function () {
            var c = _this._context;
            if (c.exceptions.length === 0 || index < c.exceptions[0].index) {
                return index * c.defaultRowHeight;
            }
            var before = c.exceptions.reverse().find(function (d) { return d.index <= index; });
            if (!before) {
                return -1;
            }
            if (before.index === index) {
                return before.y;
            }
            var regular = index - before.index - 1;
            return before.y2 + regular * c.defaultRowHeight;
        };
        var pos = posOf();
        if (pos < 0) {
            return false;
        }
        var scroller = this.bodyScroller;
        if (!scroller) {
            return false;
        }
        var top = scroller.scrollTop;
        scroller.scrollTop = Math.min(pos, scroller.scrollHeight - scroller.clientHeight);
        this.onScrolledVertically(scroller.scrollTop, scroller.clientHeight, top < scroller.scrollTop);
        var found = this.body.querySelector("[data-i=\"" + dataIndex + "\"]");
        if (found) {
            found.scrollIntoView(true);
            return true;
        }
        return false;
    };
    EngineRanking.prototype.getHighlight = function () {
        var item = this.body.querySelector("[data-i]:hover, [data-i].le-highlighted");
        if (item) {
            return parseInt(item.dataset.i, 10);
        }
        return this.highlight;
    };
    EngineRanking.prototype.createCol = function (c, index) {
        var _this = this;
        var col = (isMultiLevelColumn(c) && !c.getCollapsed()) ? new MultiLevelRenderColumn(c, index, this.renderCtx, this.roptions.flags) : new RenderColumn(c, index, this.renderCtx, this.roptions.flags);
        c.on(Column.EVENT_WIDTH_CHANGED + ".body", function () {
            _this.delayedUpdateColumnWidths();
        });
        c.on(ValueColumn.EVENT_DATA_LOADED + ".hist", function () { return _this.updateHist(c); });
        var debounceUpdate = debounce(function () {
            var valid = _this.updateColumn(col.index);
            if (!valid) {
                EngineRanking.disableListener(c);
            }
        }, 25);
        c.on([Column.EVENT_RENDERER_TYPE_CHANGED + ".body", Column.EVENT_GROUP_RENDERER_TYPE_CHANGED + ".body"], function () {
            col.renderers = _this.ctx.createRenderer(c);
            debounceUpdate();
        });
        var that = this;
        c.on(Column.EVENT_DIRTY_HEADER + ".body", function () {
            var valid = that.updateHeaderOf(col.c);
            if (!valid) {
                EngineRanking.disableListener(c);
            }
            if (this.primaryType === Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED || this.primaryType === Column.EVENT_LABEL_CHANGED || this.primaryType === Column.EVENT_METADATA_CHANGED) {
                return;
            }
            self.setTimeout(function () { return that.updateHist(col.c); }, 50);
        });
        c.on(Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED + ".body", function () {
            col.renderers = _this.ctx.createRenderer(c);
            var valid = _this.updateHeaderOf(col.c);
            if (!valid) {
                EngineRanking.disableListener(c);
            }
        });
        c.on(Column.EVENT_DIRTY_VALUES + ".body", debounceUpdate);
        if (isMultiLevelColumn(c) && !c.getCollapsed()) {
            col.updateWidthRule(this.style);
            c.on(StackColumn.EVENT_MULTI_LEVEL_CHANGED + ".body", function () {
                col.updateWidthRule(_this.style);
            });
            c.on(StackColumn.EVENT_MULTI_LEVEL_CHANGED + ".bodyUpdate", debounceUpdate);
        }
        return col;
    };
    EngineRanking.isCanvasRenderedRow = function (row) {
        return row.dataset.lod === 'low' && row.childElementCount === 1 && row.firstElementChild.classList.contains('lu-detail-canvas');
    };
    EngineRanking.disableListener = function (c) {
        c.on(Column.EVENT_WIDTH_CHANGED + ".body", null);
        c.on(ValueColumn.EVENT_DATA_LOADED + ".hist", null);
        c.on([Column.EVENT_RENDERER_TYPE_CHANGED + ".body", Column.EVENT_GROUP_RENDERER_TYPE_CHANGED + ".body", Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED + ".body", Column.EVENT_LABEL_CHANGED + ".body"], null);
        c.on(Ranking.EVENT_DIRTY_HEADER + ".body", null);
        c.on(Ranking.EVENT_DIRTY_VALUES + ".body", null);
        if (!(isMultiLevelColumn(c))) {
            return;
        }
        c.on(StackColumn.EVENT_MULTI_LEVEL_CHANGED + ".body", null);
        c.on(StackColumn.EVENT_MULTI_LEVEL_CHANGED + ".bodyUpdate", null);
    };
    EngineRanking.EVENT_WIDTH_CHANGED = RankingEvents.EVENT_WIDTH_CHANGED;
    EngineRanking.EVENT_UPDATE_DATA = RankingEvents.EVENT_UPDATE_DATA;
    EngineRanking.EVENT_UPDATE_HIST = RankingEvents.EVENT_UPDATE_HIST;
    EngineRanking.EVENT_HIGHLIGHT_CHANGED = RankingEvents.EVENT_HIGHLIGHT_CHANGED;
    return EngineRanking;
}(ACellTableSection));
export default EngineRanking;
//# sourceMappingURL=EngineRanking.js.map