import { __extends } from "tslib";
import { round } from '../internal';
import { gridClass } from '../renderer/MultiLevelCellRenderer';
import { COLUMN_PADDING } from '../styles';
import { createHeader, updateHeader } from './header';
import RenderColumn from './RenderColumn';
var MultiLevelRenderColumn = (function (_super) {
    __extends(MultiLevelRenderColumn, _super);
    function MultiLevelRenderColumn(c, index, ctx, flags) {
        var _this = _super.call(this, c, index, ctx, flags) || this;
        _this.summaries = [];
        return _this;
    }
    Object.defineProperty(MultiLevelRenderColumn.prototype, "mc", {
        get: function () {
            return this.c;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiLevelRenderColumn.prototype, "width", {
        get: function () {
            return this.c.getWidth() + COLUMN_PADDING * this.mc.length;
        },
        enumerable: true,
        configurable: true
    });
    MultiLevelRenderColumn.prototype.createHeader = function () {
        var _this = this;
        var node = _super.prototype.createHeader.call(this);
        var wrapper = this.ctx.document.createElement('div');
        wrapper.classList.add('lu-nested');
        wrapper.classList.add(gridClass(this.c));
        node.appendChild(wrapper);
        this.summaries.splice(0, this.summaries.length);
        this.mc.children.forEach(function (cc, i) {
            var n = createHeader(cc, _this.ctx, {
                mergeDropAble: false,
                dragAble: _this.flags.advancedModelFeatures,
                rearrangeAble: _this.flags.advancedModelFeatures,
                resizeable: _this.flags.advancedModelFeatures
            });
            n.classList.add('lu-header');
            n.style.gridColumnStart = (i + 1).toString();
            wrapper.appendChild(n);
            if (!_this.renderers || !_this.renderers.summary) {
                return;
            }
            var summary = _this.ctx.summaryRenderer(cc, false);
            n.insertAdjacentHTML('beforeend', summary.template);
            var summaryNode = n.lastElementChild;
            summaryNode.classList.add('lu-summary');
            summaryNode.dataset.renderer = cc.getSummaryRenderer();
            _this.summaries.push(summary);
            summary.update(summaryNode, _this.ctx.statsOf(cc));
        });
        this.updateNested(wrapper);
        return node;
    };
    MultiLevelRenderColumn.prototype.updateHeader = function (node) {
        _super.prototype.updateHeader.call(this, node);
        var wrapper = node.querySelector('.lu-nested');
        if (!wrapper) {
            return node;
        }
        node.appendChild(wrapper);
        this.updateNested(wrapper);
        return node;
    };
    MultiLevelRenderColumn.prototype.updateWidthRule = function (style) {
        var mc = this.mc;
        var widths = mc.children.map(function (c) { return "minmax(0, " + round(c.getWidth()) + "fr)"; });
        var clazz = gridClass(this.c);
        style.updateRule("stacked-" + this.c.id, ".lineup-engine ." + clazz + " {\n      display: grid;\n      grid-template-columns: " + widths.join(' ') + ";\n    }");
        return clazz;
    };
    MultiLevelRenderColumn.prototype.updateNested = function (wrapper) {
        var _this = this;
        var sub = this.mc.children;
        var children = Array.from(wrapper.children);
        sub.forEach(function (c, i) {
            var node = children[i];
            updateHeader(node, c);
            if (!_this.renderers || !_this.renderers.summary) {
                return;
            }
            var summary = node.querySelector('.lu-summary');
            var oldRenderer = summary.dataset.renderer;
            var currentRenderer = c.getSummaryRenderer();
            if (oldRenderer !== currentRenderer) {
                var renderer = _this.ctx.summaryRenderer(c, false);
                summary.remove();
                summary.innerHTML = renderer.template;
                summary = summary.firstElementChild;
                summary.classList.add('lu-summary');
                summary.dataset.renderer = currentRenderer;
                _this.summaries[i] = renderer;
                node.appendChild(summary);
            }
            _this.summaries[i].update(summary, _this.ctx.statsOf(c));
        });
    };
    return MultiLevelRenderColumn;
}(RenderColumn));
export default MultiLevelRenderColumn;
//# sourceMappingURL=MultiLevelRenderColumn.js.map