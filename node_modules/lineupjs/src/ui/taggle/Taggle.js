import { __extends } from "tslib";
import { defaultOptions } from '../../config';
import merge from '../../internal/merge';
import { ALineUp } from '../ALineUp';
import SidePanel from '../panel/SidePanel';
import spaceFillingRule from './spaceFillingRule';
import TaggleRenderer from './TaggleRenderer';
var Taggle = (function (_super) {
    __extends(Taggle, _super);
    function Taggle(node, data, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, node, data, options && options.ignoreUnsupportedBrowser === true) || this;
        _this.options = defaultOptions();
        merge(_this.options, options, {
            violationChanged: function (_rule, violation) { return _this.setViolation(violation); }
        });
        if (!_this.isBrowserSupported) {
            _this.spaceFilling = null;
            _this.renderer = null;
            _this.panel = null;
            return _this;
        }
        _this.node.classList.add('lu-taggle', 'lu');
        _this.renderer = new TaggleRenderer(data, _this.node, _this.options);
        console.assert(_this.node.ownerDocument != null);
        _this.panel = new SidePanel(_this.renderer.ctx, _this.node.ownerDocument, {
            collapseable: _this.options.sidePanelCollapsed ? 'collapsed' : true,
            hierarchy: _this.options.hierarchyIndicator && _this.options.flags.advancedRankingFeatures
        });
        _this.renderer.pushUpdateAble(function (ctx) { return _this.panel.update(ctx); });
        _this.node.insertBefore(_this.panel.node, _this.node.firstChild);
        {
            _this.panel.node.insertAdjacentHTML('afterbegin', "<div class=\"lu-rule-button-chooser lu-feature-advanced lu-feature-ui\"><label>\n            <input type=\"checkbox\">\n            <span>Overview</span>\n            <div></div>\n          </label></div>");
            var spaceFilling_1 = spaceFillingRule(_this.options);
            _this.spaceFilling = _this.node.querySelector('.lu-rule-button-chooser');
            var input = _this.spaceFilling.querySelector('input');
            input.onchange = function () {
                var selected = _this.spaceFilling.classList.toggle('chosen');
                self.setTimeout(function () { return _this.renderer.switchRule(selected ? spaceFilling_1 : null); });
            };
            if (_this.options.overviewMode) {
                input.checked = true;
                _this.spaceFilling.classList.toggle('chosen');
                _this.renderer.switchRule(spaceFilling_1);
            }
        }
        _this.forward(_this.renderer, ALineUp.EVENT_HIGHLIGHT_CHANGED + ".main");
        return _this;
    }
    Taggle.prototype.setViolation = function (violation) {
        violation = violation || '';
        if (this.spaceFilling) {
            this.spaceFilling.classList.toggle('violated', Boolean(violation));
            this.spaceFilling.lastElementChild.innerHTML = violation.replace(/\n/g, '<br>');
        }
    };
    Taggle.prototype.destroy = function () {
        this.node.classList.remove('lu-taggle', 'lu');
        if (this.renderer) {
            this.renderer.destroy();
        }
        if (this.panel) {
            this.panel.destroy();
        }
        _super.prototype.destroy.call(this);
    };
    Taggle.prototype.update = function () {
        if (this.renderer) {
            this.renderer.update();
        }
    };
    Taggle.prototype.setHighlight = function (dataIndex, scrollIntoView) {
        if (scrollIntoView === void 0) { scrollIntoView = true; }
        return this.renderer != null && this.renderer.setHighlight(dataIndex, scrollIntoView);
    };
    Taggle.prototype.getHighlight = function () {
        return this.renderer ? this.renderer.getHighlight() : -1;
    };
    Taggle.prototype.enableHighlightListening = function (enable) {
        if (this.renderer) {
            this.renderer.enableHighlightListening(enable);
        }
    };
    Taggle.prototype.setDataProvider = function (data, dump) {
        _super.prototype.setDataProvider.call(this, data, dump);
        if (!this.renderer) {
            return;
        }
        this.renderer.setDataProvider(data);
        this.update();
        this.panel.update(this.renderer.ctx);
    };
    return Taggle;
}(ALineUp));
export default Taggle;
//# sourceMappingURL=Taggle.js.map