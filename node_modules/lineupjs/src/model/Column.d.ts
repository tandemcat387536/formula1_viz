import AEventDispatcher from '../internal/AEventDispatcher';
import { IColumnDesc, IDataRow, IGroup, IGroupData } from './interfaces';
import Ranking from './Ranking';
import { IEventListener } from '../internal/AEventDispatcher';
export { IColumnDesc } from './interfaces';
export interface IFlatColumn {
    readonly col: Column;
    readonly offset: number;
    readonly width: number;
}
export interface IColumnParent {
    remove(col: Column): boolean;
    insert(col: Column, index?: number): Column | null;
    insertAfter(col: Column, reference: Column): Column | null;
    move(col: Column, index?: number): Column | null;
    moveAfter(col: Column, reference: Column): Column | null;
    findMyRanker(): Ranking | null;
    readonly fqid: string;
    indexOf(col: Column): number;
    at(index: number): Column;
    readonly fqpath: string;
}
export interface IColumnMetaData {
    label: string;
    description: string;
}
export declare function widthChanged(previous: number, current: number): void;
export declare function labelChanged(previous: string, current: string): void;
export declare function metaDataChanged(previous: IColumnMetaData, current: IColumnMetaData): void;
export declare function dirty(): void;
export declare function dirtyHeader(): void;
export declare function dirtyValues(): void;
export declare function rendererTypeChanged(previous: string, current: string): void;
export declare function groupRendererChanged(previous: string, current: string): void;
export declare function summaryRendererChanged(previous: string, current: string): void;
export declare function visibilityChanged(previous: boolean, current: boolean): void;
export default class Column extends AEventDispatcher {
    readonly desc: Readonly<IColumnDesc>;
    static readonly DEFAULT_COLOR = "#C1C1C1";
    static readonly FLAT_ALL_COLUMNS = -1;
    static readonly EVENT_WIDTH_CHANGED = "widthChanged";
    static readonly EVENT_LABEL_CHANGED = "labelChanged";
    static readonly EVENT_METADATA_CHANGED = "metaDataChanged";
    static readonly EVENT_DIRTY = "dirty";
    static readonly EVENT_DIRTY_HEADER = "dirtyHeader";
    static readonly EVENT_DIRTY_VALUES = "dirtyValues";
    static readonly EVENT_RENDERER_TYPE_CHANGED = "rendererTypeChanged";
    static readonly EVENT_GROUP_RENDERER_TYPE_CHANGED = "groupRendererChanged";
    static readonly EVENT_SUMMARY_RENDERER_TYPE_CHANGED = "summaryRendererChanged";
    static readonly EVENT_VISIBILITY_CHANGED = "visibilityChanged";
    private uid;
    private width;
    parent: Readonly<IColumnParent> | null;
    private metadata;
    private renderer;
    private groupRenderer;
    private summaryRenderer;
    private visible;
    constructor(id: string, desc: Readonly<IColumnDesc>);
    readonly fixed: boolean;
    readonly frozen: boolean;
    readonly id: string;
    assignNewId(idGenerator: () => string): void;
    readonly label: string;
    readonly description: string;
    readonly fqid: string;
    readonly fqpath: string;
    protected createEventList(): string[];
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getWidth(): number;
    hide(): void;
    show(): void;
    isVisible(): boolean;
    getVisible(): boolean;
    setVisible(value: boolean): void;
    flatten(r: IFlatColumn[], offset: number, _levelsToGo?: number, _padding?: number): number;
    setWidth(value: number): void;
    setWidthImpl(value: number): void;
    setMetaData(value: Readonly<IColumnMetaData>): void;
    getMetaData(): Readonly<IColumnMetaData>;
    sortByMe(ascending?: boolean, priority?: number): boolean;
    groupByMe(): boolean;
    isGroupedBy(): number;
    toggleMySorting(): boolean;
    private isSortedByMeImpl;
    isSortedByMe(): {
        asc: "desc" | "asc" | undefined;
        priority: number | undefined;
    };
    groupSortByMe(ascending?: boolean, priority?: number): boolean;
    toggleMyGroupSorting(): boolean;
    isGroupSortedByMe(): {
        asc: "desc" | "asc" | undefined;
        priority: number | undefined;
    };
    removeMe(): boolean;
    attach(parent: IColumnParent): void;
    detach(): void;
    insertAfterMe(col: Column): boolean;
    findMyRanker(): Ranking | null;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, _factory: (dump: any) => Column | null): void;
    getLabel(row: IDataRow): string;
    getValue(_row: IDataRow): any;
    getExportValue(row: IDataRow, format: 'text' | 'json'): any;
    getColor(_row: IDataRow): string;
    isMissing(row: IDataRow): boolean;
    compare(_a: IDataRow, _b: IDataRow): number;
    group(_row: IDataRow): IGroup;
    groupCompare(a: IGroupData, b: IGroupData): number;
    isFiltered(): boolean;
    filter(row: IDataRow): boolean;
    getRenderer(): string;
    getGroupRenderer(): string;
    getSummaryRenderer(): string;
    setRenderer(renderer: string): void;
    protected setDefaultRenderer(renderer: string): void;
    setGroupRenderer(renderer: string): void;
    protected setDefaultGroupRenderer(renderer: string): void;
    setSummaryRenderer(renderer: string): void;
    protected setDefaultSummaryRenderer(renderer: string): void;
    protected setDefaultWidth(width: number): void;
    markDirty(type?: 'header' | 'values' | 'all'): void;
}
