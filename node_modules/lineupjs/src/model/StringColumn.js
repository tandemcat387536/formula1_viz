import { __decorate, __extends } from "tslib";
import { Category, toolbar, dialogAddons } from './annotations';
import Column from './Column';
import { FIRST_IS_MISSING, missingGroup } from './missing';
import ValueColumn from './ValueColumn';
import { equal } from '../internal';
import { defaultGroup } from './Group';
export var EAlignment;
(function (EAlignment) {
    EAlignment["left"] = "left";
    EAlignment["center"] = "center";
    EAlignment["right"] = "right";
})(EAlignment || (EAlignment = {}));
export var EStringGroupCriteriaType;
(function (EStringGroupCriteriaType) {
    EStringGroupCriteriaType["value"] = "value";
    EStringGroupCriteriaType["startsWith"] = "startsWith";
    EStringGroupCriteriaType["regex"] = "regex";
})(EStringGroupCriteriaType || (EStringGroupCriteriaType = {}));
var StringColumn = (function (_super) {
    __extends(StringColumn, _super);
    function StringColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.currentFilter = null;
        _this.currentGroupCriteria = {
            type: EStringGroupCriteriaType.startsWith,
            values: []
        };
        _this.setDefaultWidth(200);
        _this.alignment = desc.alignment || EAlignment.left;
        _this.escape = desc.escape !== false;
        return _this;
    }
    StringColumn_1 = StringColumn;
    StringColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([StringColumn_1.EVENT_GROUPING_CHANGED, StringColumn_1.EVENT_FILTER_CHANGED]);
    };
    StringColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    StringColumn.prototype.getValue = function (row) {
        var v = _super.prototype.getValue.call(this, row);
        return v == null ? '' : String(v);
    };
    StringColumn.prototype.getLabel = function (row) {
        return this.getValue(row) || '';
    };
    StringColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        if (this.currentFilter instanceof RegExp) {
            r.filter = "REGEX:" + this.currentFilter.source;
        }
        else {
            r.filter = this.currentFilter;
        }
        if (this.currentGroupCriteria) {
            var _a = this.currentGroupCriteria, type_1 = _a.type, values = _a.values;
            r.groupCriteria = {
                type: type_1,
                values: values.map(function (value) { return type_1 + ":" + (value instanceof RegExp && type_1 === EStringGroupCriteriaType.regex ? value.source : value); })
            };
        }
        return r;
    };
    StringColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (dump.filter && dump.filter.startsWith('REGEX:')) {
            this.currentFilter = new RegExp(dump.filter.slice(6), 'gm');
        }
        else {
            this.currentFilter = dump.filter || null;
        }
        if (dump.groupCriteria) {
            var _a = dump.groupCriteria, type_2 = _a.type, values = _a.values;
            this.currentGroupCriteria = {
                type: type_2,
                values: values.map(function (value) { return type_2 === EStringGroupCriteriaType.regex ? new RegExp(value, 'gm') : value; })
            };
        }
    };
    StringColumn.prototype.isFiltered = function () {
        return this.currentFilter != null;
    };
    StringColumn.prototype.filter = function (row) {
        if (!this.isFiltered()) {
            return true;
        }
        var r = this.getLabel(row);
        var filter = this.currentFilter;
        if (filter === StringColumn_1.FILTER_MISSING) {
            return r != null && r.trim() !== '';
        }
        if (typeof filter === 'string' && filter.length > 0) {
            return r !== '' && r.toLowerCase().indexOf(filter.toLowerCase()) >= 0;
        }
        if (filter instanceof RegExp) {
            return r !== '' && r.match(filter) != null;
        }
        return true;
    };
    StringColumn.prototype.getFilter = function () {
        return this.currentFilter;
    };
    StringColumn.prototype.setFilter = function (filter) {
        if (filter === '') {
            filter = null;
        }
        if (this.currentFilter === filter) {
            return;
        }
        this.fire([StringColumn_1.EVENT_FILTER_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.currentFilter, this.currentFilter = filter);
    };
    StringColumn.prototype.getGroupCriteria = function () {
        return this.currentGroupCriteria;
    };
    StringColumn.prototype.setGroupCriteria = function (value) {
        if (equal(this.currentGroupCriteria, value)) {
            return;
        }
        var bak = this.getGroupCriteria();
        this.currentGroupCriteria = value;
        this.fire([StringColumn_1.EVENT_GROUPING_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], bak, value);
    };
    StringColumn.prototype.compare = function (a, b) {
        var aValue = this.getLabel(a);
        var bValue = this.getLabel(b);
        if (aValue === '') {
            return bValue === '' ? 0 : FIRST_IS_MISSING;
        }
        if (bValue === '') {
            return -FIRST_IS_MISSING;
        }
        return aValue.toLowerCase().localeCompare(bValue.toLowerCase());
    };
    StringColumn.prototype.group = function (row) {
        if (this.isMissing(row)) {
            return missingGroup;
        }
        var rowValue = this.getLabel(row);
        if (!rowValue) {
            return defaultGroup;
        }
        var _a = this.currentGroupCriteria, type = _a.type, values = _a.values;
        if (type === EStringGroupCriteriaType.value) {
            return {
                name: rowValue,
                color: defaultGroup.color
            };
        }
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var groupValue = values_1[_i];
            if (type === EStringGroupCriteriaType.startsWith && typeof groupValue === 'string' && rowValue.startsWith(groupValue)) {
                return {
                    name: groupValue,
                    color: defaultGroup.color
                };
            }
            if (type === EStringGroupCriteriaType.regex && groupValue instanceof RegExp && groupValue.test(rowValue)) {
                return {
                    name: groupValue.source,
                    color: defaultGroup.color
                };
            }
        }
        return defaultGroup;
    };
    var StringColumn_1;
    StringColumn.EVENT_FILTER_CHANGED = 'filterChanged';
    StringColumn.EVENT_GROUPING_CHANGED = 'groupingChanged';
    StringColumn.FILTER_MISSING = '__FILTER_MISSING';
    StringColumn = StringColumn_1 = __decorate([
        toolbar('search', 'groupBy', 'filterString'),
        dialogAddons('group', 'groupString'),
        Category('string')
    ], StringColumn);
    return StringColumn;
}(ValueColumn));
export default StringColumn;
//# sourceMappingURL=StringColumn.js.map