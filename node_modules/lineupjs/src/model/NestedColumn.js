import { __extends } from "tslib";
import MultiLevelCompositeColumn from './MultiLevelCompositeColumn';
export function createNestedDesc(label) {
    if (label === void 0) { label = 'Nested'; }
    return { type: 'nested', label: label };
}
var NestedColumn = (function (_super) {
    __extends(NestedColumn, _super);
    function NestedColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NestedColumn.prototype.compare = function (a, b) {
        var c = this.children;
        for (var _i = 0, c_1 = c; _i < c_1.length; _i++) {
            var ci = c_1[_i];
            var ciResult = ci.compare(a, b);
            if (ciResult !== 0) {
                return ciResult;
            }
        }
        return 0;
    };
    NestedColumn.prototype.getLabel = function (row) {
        return this.children.map(function (d) { return d.getLabel(row); }).join(';');
    };
    NestedColumn.prototype.getValue = function (row) {
        return this.children.map(function (d) { return d.getValue(row); }).join(';');
    };
    return NestedColumn;
}(MultiLevelCompositeColumn));
export default NestedColumn;
//# sourceMappingURL=NestedColumn.js.map