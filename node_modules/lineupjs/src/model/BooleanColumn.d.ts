import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import ValueColumn, { IValueColumnDesc, dataLoaded } from './ValueColumn';
import { ICategoricalColumn, ICategory } from './ICategoricalColumn';
import { IDataRow } from './interfaces';
import { IEventListener } from '../internal/AEventDispatcher';
export interface IBooleanDesc {
    trueMarker?: string;
    falseMarker?: string;
}
export declare type IBooleanColumnDesc = IValueColumnDesc<boolean> & IBooleanDesc;
export declare function filterChanged(previous: boolean | null, current: boolean | null): void;
export default class BooleanColumn extends ValueColumn<boolean> implements ICategoricalColumn {
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    static readonly GROUP_TRUE: {
        name: string;
        color: string;
    };
    static readonly GROUP_FALSE: {
        name: string;
        color: string;
    };
    private currentFilter;
    readonly categories: ICategory[];
    constructor(id: string, desc: Readonly<IBooleanColumnDesc>);
    protected createEventList(): string[];
    on(type: typeof BooleanColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    readonly dataLength: number;
    readonly labels: string[];
    getValue(row: IDataRow): boolean;
    isMissing(): boolean;
    getCategory(row: IDataRow): ICategory;
    getColor(row: IDataRow): any;
    getLabel(row: IDataRow): any;
    getLabels(row: IDataRow): any;
    getValues(row: IDataRow): any;
    getMap(row: IDataRow): any;
    getMapLabel(row: IDataRow): any;
    getSet(row: IDataRow): Set<ICategory>;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    isFiltered(): boolean;
    filter(row: IDataRow): boolean;
    getFilter(): boolean | null;
    setFilter(filter: boolean | null): void;
    compare(a: IDataRow, b: IDataRow): 1 | -1 | 0;
    group(row: IDataRow): {
        name: string;
        color: string;
    };
}
