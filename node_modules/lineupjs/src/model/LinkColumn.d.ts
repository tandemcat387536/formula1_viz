import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import { IDataRow, IGroup } from './interfaces';
import ValueColumn, { IValueColumnDesc, dataLoaded } from './ValueColumn';
import { IEventListener } from '../internal/AEventDispatcher';
import { IStringDesc, EAlignment, IStringGroupCriteria } from './StringColumn';
export interface ILinkDesc extends IStringDesc {
    pattern?: string;
    patternTemplates?: string[];
}
export interface ILink {
    alt: string;
    href: string;
}
export declare type ILinkColumnDesc = ILinkDesc & IValueColumnDesc<string | ILink>;
export declare function filterChanged(previous: string | RegExp | null, current: string | RegExp | null): void;
export declare function groupingChanged(previous: (RegExp | string)[][], current: (RegExp | string)[][]): void;
export declare function patternChanged(previous: string, current: string): void;
export default class LinkColumn extends ValueColumn<string | ILink> {
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    static readonly EVENT_GROUPING_CHANGED = "groupingChanged";
    static readonly EVENT_PATTERN_CHANGED = "patternChanged";
    private pattern;
    private patternFunction;
    readonly patternTemplates: string[];
    private currentFilter;
    private currentGroupCriteria;
    readonly alignment: EAlignment;
    readonly escape: boolean;
    constructor(id: string, desc: Readonly<ILinkColumnDesc>);
    setPattern(pattern: string): void;
    getPattern(): string;
    protected createEventList(): string[];
    on(type: typeof LinkColumn.EVENT_PATTERN_CHANGED, listener: typeof patternChanged | null): this;
    on(type: typeof LinkColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof LinkColumn.EVENT_GROUPING_CHANGED, listener: typeof groupingChanged | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getValue(row: IDataRow): string;
    getLink(row: IDataRow): ILink | null;
    private transformValue;
    getLabel(row: IDataRow): string;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    isFiltered(): boolean;
    filter(row: IDataRow): any;
    getFilter(): string | RegExp | null;
    setFilter(filter: string | RegExp | null): any;
    getGroupCriteria(): IStringGroupCriteria;
    setGroupCriteria(value: IStringGroupCriteria): any;
    compare(a: IDataRow, b: IDataRow): any;
    group(row: IDataRow): IGroup;
}
