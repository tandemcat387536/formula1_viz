import { __decorate, __extends } from "tslib";
import { Category, toolbar } from './annotations';
import CategoricalColumn from './CategoricalColumn';
import { isCategoryIncluded, toCategories } from './ICategoricalColumn';
import { FIRST_IS_MISSING } from './missing';
import ValueColumn from './ValueColumn';
var SetColumn = (function (_super) {
    __extends(SetColumn, _super);
    function SetColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.lookup = new Map();
        _this.currentFilter = null;
        _this.separator = new RegExp(desc.separator || ';');
        _this.categories = toCategories(desc);
        _this.categories.forEach(function (d) { return _this.lookup.set(d.name, d); });
        _this.setDefaultRenderer('upset');
        _this.setDefaultGroupRenderer('upset');
        return _this;
    }
    SetColumn_1 = SetColumn;
    SetColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([SetColumn_1.EVENT_FILTER_CHANGED]);
    };
    SetColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    Object.defineProperty(SetColumn.prototype, "labels", {
        get: function () {
            return this.categories.map(function (d) { return d.label; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SetColumn.prototype, "dataLength", {
        get: function () {
            return this.categories.length;
        },
        enumerable: true,
        configurable: true
    });
    SetColumn.prototype.getValue = function (row) {
        return this.getCategories(row).map(function (d) { return d.name; });
    };
    SetColumn.prototype.getLabel = function (row) {
        return "(" + this.getCategories(row).map(function (d) { return d.label; }).join(',') + ")";
    };
    SetColumn.prototype.normalize = function (v) {
        if (typeof v === 'string') {
            return v.split(this.separator).map(function (s) { return s.trim(); });
        }
        if (Array.isArray(v)) {
            return v.map(function (v) { return String(v).trim(); });
        }
        if (v instanceof Set) {
            return Array.from(v).map(String);
        }
        return [];
    };
    SetColumn.prototype.getSet = function (row) {
        var _this = this;
        var sv = this.normalize(_super.prototype.getValue.call(this, row));
        var r = new Set();
        sv.forEach(function (n) {
            var cat = _this.lookup.get(n);
            if (cat) {
                r.add(cat);
            }
        });
        return r;
    };
    SetColumn.prototype.getCategories = function (row) {
        return Array.from(this.getSet(row)).sort(function (a, b) { return a.value === b.value ? a.label.localeCompare(b.label) : a.value - b.value; });
    };
    SetColumn.prototype.isMissing = function (row) {
        var s = this.getSet(row);
        return s.size === 0;
    };
    SetColumn.prototype.getValues = function (row) {
        var s = new Set(this.getSet(row));
        return this.categories.map(function (d) { return s.has(d); });
    };
    SetColumn.prototype.getLabels = function (row) {
        return this.getValues(row).map(String);
    };
    SetColumn.prototype.getMap = function (row) {
        return this.getCategories(row).map(function (d) { return ({ key: d.label, value: true }); });
    };
    SetColumn.prototype.getMapLabel = function (row) {
        return this.getCategories(row).map(function (d) { return ({ key: d.label, value: 'true' }); });
    };
    SetColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.filter = this.currentFilter;
        return r;
    };
    SetColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (!('filter' in dump)) {
            this.currentFilter = null;
            return;
        }
        var bak = dump.filter;
        if (typeof bak === 'string' || Array.isArray(bak)) {
            this.currentFilter = { filter: bak, filterMissing: false };
        }
        else {
            this.currentFilter = bak;
        }
    };
    SetColumn.prototype.isFiltered = function () {
        return this.currentFilter != null;
    };
    SetColumn.prototype.filter = function (row) {
        var _this = this;
        if (!this.currentFilter) {
            return true;
        }
        return Array.from(this.getSet(row)).some(function (s) { return isCategoryIncluded(_this.currentFilter, s); });
    };
    SetColumn.prototype.getFilter = function () {
        return CategoricalColumn.prototype.getFilter.call(this);
    };
    SetColumn.prototype.setFilter = function (filter) {
        return CategoricalColumn.prototype.setFilter.call(this, filter);
    };
    SetColumn.prototype.compare = function (a, b) {
        var av = this.getSet(a);
        var bv = this.getSet(b);
        if (av.size === 0) {
            return bv.size === 0 ? 0 : FIRST_IS_MISSING;
        }
        if (bv.size === 0) {
            return -FIRST_IS_MISSING;
        }
        if (av.size !== bv.size) {
            return av.size - bv.size;
        }
        for (var _i = 0, _a = this.categories; _i < _a.length; _i++) {
            var cat = _a[_i];
            if (av.has(cat)) {
                return -1;
            }
            if (bv.has(cat)) {
                return +1;
            }
        }
        return 0;
    };
    var SetColumn_1;
    SetColumn.EVENT_FILTER_CHANGED = CategoricalColumn.EVENT_FILTER_CHANGED;
    SetColumn = SetColumn_1 = __decorate([
        toolbar('filterCategorical'),
        Category('categorical')
    ], SetColumn);
    return SetColumn;
}(ValueColumn));
export default SetColumn;
//# sourceMappingURL=SetColumn.js.map