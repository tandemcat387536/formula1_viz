import { __extends } from "tslib";
import AEventDispatcher from '../internal/AEventDispatcher';
import { similar } from '../internal/math';
import { fixCSS } from '../internal/utils';
import { defaultGroup } from './Group';
import { isMissingValue } from './missing';
import { isSortingAscByDefault } from './annotations';
var Column = (function (_super) {
    __extends(Column, _super);
    function Column(id, desc) {
        var _this = _super.call(this) || this;
        _this.desc = desc;
        _this.width = 100;
        _this.parent = null;
        _this.uid = fixCSS(id);
        _this.renderer = _this.desc.renderer || _this.desc.type;
        _this.groupRenderer = _this.desc.groupRenderer || _this.desc.type;
        _this.summaryRenderer = _this.desc.summaryRenderer || _this.desc.type;
        _this.width = _this.desc.width != null && _this.desc.width > 0 ? _this.desc.width : 100;
        _this.visible = _this.desc.visible !== false;
        _this.metadata = {
            label: desc.label || _this.id,
            description: desc.description || ''
        };
        return _this;
    }
    Object.defineProperty(Column.prototype, "fixed", {
        get: function () {
            return Boolean(this.desc.fixed);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "frozen", {
        get: function () {
            return Boolean(this.desc.frozen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "id", {
        get: function () {
            return this.uid;
        },
        enumerable: true,
        configurable: true
    });
    Column.prototype.assignNewId = function (idGenerator) {
        this.uid = fixCSS(idGenerator());
    };
    Object.defineProperty(Column.prototype, "label", {
        get: function () {
            return this.metadata.label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "description", {
        get: function () {
            return this.metadata.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "fqid", {
        get: function () {
            return this.parent ? this.parent.fqid + "_" + this.id : this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "fqpath", {
        get: function () {
            return this.parent ? this.parent.fqpath + "@" + this.parent.indexOf(this) : '';
        },
        enumerable: true,
        configurable: true
    });
    Column.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([Column.EVENT_WIDTH_CHANGED,
            Column.EVENT_LABEL_CHANGED, Column.EVENT_METADATA_CHANGED, Column.EVENT_VISIBILITY_CHANGED, Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED,
            Column.EVENT_RENDERER_TYPE_CHANGED, Column.EVENT_GROUP_RENDERER_TYPE_CHANGED,
            Column.EVENT_DIRTY, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES]);
    };
    Column.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    Column.prototype.getWidth = function () {
        return this.width;
    };
    Column.prototype.hide = function () {
        this.setVisible(false);
    };
    Column.prototype.show = function () {
        this.setVisible(true);
    };
    Column.prototype.isVisible = function () {
        return this.visible;
    };
    Column.prototype.getVisible = function () {
        return this.isVisible();
    };
    Column.prototype.setVisible = function (value) {
        if (this.visible === value) {
            return;
        }
        this.fire([Column.EVENT_VISIBILITY_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.visible, this.visible = value);
    };
    Column.prototype.flatten = function (r, offset, _levelsToGo, _padding) {
        if (_levelsToGo === void 0) { _levelsToGo = 0; }
        if (_padding === void 0) { _padding = 0; }
        var w = this.getWidth();
        r.push({ col: this, offset: offset, width: w });
        return w;
    };
    Column.prototype.setWidth = function (value) {
        if (similar(this.width, value, 0.5)) {
            return;
        }
        this.fire([Column.EVENT_WIDTH_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.width, this.width = value);
    };
    Column.prototype.setWidthImpl = function (value) {
        this.width = value;
    };
    Column.prototype.setMetaData = function (value) {
        if (value.label === this.label && this.description === value.description) {
            return;
        }
        var bak = this.getMetaData();
        this.metadata = {
            label: value.label,
            description: value.description
        };
        this.fire([Column.EVENT_LABEL_CHANGED, Column.EVENT_METADATA_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY], bak, this.getMetaData());
    };
    Column.prototype.getMetaData = function () {
        return Object.assign({}, this.metadata);
    };
    Column.prototype.sortByMe = function (ascending, priority) {
        if (ascending === void 0) { ascending = isSortingAscByDefault(this); }
        if (priority === void 0) { priority = 0; }
        var r = this.findMyRanker();
        if (r) {
            return r.sortBy(this, ascending, priority);
        }
        return false;
    };
    Column.prototype.groupByMe = function () {
        var r = this.findMyRanker();
        if (r) {
            return r.toggleGrouping(this);
        }
        return false;
    };
    Column.prototype.isGroupedBy = function () {
        var r = this.findMyRanker();
        if (!r) {
            return -1;
        }
        return r.getGroupCriteria().indexOf(this);
    };
    Column.prototype.toggleMySorting = function () {
        var r = this.findMyRanker();
        if (r) {
            return r.toggleSorting(this);
        }
        return false;
    };
    Column.prototype.isSortedByMeImpl = function (selector) {
        var _this = this;
        var ranker = this.findMyRanker();
        if (!ranker) {
            return { asc: undefined, priority: undefined };
        }
        var criterias = selector(ranker);
        var index = criterias.findIndex(function (c) { return c.col === _this; });
        if (index < 0) {
            return { asc: undefined, priority: undefined };
        }
        return {
            asc: criterias[index].asc ? 'asc' : 'desc',
            priority: index
        };
    };
    Column.prototype.isSortedByMe = function () {
        return this.isSortedByMeImpl(function (r) { return r.getSortCriteria(); });
    };
    Column.prototype.groupSortByMe = function (ascending, priority) {
        if (ascending === void 0) { ascending = isSortingAscByDefault(this); }
        if (priority === void 0) { priority = 0; }
        var r = this.findMyRanker();
        if (r) {
            return r.groupSortBy(this, ascending, priority);
        }
        return false;
    };
    Column.prototype.toggleMyGroupSorting = function () {
        var r = this.findMyRanker();
        if (r) {
            return r.toggleGroupSorting(this);
        }
        return false;
    };
    Column.prototype.isGroupSortedByMe = function () {
        return this.isSortedByMeImpl(function (r) { return r.getGroupSortCriteria(); });
    };
    Column.prototype.removeMe = function () {
        if (this.fixed) {
            return false;
        }
        if (this.parent) {
            return this.parent.remove(this);
        }
        return false;
    };
    Column.prototype.attach = function (parent) {
        this.parent = parent;
    };
    Column.prototype.detach = function () {
        this.parent = null;
    };
    Column.prototype.insertAfterMe = function (col) {
        if (this.parent) {
            return this.parent.insertAfter(col, this) != null;
        }
        return false;
    };
    Column.prototype.findMyRanker = function () {
        if (this.parent) {
            return this.parent.findMyRanker();
        }
        return null;
    };
    Column.prototype.dump = function (toDescRef) {
        var r = {
            id: this.id,
            desc: toDescRef(this.desc),
            width: this.width
        };
        if (this.label !== (this.desc.label || this.id)) {
            r.label = this.label;
        }
        if (this.getRenderer() !== this.desc.type) {
            r.renderer = this.getRenderer();
        }
        if (this.getGroupRenderer() !== this.desc.type) {
            r.groupRenderer = this.getGroupRenderer();
        }
        if (this.getSummaryRenderer() !== this.desc.type) {
            r.summaryRenderer = this.getSummaryRenderer();
        }
        return r;
    };
    Column.prototype.restore = function (dump, _factory) {
        this.width = dump.width || this.width;
        this.metadata = {
            label: dump.label || this.label,
            description: this.description
        };
        if (dump.renderer || dump.rendererType) {
            this.renderer = dump.renderer || dump.rendererType;
        }
        if (dump.groupRenderer) {
            this.groupRenderer = dump.groupRenderer;
        }
        if (dump.summaryRenderer) {
            this.summaryRenderer = dump.summaryRenderer;
        }
    };
    Column.prototype.getLabel = function (row) {
        return String(this.getValue(row));
    };
    Column.prototype.getValue = function (_row) {
        return '';
    };
    Column.prototype.getExportValue = function (row, format) {
        return format === 'text' ? this.getLabel(row) : this.getValue(row);
    };
    Column.prototype.getColor = function (_row) {
        return Column.DEFAULT_COLOR;
    };
    Column.prototype.isMissing = function (row) {
        return isMissingValue(this.getValue(row));
    };
    Column.prototype.compare = function (_a, _b) {
        return 0;
    };
    Column.prototype.group = function (_row) {
        return defaultGroup;
    };
    Column.prototype.groupCompare = function (a, b) {
        return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
    };
    Column.prototype.isFiltered = function () {
        return false;
    };
    Column.prototype.filter = function (row) {
        return row != null;
    };
    Column.prototype.getRenderer = function () {
        return this.renderer;
    };
    Column.prototype.getGroupRenderer = function () {
        return this.groupRenderer;
    };
    Column.prototype.getSummaryRenderer = function () {
        return this.summaryRenderer;
    };
    Column.prototype.setRenderer = function (renderer) {
        if (renderer === this.renderer) {
            return;
        }
        this.fire([Column.EVENT_RENDERER_TYPE_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.renderer, this.renderer = renderer);
    };
    Column.prototype.setDefaultRenderer = function (renderer) {
        if (this.renderer !== this.desc.type || this.desc.renderer) {
            return;
        }
        return this.setRenderer(renderer);
    };
    Column.prototype.setGroupRenderer = function (renderer) {
        if (renderer === this.groupRenderer) {
            return;
        }
        this.fire([Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.groupRenderer, this.groupRenderer = renderer);
    };
    Column.prototype.setDefaultGroupRenderer = function (renderer) {
        if (this.groupRenderer !== this.desc.type || this.desc.groupRenderer) {
            return;
        }
        return this.setGroupRenderer(renderer);
    };
    Column.prototype.setSummaryRenderer = function (renderer) {
        if (renderer === this.summaryRenderer) {
            return;
        }
        this.fire([Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY], this.summaryRenderer, this.summaryRenderer = renderer);
    };
    Column.prototype.setDefaultSummaryRenderer = function (renderer) {
        if (this.summaryRenderer !== this.desc.type || this.desc.summaryRenderer) {
            return;
        }
        return this.setSummaryRenderer(renderer);
    };
    Column.prototype.setDefaultWidth = function (width) {
        if (this.width !== 100 || this.desc.width) {
            return;
        }
        return this.setWidthImpl(width);
    };
    Column.prototype.markDirty = function (type) {
        if (type === void 0) { type = 'all'; }
        switch (type) {
            case 'header':
                return this.fire([Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY]);
            case 'values':
                return this.fire([Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY]);
            default:
                return this.fire([Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY]);
        }
    };
    Column.DEFAULT_COLOR = '#C1C1C1';
    Column.FLAT_ALL_COLUMNS = -1;
    Column.EVENT_WIDTH_CHANGED = 'widthChanged';
    Column.EVENT_LABEL_CHANGED = 'labelChanged';
    Column.EVENT_METADATA_CHANGED = 'metaDataChanged';
    Column.EVENT_DIRTY = 'dirty';
    Column.EVENT_DIRTY_HEADER = 'dirtyHeader';
    Column.EVENT_DIRTY_VALUES = 'dirtyValues';
    Column.EVENT_RENDERER_TYPE_CHANGED = 'rendererTypeChanged';
    Column.EVENT_GROUP_RENDERER_TYPE_CHANGED = 'groupRendererChanged';
    Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED = 'summaryRendererChanged';
    Column.EVENT_VISIBILITY_CHANGED = 'visibilityChanged';
    return Column;
}(AEventDispatcher));
export default Column;
//# sourceMappingURL=Column.js.map