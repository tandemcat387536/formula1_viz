import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import ValueColumn, { dataLoaded } from './ValueColumn';
import { IKeyValue } from './IArrayColumn';
import { IDataRow } from './interfaces';
import { EAdvancedSortMethod, IAdvancedBoxPlotColumn, INumberDesc, INumberFilter } from './INumberColumn';
import { default as MapColumn, IMapColumnDesc } from './MapColumn';
import { IMappingFunction } from './MappingFunction';
import { colorMappingChanged } from './NumberColumn';
import { IAdvancedBoxPlotData } from '../internal/math';
import { IEventListener } from '../internal/AEventDispatcher';
import { IColorMappingFunction } from './ColorMappingFunction';
export interface INumberMapDesc extends INumberDesc {
    readonly sort?: EAdvancedSortMethod;
}
export declare type INumberMapColumnDesc = INumberMapDesc & IMapColumnDesc<number>;
export declare function mappingChanged(previous: IMappingFunction, current: IMappingFunction): void;
export declare function sortMethodChanged(previous: EAdvancedSortMethod, current: EAdvancedSortMethod): void;
export declare function filterChanged(previous: INumberFilter | null, current: INumberFilter | null): void;
export default class NumberMapColumn extends MapColumn<number> implements IAdvancedBoxPlotColumn {
    static readonly EVENT_MAPPING_CHANGED = "mappingChanged";
    static readonly EVENT_COLOR_MAPPING_CHANGED = "colorMappingChanged";
    static readonly EVENT_SORTMETHOD_CHANGED = "sortMethodChanged";
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    private sort;
    private mapping;
    private original;
    private colorMapping;
    private currentFilter;
    constructor(id: string, desc: Readonly<INumberMapColumnDesc>);
    compare(a: IDataRow, b: IDataRow): number;
    getBoxPlotData(row: IDataRow): IAdvancedBoxPlotData | null;
    getRange(): [string, string];
    getRawBoxPlotData(row: IDataRow): IAdvancedBoxPlotData | null;
    getNumber(row: IDataRow): number;
    getRawNumber(row: IDataRow): number;
    getValue(row: IDataRow): {
        key: string;
        value: number;
    }[];
    getRawValue(row: IDataRow): IKeyValue<number>[];
    getExportValue(row: IDataRow, format: 'text' | 'json'): any;
    getLabels(row: IDataRow): {
        key: string;
        value: string;
    }[];
    getSortMethod(): EAdvancedSortMethod;
    setSortMethod(sort: EAdvancedSortMethod): void;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    protected createEventList(): string[];
    on(type: typeof NumberMapColumn.EVENT_COLOR_MAPPING_CHANGED, listener: typeof colorMappingChanged | null): this;
    on(type: typeof NumberMapColumn.EVENT_MAPPING_CHANGED, listener: typeof mappingChanged | null): this;
    on(type: typeof NumberMapColumn.EVENT_SORTMETHOD_CHANGED, listener: typeof sortMethodChanged | null): this;
    on(type: typeof NumberMapColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getOriginalMapping(): IMappingFunction;
    getMapping(): IMappingFunction;
    setMapping(mapping: IMappingFunction): void;
    getColor(row: IDataRow): any;
    getColorMapping(): IColorMappingFunction;
    setColorMapping(mapping: IColorMappingFunction): void;
    isFiltered(): any;
    getFilter(): INumberFilter;
    setFilter(value?: INumberFilter): void;
    filter(row: IDataRow): any;
}
