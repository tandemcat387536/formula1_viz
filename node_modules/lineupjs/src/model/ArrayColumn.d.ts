import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import ValueColumn, { IValueColumnDesc, dataLoaded } from './ValueColumn';
import { IArrayColumn } from './IArrayColumn';
import { IDataRow } from './interfaces';
import { IEventListener } from '../internal/AEventDispatcher';
export interface IArrayDesc {
    dataLength?: number;
    labels?: string[];
}
export interface ISplicer {
    length: number | null;
    splice<T>(values: T[]): T[];
}
export interface IArrayColumnDesc<T> extends IArrayDesc, IValueColumnDesc<T[]> {
}
export declare function spliceChanged(previous: ISplicer, current: ISplicer): void;
export default class ArrayColumn<T> extends ValueColumn<T[]> implements IArrayColumn<T> {
    static readonly EVENT_SPLICE_CHANGED = "spliceChanged";
    private readonly _dataLength;
    private splicer;
    private readonly originalLabels;
    constructor(id: string, desc: Readonly<IArrayColumnDesc<T>>);
    setSplicer(splicer: Readonly<ISplicer>): void;
    readonly labels: string[];
    getSplicer(): Readonly<ISplicer>;
    readonly dataLength: number | null;
    getValue(row: IDataRow): T[];
    getValues(row: IDataRow): T[];
    getLabels(row: IDataRow): string[];
    getLabel(row: IDataRow): string;
    getMap(row: IDataRow): {
        key: string;
        value: T;
    }[];
    getMapLabel(row: IDataRow): {
        key: string;
        value: string;
    }[];
    protected createEventList(): string[];
    on(type: typeof ArrayColumn.EVENT_SPLICE_CHANGED, listener: typeof spliceChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
}
