import { format } from 'd3-format';
import { similar } from '../internal';
import Column from './Column';
import { FIRST_IS_NAN } from './missing';
export var DEFAULT_FORMATTER = format('.3n');
export function isNumberColumn(col) {
    return (col instanceof Column && typeof col.getNumber === 'function' || (!(col instanceof Column) && col.type.match(/(number|stack|ordinal)/) != null));
}
export function compareBoxPlot(col, a, b) {
    var aVal = col.getBoxPlotData(a);
    var bVal = col.getBoxPlotData(b);
    if (aVal == null) {
        return bVal == null ? 0 : FIRST_IS_NAN;
    }
    if (bVal == null) {
        return FIRST_IS_NAN * -1;
    }
    var method = col.getSortMethod();
    return numberCompare(aVal[method], bVal[method]);
}
export function getBoxPlotNumber(col, row, mode) {
    var data = mode === 'normalized' ? col.getBoxPlotData(row) : col.getRawBoxPlotData(row);
    if (data == null) {
        return NaN;
    }
    return data[col.getSortMethod()];
}
export var ESortMethod;
(function (ESortMethod) {
    ESortMethod["min"] = "min";
    ESortMethod["max"] = "max";
    ESortMethod["median"] = "median";
    ESortMethod["q1"] = "q1";
    ESortMethod["q3"] = "q3";
})(ESortMethod || (ESortMethod = {}));
export function isBoxPlotColumn(col) {
    return typeof col.getBoxPlotData === 'function';
}
export var EAdvancedSortMethod;
(function (EAdvancedSortMethod) {
    EAdvancedSortMethod["min"] = "min";
    EAdvancedSortMethod["max"] = "max";
    EAdvancedSortMethod["median"] = "median";
    EAdvancedSortMethod["q1"] = "q1";
    EAdvancedSortMethod["q3"] = "q3";
    EAdvancedSortMethod["mean"] = "mean";
})(EAdvancedSortMethod || (EAdvancedSortMethod = {}));
export function isNumbersColumn(col) {
    return isBoxPlotColumn(col) && typeof col.getNumbers === 'function';
}
export function numberCompare(a, b, aMissing, bMissing) {
    if (aMissing === void 0) { aMissing = false; }
    if (bMissing === void 0) { bMissing = false; }
    aMissing = aMissing || a == null || isNaN(a);
    bMissing = bMissing || b == null || isNaN(b);
    if (aMissing) {
        return bMissing ? 0 : FIRST_IS_NAN;
    }
    if (bMissing) {
        return FIRST_IS_NAN * -1;
    }
    return a - b;
}
export function noNumberFilter() {
    return ({ min: -Infinity, max: Infinity, filterMissing: false });
}
export function isEqualNumberFilter(a, b) {
    return similar(a.min, b.min, 0.001) && similar(a.max, b.max, 0.001) && a.filterMissing === b.filterMissing;
}
export function isNumberIncluded(filter, value) {
    if (!filter) {
        return true;
    }
    if (isNaN(value)) {
        return !filter.filterMissing;
    }
    return !((isFinite(filter.min) && value < filter.min) || (isFinite(filter.max) && value > filter.max));
}
export function isDummyNumberFilter(filter) {
    return !filter.filterMissing && !isFinite(filter.min) && !isFinite(filter.max);
}
export function restoreNumberFilter(v) {
    return {
        min: v.min != null && isFinite(v.min) ? v.min : -Infinity,
        max: v.max != null && isFinite(v.max) ? v.max : +Infinity,
        filterMissing: v.filterMissing
    };
}
//# sourceMappingURL=INumberColumn.js.map