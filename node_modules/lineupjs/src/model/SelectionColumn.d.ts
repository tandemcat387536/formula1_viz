import { IDataRow, IGroup } from './interfaces';
import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import ValueColumn, { IValueColumnDesc, dataLoaded } from './ValueColumn';
import { IEventListener } from '../internal/AEventDispatcher';
export declare function createSelectionDesc(label?: string): {
    type: string;
    label: string;
    fixed: boolean;
};
export interface ISelectionColumnDesc extends IValueColumnDesc<boolean> {
    setter(row: IDataRow, value: boolean): void;
    setterAll(rows: IDataRow[], value: boolean): void;
}
export declare function select(row: IDataRow, value: boolean, rows?: IDataRow[]): void;
export default class SelectionColumn extends ValueColumn<boolean> {
    private static SELECTED_GROUP;
    private static NOT_SELECTED_GROUP;
    static readonly EVENT_SELECT = "select";
    constructor(id: string, desc: Readonly<ISelectionColumnDesc>);
    readonly frozen: boolean;
    protected createEventList(): string[];
    on(type: typeof SelectionColumn.EVENT_SELECT, listener: typeof select | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    setValue(row: IDataRow, value: boolean): boolean;
    setValues(rows: IDataRow[], value: boolean): true | undefined;
    private setImpl;
    toggleValue(row: IDataRow): boolean;
    compare(a: IDataRow, b: IDataRow): 1 | -1 | 0;
    group(row: IDataRow): IGroup;
}
