import Column from './Column';
import { isArrayColumn } from './IArrayColumn';
import { colorPool } from './internal';
import { FIRST_IS_MISSING } from './missing';
export function isSetColumn(col) {
    return isArrayColumn(col) && Array.isArray(col.categories);
}
export function toCategory(cat, value, nextColor) {
    if (nextColor === void 0) { nextColor = function () { return Column.DEFAULT_COLOR; }; }
    if (typeof cat === 'string') {
        return { name: cat, label: cat, color: nextColor(), value: value };
    }
    var name = cat.name == null ? String(cat.value) : cat.name;
    return {
        name: name,
        label: cat.label || name,
        color: cat.color || nextColor(),
        value: cat.value != null ? cat.value : value
    };
}
export function compareCategory(a, b) {
    var aNull = a == null || isNaN(a.value);
    var bNull = b == null || isNaN(b.value);
    if (aNull || a == null) {
        return bNull ? 0 : FIRST_IS_MISSING;
    }
    if (bNull || b == null) {
        return -FIRST_IS_MISSING;
    }
    if (a.value === b.value) {
        return a.label.toLowerCase().localeCompare(b.label.toLowerCase());
    }
    return a.value - b.value;
}
function findMostFrequent(rows, col) {
    var hist = new Map();
    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
        var row = rows_1[_i];
        var cat = col.getCategory(row);
        hist.set(cat, (hist.get(cat) || 0) + 1);
    }
    if (hist.size === 0) {
        return {
            cat: null,
            count: 0
        };
    }
    var topCat = null;
    var topCount = 0;
    hist.forEach(function (count, cat) {
        if (count > topCount) {
            topCat = cat;
            topCount = count;
        }
    });
    return {
        cat: topCat,
        count: topCount
    };
}
export function groupCompareCategory(a, b, col) {
    if (a.length === 0) {
        return b.length === 0 ? 0 : FIRST_IS_MISSING;
    }
    if (b.length === 0) {
        return -FIRST_IS_MISSING;
    }
    var aMostFrequent = findMostFrequent(a, col);
    var bMostFrequent = findMostFrequent(b, col);
    if (aMostFrequent.cat === null) {
        return bMostFrequent.cat === null ? 0 : FIRST_IS_MISSING;
    }
    if (bMostFrequent.cat === null) {
        return -FIRST_IS_MISSING;
    }
    if (aMostFrequent.cat === bMostFrequent.cat) {
        return bMostFrequent.count - aMostFrequent.count;
    }
    return aMostFrequent.cat.value - bMostFrequent.cat.value;
}
export function toCategories(desc) {
    if (!desc.categories) {
        return [];
    }
    var nextColor = colorPool();
    var l = desc.categories.length - 1;
    var cats = desc.categories.map(function (cat, i) { return toCategory(cat, i / l, nextColor); });
    return cats.sort(compareCategory);
}
export function isCategoricalColumn(col) {
    return (col instanceof Column && typeof col.getCategory === 'function' || (!(col instanceof Column) && col.type.match(/(categorical|ordinal|hierarchy)/) != null));
}
function isEmptyFilter(f) {
    return f == null || (!f.filterMissing && (f.filter == null || f.filter === ''));
}
export function isEqualCategoricalFilter(a, b) {
    if (a === b) {
        return true;
    }
    if (a == null || b == null) {
        return isEmptyFilter(a) === isEmptyFilter(b);
    }
    if (a.filterMissing !== b.filterMissing || (typeof a.filter !== typeof b.filter)) {
        return false;
    }
    if (Array.isArray(a.filter)) {
        return arrayEquals(a.filter, b.filter);
    }
    return String(a.filter) === String(b.filter);
}
function arrayEquals(a, b) {
    var al = a != null ? a.length : 0;
    var bl = b != null ? b.length : 0;
    if (al !== bl) {
        return false;
    }
    if (al === 0) {
        return true;
    }
    return a.every(function (ai, i) { return ai === b[i]; });
}
export function isCategoryIncluded(filter, category) {
    if (filter == null) {
        return true;
    }
    if (category == null || isNaN(category.value)) {
        return !filter.filterMissing;
    }
    var filterObj = filter.filter;
    if (Array.isArray(filterObj)) {
        return filterObj.includes(category.name);
    }
    if (typeof filterObj === 'string' && filterObj.length > 0) {
        return category.name.toLowerCase().includes(filterObj.toLowerCase());
    }
    if (filterObj instanceof RegExp) {
        return filterObj.test(category.name);
    }
    return true;
}
//# sourceMappingURL=ICategoricalColumn.js.map