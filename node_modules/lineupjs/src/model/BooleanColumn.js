import { __decorate, __extends } from "tslib";
import { Category, toolbar } from './annotations';
import CategoricalColumn from './CategoricalColumn';
import Column from './Column';
import ValueColumn from './ValueColumn';
var BooleanColumn = (function (_super) {
    __extends(BooleanColumn, _super);
    function BooleanColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.currentFilter = null;
        _this.setWidthImpl(30);
        _this.categories = [
            {
                name: desc.trueMarker || 'âœ“',
                color: BooleanColumn_1.GROUP_TRUE.color,
                label: BooleanColumn_1.GROUP_TRUE.name,
                value: 0
            },
            {
                name: desc.trueMarker || '',
                color: BooleanColumn_1.GROUP_FALSE.color,
                label: BooleanColumn_1.GROUP_FALSE.name,
                value: 1
            }
        ];
        return _this;
    }
    BooleanColumn_1 = BooleanColumn;
    BooleanColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([BooleanColumn_1.EVENT_FILTER_CHANGED]);
    };
    BooleanColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    Object.defineProperty(BooleanColumn.prototype, "dataLength", {
        get: function () {
            return this.categories.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BooleanColumn.prototype, "labels", {
        get: function () {
            return this.categories.map(function (d) { return d.label; });
        },
        enumerable: true,
        configurable: true
    });
    BooleanColumn.prototype.getValue = function (row) {
        var v = _super.prototype.getValue.call(this, row);
        if (typeof (v) === 'undefined' || v == null) {
            return false;
        }
        return v === true || v === 'true' || v === 'yes' || v === 'x';
    };
    BooleanColumn.prototype.isMissing = function () {
        return false;
    };
    BooleanColumn.prototype.getCategory = function (row) {
        var v = this.getValue(row);
        return this.categories[v ? 0 : 1];
    };
    BooleanColumn.prototype.getColor = function (row) {
        return CategoricalColumn.prototype.getColor.call(this, row);
    };
    BooleanColumn.prototype.getLabel = function (row) {
        return CategoricalColumn.prototype.getLabel.call(this, row);
    };
    BooleanColumn.prototype.getLabels = function (row) {
        return CategoricalColumn.prototype.getLabels.call(this, row);
    };
    BooleanColumn.prototype.getValues = function (row) {
        return CategoricalColumn.prototype.getValues.call(this, row);
    };
    BooleanColumn.prototype.getMap = function (row) {
        return CategoricalColumn.prototype.getMap.call(this, row);
    };
    BooleanColumn.prototype.getMapLabel = function (row) {
        return CategoricalColumn.prototype.getMapLabel.call(this, row);
    };
    BooleanColumn.prototype.getSet = function (row) {
        var v = this.getValue(row);
        var r = new Set();
        r.add(this.categories[v ? 0 : 1]);
        return r;
    };
    BooleanColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        if (this.currentFilter != null) {
            r.filter = this.currentFilter;
        }
        return r;
    };
    BooleanColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (typeof dump.filter !== 'undefined') {
            this.currentFilter = dump.filter;
        }
    };
    BooleanColumn.prototype.isFiltered = function () {
        return this.currentFilter != null;
    };
    BooleanColumn.prototype.filter = function (row) {
        if (!this.isFiltered()) {
            return true;
        }
        var r = this.getValue(row);
        return r === this.currentFilter;
    };
    BooleanColumn.prototype.getFilter = function () {
        return this.currentFilter;
    };
    BooleanColumn.prototype.setFilter = function (filter) {
        if (this.currentFilter === filter) {
            return;
        }
        this.fire([BooleanColumn_1.EVENT_FILTER_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.currentFilter, this.currentFilter = filter);
    };
    BooleanColumn.prototype.compare = function (a, b) {
        var av = this.getValue(a);
        var bv = this.getValue(b);
        return av === bv ? 0 : (av < bv ? -1 : +1);
    };
    BooleanColumn.prototype.group = function (row) {
        var enabled = this.getValue(row);
        return enabled ? BooleanColumn_1.GROUP_TRUE : BooleanColumn_1.GROUP_FALSE;
    };
    var BooleanColumn_1;
    BooleanColumn.EVENT_FILTER_CHANGED = 'filterChanged';
    BooleanColumn.GROUP_TRUE = { name: 'True', color: 'black' };
    BooleanColumn.GROUP_FALSE = { name: 'False', color: 'white' };
    BooleanColumn = BooleanColumn_1 = __decorate([
        toolbar('group', 'groupBy', 'filterBoolean'),
        Category('categorical')
    ], BooleanColumn);
    return BooleanColumn;
}(ValueColumn));
export default BooleanColumn;
//# sourceMappingURL=BooleanColumn.js.map