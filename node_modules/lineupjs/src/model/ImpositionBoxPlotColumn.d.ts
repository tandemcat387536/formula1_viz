import { IBoxPlotData } from '../internal';
import { IEventListener } from '../internal/AEventDispatcher';
import { mappingChanged } from './BoxPlotColumn';
import Column, { IColumnDesc, widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import CompositeColumn, { addColumn, filterChanged, moveColumn, removeColumn } from './CompositeColumn';
import { IDataRow, IGroupData } from './interfaces';
import { ESortMethod, IBoxPlotColumn, INumberFilter } from './INumberColumn';
import { IMappingFunction } from './MappingFunction';
import { colorMappingChanged } from './NumberColumn';
import { IColorMappingFunction } from './ColorMappingFunction';
export declare function createImpositionBoxPlotDesc(label?: string): {
    type: string;
    label: string;
};
export default class ImpositionBoxPlotColumn extends CompositeColumn implements IBoxPlotColumn {
    static readonly EVENT_MAPPING_CHANGED = "mappingChanged";
    static readonly EVENT_COLOR_MAPPING_CHANGED = "colorMappingChanged";
    constructor(id: string, desc: Readonly<IColumnDesc>);
    readonly label: string;
    private readonly wrapper;
    getLabel(row: IDataRow): string;
    getColor(row: IDataRow): string;
    protected createEventList(): string[];
    on(type: typeof ImpositionBoxPlotColumn.EVENT_COLOR_MAPPING_CHANGED, listener: typeof colorMappingChanged | null): this;
    on(type: typeof ImpositionBoxPlotColumn.EVENT_MAPPING_CHANGED, listener: typeof mappingChanged | null): this;
    on(type: typeof CompositeColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof CompositeColumn.EVENT_ADD_COLUMN, listener: typeof addColumn | null): this;
    on(type: typeof CompositeColumn.EVENT_MOVE_COLUMN, listener: typeof moveColumn | null): this;
    on(type: typeof CompositeColumn.EVENT_REMOVE_COLUMN, listener: typeof removeColumn | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getValue(row: IDataRow): any;
    getNumber(row: IDataRow): number;
    getRawNumber(row: IDataRow): number;
    getExportValue(row: IDataRow, format: 'text' | 'json'): any;
    getBoxPlotData(row: IDataRow): IBoxPlotData | null;
    getRawBoxPlotData(row: IDataRow): IBoxPlotData | null;
    getMapping(): IMappingFunction;
    getOriginalMapping(): IMappingFunction;
    getSortMethod(): string;
    setSortMethod(value: ESortMethod): void;
    isMissing(row: IDataRow): boolean;
    setMapping(mapping: IMappingFunction): void;
    getColorMapping(): IColorMappingFunction;
    setColorMapping(mapping: IColorMappingFunction): void;
    getFilter(): INumberFilter;
    setFilter(value?: INumberFilter): void;
    getRange(): [string, string];
    compare(a: IDataRow, b: IDataRow): any;
    group(row: IDataRow): any;
    groupCompare(a: IGroupData, b: IGroupData): any;
    insert(col: Column, index: number): Column | null;
    protected insertImpl(col: Column, index: number): Column;
    protected removeImpl(child: Column, index: number): boolean;
}
