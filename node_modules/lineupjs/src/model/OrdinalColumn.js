import { __decorate, __extends } from "tslib";
import { extent } from 'd3-array';
import { equalArrays } from '../internal';
import { Category, toolbar } from './annotations';
import CategoricalColumn from './CategoricalColumn';
import Column from './Column';
import { toCategories, toCategory } from './ICategoricalColumn';
import NumberColumn from './NumberColumn';
import ValueColumn from './ValueColumn';
var OrdinalColumn = (function (_super) {
    __extends(OrdinalColumn, _super);
    function OrdinalColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.lookup = new Map();
        _this.currentFilter = null;
        _this.categories = toCategories(desc);
        _this.missingCategory = desc.missingCategory ? toCategory(desc.missingCategory, NaN) : null;
        _this.categories.forEach(function (d) { return _this.lookup.set(d.name, d); });
        _this.setDefaultRenderer('number');
        _this.setDefaultGroupRenderer('boxplot');
        return _this;
    }
    OrdinalColumn_1 = OrdinalColumn;
    OrdinalColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([OrdinalColumn_1.EVENT_MAPPING_CHANGED, OrdinalColumn_1.EVENT_FILTER_CHANGED]);
    };
    OrdinalColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    Object.defineProperty(OrdinalColumn.prototype, "dataLength", {
        get: function () {
            return this.categories.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrdinalColumn.prototype, "labels", {
        get: function () {
            return this.categories.map(function (d) { return d.label; });
        },
        enumerable: true,
        configurable: true
    });
    OrdinalColumn.prototype.getValue = function (row) {
        var v = this.getCategory(row);
        return v ? v.value : NaN;
    };
    OrdinalColumn.prototype.getCategory = function (row) {
        var v = _super.prototype.getValue.call(this, row);
        if (!v) {
            return this.missingCategory;
        }
        var vs = String(v);
        return this.lookup.has(vs) ? this.lookup.get(vs) : this.missingCategory;
    };
    OrdinalColumn.prototype.getColor = function (row) {
        return CategoricalColumn.prototype.getColor.call(this, row);
    };
    OrdinalColumn.prototype.getLabel = function (row) {
        return CategoricalColumn.prototype.getLabel.call(this, row);
    };
    OrdinalColumn.prototype.getLabels = function (row) {
        return CategoricalColumn.prototype.getLabels.call(this, row);
    };
    OrdinalColumn.prototype.getValues = function (row) {
        return CategoricalColumn.prototype.getValues.call(this, row);
    };
    OrdinalColumn.prototype.getMap = function (row) {
        return CategoricalColumn.prototype.getMap.call(this, row);
    };
    OrdinalColumn.prototype.getMapLabel = function (row) {
        return CategoricalColumn.prototype.getMapLabel.call(this, row);
    };
    OrdinalColumn.prototype.getSet = function (row) {
        return CategoricalColumn.prototype.getSet.call(this, row);
    };
    OrdinalColumn.prototype.getNumber = function (row) {
        return this.getValue(row);
    };
    OrdinalColumn.prototype.isMissing = function (row) {
        return CategoricalColumn.prototype.isMissing.call(this, row);
    };
    OrdinalColumn.prototype.getRawNumber = function (row) {
        return this.getNumber(row);
    };
    OrdinalColumn.prototype.getExportValue = function (row, format) {
        if (format === 'json') {
            if (this.isMissing(row)) {
                return null;
            }
            return {
                name: this.getLabel(row),
                value: this.getValue(row)
            };
        }
        return _super.prototype.getExportValue.call(this, row, format);
    };
    OrdinalColumn.prototype.dump = function (toDescRef) {
        var r = CategoricalColumn.prototype.dump.call(this, toDescRef);
        r.mapping = this.getMapping();
        return r;
    };
    OrdinalColumn.prototype.restore = function (dump, factory) {
        CategoricalColumn.prototype.restore.call(this, dump, factory);
        if (dump.mapping) {
            this.setMapping(dump.mapping);
        }
    };
    OrdinalColumn.prototype.getMapping = function () {
        return this.categories.map(function (d) { return d.value; });
    };
    OrdinalColumn.prototype.setMapping = function (mapping) {
        var r = extent(mapping);
        mapping = mapping.map(function (d) { return (d - r[0]) / (r[1] - r[0]); });
        var bak = this.getMapping();
        if (equalArrays(bak, mapping)) {
            return;
        }
        this.categories.forEach(function (d, i) { return d.value = mapping[i] || 0; });
        this.fire([OrdinalColumn_1.EVENT_MAPPING_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], bak, this.getMapping());
    };
    OrdinalColumn.prototype.isFiltered = function () {
        return this.currentFilter != null;
    };
    OrdinalColumn.prototype.filter = function (row) {
        return CategoricalColumn.prototype.filter.call(this, row);
    };
    OrdinalColumn.prototype.group = function (row) {
        return CategoricalColumn.prototype.group.call(this, row);
    };
    OrdinalColumn.prototype.getFilter = function () {
        return this.currentFilter;
    };
    OrdinalColumn.prototype.setFilter = function (filter) {
        return CategoricalColumn.prototype.setFilter.call(this, filter);
    };
    OrdinalColumn.prototype.compare = function (a, b) {
        return CategoricalColumn.prototype.compare.call(this, a, b);
    };
    OrdinalColumn.prototype.getRenderer = function () {
        return NumberColumn.prototype.getRenderer.call(this);
    };
    var OrdinalColumn_1;
    OrdinalColumn.EVENT_MAPPING_CHANGED = NumberColumn.EVENT_MAPPING_CHANGED;
    OrdinalColumn.EVENT_FILTER_CHANGED = CategoricalColumn.EVENT_FILTER_CHANGED;
    OrdinalColumn = OrdinalColumn_1 = __decorate([
        toolbar('group', 'filterOrdinal'),
        Category('categorical')
    ], OrdinalColumn);
    return OrdinalColumn;
}(ValueColumn));
export default OrdinalColumn;
//# sourceMappingURL=OrdinalColumn.js.map