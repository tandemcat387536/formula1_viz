export interface IColorMappingFunctionBase {
    apply(v: number): string;
    dump(): any;
    clone(): IColorMappingFunction;
    eq(other: IColorMappingFunction): boolean;
}
export interface IInterpolateColorMappingFunction extends IColorMappingFunctionBase {
    type: 'sequential' | 'divergent';
    name: string;
}
export interface IQuantizedColorMappingFunction extends IColorMappingFunctionBase {
    type: 'quantized';
    base: IColorMappingFunction;
    steps: number;
}
export interface ISolidColorMappingFunction extends IColorMappingFunctionBase {
    type: 'solid';
    color: string;
}
export interface ICustomColorMappingFunction extends IColorMappingFunctionBase {
    type: 'custom';
    entries: {
        value: number;
        color: string;
    }[];
}
export declare type IColorMappingFunction = ISolidColorMappingFunction | ICustomColorMappingFunction | IQuantizedColorMappingFunction | IInterpolateColorMappingFunction;
export declare class InterpolatingColorFunction implements IInterpolateColorMappingFunction {
    readonly name: string;
    readonly type: 'sequential' | 'divergent';
    readonly apply: (v: number) => string;
    constructor(name: string, type: 'sequential' | 'divergent', apply: (v: number) => string);
    dump(): string;
    clone(): this;
    eq(other: IColorMappingFunction): boolean;
}
export declare class SolidColorFunction implements ISolidColorMappingFunction {
    readonly color: string;
    constructor(color: string);
    readonly type: 'solid';
    apply(): string;
    dump(): string;
    clone(): this;
    eq(other: IColorMappingFunction): boolean;
}
export declare class QuantizedColorFunction implements IQuantizedColorMappingFunction {
    readonly base: IColorMappingFunction;
    readonly steps: number;
    constructor(base: IColorMappingFunction, steps: number);
    readonly type: 'quantized';
    apply(v: number): string;
    dump(): {
        base: any;
        steps: number;
    };
    clone(): QuantizedColorFunction;
    eq(other: IColorMappingFunction): boolean;
}
export declare class CustomColorMappingFunction implements ICustomColorMappingFunction {
    readonly entries: {
        value: number;
        color: string;
    }[];
    private readonly scale;
    constructor(entries: {
        value: number;
        color: string;
    }[]);
    readonly type: 'custom';
    apply(v: number): string;
    dump(): {
        value: number;
        color: string;
    }[];
    clone(): CustomColorMappingFunction;
    eq(other: IColorMappingFunction): boolean;
}
