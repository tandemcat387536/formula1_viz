import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import { IColumnDesc, IDataRow } from './interfaces';
import Ranking from './Ranking';
import { IEventListener } from '../internal/AEventDispatcher';
export interface IValueColumnDesc<T> extends IColumnDesc {
    lazyLoaded?: boolean;
    accessor?(row: IDataRow, id: string, desc: any, ranking: Ranking | null): T;
}
export declare function dataLoaded(previous: boolean, current: boolean): void;
export default class ValueColumn<T> extends Column {
    static readonly EVENT_DATA_LOADED = "dataLoaded";
    static readonly RENDERER_LOADING = "loading";
    private readonly accessor;
    private loaded;
    constructor(id: string, desc: Readonly<IValueColumnDesc<T>>);
    protected createEventList(): string[];
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getLabel(row: IDataRow): string;
    getRaw(row: IDataRow): T | null;
    getValue(row: IDataRow): T | null;
    isLoaded(): boolean;
    setLoaded(loaded: boolean): void;
    getRenderer(): string;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
}
