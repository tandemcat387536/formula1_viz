import { __extends } from "tslib";
import Column from './Column';
var ValueColumn = (function (_super) {
    __extends(ValueColumn, _super);
    function ValueColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.accessor = desc.accessor || (function () { return null; });
        _this.loaded = desc.lazyLoaded !== true;
        return _this;
    }
    ValueColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([ValueColumn.EVENT_DATA_LOADED]);
    };
    ValueColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    ValueColumn.prototype.getLabel = function (row) {
        if (!this.isLoaded()) {
            return '';
        }
        return String(this.getValue(row));
    };
    ValueColumn.prototype.getRaw = function (row) {
        if (!this.isLoaded()) {
            return null;
        }
        return this.accessor(row, this.id, this.desc, this.findMyRanker());
    };
    ValueColumn.prototype.getValue = function (row) {
        return this.getRaw(row);
    };
    ValueColumn.prototype.isLoaded = function () {
        return this.loaded;
    };
    ValueColumn.prototype.setLoaded = function (loaded) {
        if (this.loaded === loaded) {
            return;
        }
        this.fire([ValueColumn.EVENT_DATA_LOADED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.loaded, this.loaded = loaded);
    };
    ValueColumn.prototype.getRenderer = function () {
        if (!this.isLoaded()) {
            return ValueColumn.RENDERER_LOADING;
        }
        return _super.prototype.getRenderer.call(this);
    };
    ValueColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.loaded = this.loaded;
        if (!this.loaded && r.rendererType === ValueColumn.RENDERER_LOADING) {
            delete r.rendererType;
        }
        return r;
    };
    ValueColumn.prototype.restore = function (dump, factory) {
        if (dump.loaded !== undefined) {
            this.loaded = dump.loaded;
        }
        _super.prototype.restore.call(this, dump, factory);
    };
    ValueColumn.EVENT_DATA_LOADED = 'dataLoaded';
    ValueColumn.RENDERER_LOADING = 'loading';
    return ValueColumn;
}(Column));
export default ValueColumn;
//# sourceMappingURL=ValueColumn.js.map