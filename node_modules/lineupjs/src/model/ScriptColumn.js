import { __decorate, __extends } from "tslib";
import { toolbar } from './annotations';
import Column from './Column';
import CompositeNumberColumn from './CompositeNumberColumn';
import { isNumberColumn } from './INumberColumn';
var DEFAULT_SCRIPT = "let s = 0;\ncol.forEach((c) => s += c.v);\nreturn s / col.length";
export function createScriptDesc(label) {
    if (label === void 0) { label = 'script'; }
    return { type: 'script', label: label, script: DEFAULT_SCRIPT };
}
function wrapWithContext(code) {
    var clean = code.trim();
    if (!clean.includes('return')) {
        clean = "return (" + clean + ");";
    }
    return "\n  const max = function(arr) { return Math.max.apply(Math, arr); };\n  const min = function(arr) { return Math.min.apply(Math, arr); };\n  const extent = function(arr) { return [min(arr), max(arr)]; };\n  const clamp = function(v, minValue, maxValue) { return v < minValue ? minValue : (v > maxValue ? maxValue : v); };\n  const normalize = function(v, minMax, max) {\n    if (Array.isArray(minMax)) {\n      minMax = minMax[0];\n      max = minMax[1];\n    }\n    return (v - minMax) / (max - minMax);\n  };\n  const denormalize = function(v, minMax, max) {\n    if (Array.isArray(minMax)) {\n      minMax = minMax[0];\n      max = minMax[1];\n    }\n    return v * (max - minMax) + minMax;\n  };\n  const linear = function(v, source, target) {\n    target = target || [0, 1];\n    return denormalize(normalize(v, source), target);\n  };\n  const v = (function custom() {\n    " + clean + "\n  })();\n\n  return typeof v === 'number' ? v : NaN";
}
var ColumnWrapper = (function () {
    function ColumnWrapper(c, v, raw) {
        this.c = c;
        this.v = v;
        this.raw = raw;
    }
    Object.defineProperty(ColumnWrapper.prototype, "type", {
        get: function () {
            return this.c.desc.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnWrapper.prototype, "name", {
        get: function () {
            return this.c.getMetaData().label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnWrapper.prototype, "id", {
        get: function () {
            return this.c.id;
        },
        enumerable: true,
        configurable: true
    });
    return ColumnWrapper;
}());
var ColumnContext = (function () {
    function ColumnContext(children, allFactory) {
        var _this = this;
        this.children = children;
        this.allFactory = allFactory;
        this.lookup = new Map();
        this._all = null;
        children.forEach(function (c) {
            _this.lookup.set("ID@" + c.id, c);
            _this.lookup.set("NAME@" + c.name, c);
        });
    }
    ColumnContext.prototype.byName = function (name) {
        return this.lookup.get("NAME@" + name);
    };
    ColumnContext.prototype.byID = function (id) {
        return this.lookup.get("ID@" + id);
    };
    ColumnContext.prototype.byIndex = function (index) {
        return this.children[index];
    };
    ColumnContext.prototype.forEach = function (callback) {
        return this.children.forEach(callback);
    };
    Object.defineProperty(ColumnContext.prototype, "length", {
        get: function () {
            return this.children.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnContext.prototype, "all", {
        get: function () {
            if (this._all == null) {
                this._all = this.allFactory ? this.allFactory() : null;
            }
            return this._all;
        },
        enumerable: true,
        configurable: true
    });
    return ColumnContext;
}());
var ScriptColumn = (function (_super) {
    __extends(ScriptColumn, _super);
    function ScriptColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.script = ScriptColumn_1.DEFAULT_SCRIPT;
        _this.f = null;
        _this.script = desc.script || _this.script;
        _this.setDefaultRenderer('number');
        _this.setDefaultGroupRenderer('number');
        _this.setDefaultSummaryRenderer('number');
        return _this;
    }
    ScriptColumn_1 = ScriptColumn;
    ScriptColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([ScriptColumn_1.EVENT_SCRIPT_CHANGED]);
    };
    ScriptColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    ScriptColumn.prototype.setScript = function (script) {
        if (this.script === script) {
            return;
        }
        this.f = null;
        this.fire([ScriptColumn_1.EVENT_SCRIPT_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.script, this.script = script);
    };
    ScriptColumn.prototype.getScript = function () {
        return this.script;
    };
    ScriptColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.script = this.script;
        return r;
    };
    ScriptColumn.prototype.restore = function (dump, factory) {
        this.script = dump.script || this.script;
        _super.prototype.restore.call(this, dump, factory);
    };
    ScriptColumn.prototype.compute = function (row) {
        var _this = this;
        if (this.f == null) {
            this.f = new Function('children', 'values', 'raws', 'col', 'row', 'index', wrapWithContext(this.script));
        }
        var children = this._children;
        var values = this._children.map(function (d) { return d.getValue(row); });
        var raws = this._children.map(function (d) { return isNumberColumn(d) ? d.getRawNumber(row) : null; });
        var col = new ColumnContext(children.map(function (c, i) { return new ColumnWrapper(c, values[i], raws[i]); }), function () {
            var cols = _this.findMyRanker().flatColumns;
            return new ColumnContext(cols.filter(function (c) { return c !== _this; }).map(function (c) { return new ColumnWrapper(c, c.getValue(row), isNumberColumn(c) ? c.getRawNumber(row) : null); }));
        });
        return this.f.call(this, children, values, raws, col, row.v, row.i);
    };
    ScriptColumn.prototype.getExportValue = function (row, format) {
        if (format === 'json') {
            return {
                value: this.getRawNumber(row),
                children: this.children.map(function (d) { return d.getExportValue(row, format); })
            };
        }
        return _super.prototype.getExportValue.call(this, row, format);
    };
    var ScriptColumn_1;
    ScriptColumn.EVENT_SCRIPT_CHANGED = 'scriptChanged';
    ScriptColumn.DEFAULT_SCRIPT = DEFAULT_SCRIPT;
    ScriptColumn = ScriptColumn_1 = __decorate([
        toolbar('script')
    ], ScriptColumn);
    return ScriptColumn;
}(CompositeNumberColumn));
export default ScriptColumn;
//# sourceMappingURL=ScriptColumn.js.map