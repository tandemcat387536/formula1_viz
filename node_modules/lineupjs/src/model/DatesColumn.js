import { __decorate, __extends } from "tslib";
import { timeFormat, timeParse } from 'd3-time-format';
import { median, min, max } from 'd3-array';
import { dialogAddons, toolbar } from './annotations';
import ArrayColumn from './ArrayColumn';
import { noDateFilter, restoreDateFilter, isDummyDateFilter } from './IDateColumn';
import { FIRST_IS_MISSING, isMissingValue } from './missing';
import DateColumn from './DateColumn';
export var EDateSort;
(function (EDateSort) {
    EDateSort["min"] = "min";
    EDateSort["max"] = "max";
    EDateSort["median"] = "median";
})(EDateSort || (EDateSort = {}));
var DatesColumn = (function (_super) {
    __extends(DatesColumn, _super);
    function DatesColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.currentFilter = noDateFilter();
        _this.format = timeFormat(desc.dateFormat || '%x');
        _this.parse = desc.dateParse ? timeParse(desc.dateParse) : timeParse(desc.dateFormat || '%x');
        _this.sort = desc.sort || EDateSort.median;
        _this.setDefaultRenderer('default');
        return _this;
    }
    DatesColumn_1 = DatesColumn;
    DatesColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([DatesColumn_1.EVENT_SORTMETHOD_CHANGED, DatesColumn_1.EVENT_FILTER_CHANGED]);
    };
    DatesColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    DatesColumn.prototype.getValue = function (row) {
        return this.getDates(row);
    };
    DatesColumn.prototype.getLabels = function (row) {
        var _this = this;
        return this.getValue(row).map(function (v) { return (v instanceof Date) ? _this.format(v) : ''; });
    };
    DatesColumn.prototype.getDates = function (row) {
        var _this = this;
        return _super.prototype.getValue.call(this, row).map(function (v) {
            if (isMissingValue(v)) {
                return null;
            }
            if (v instanceof Date) {
                return v;
            }
            return _this.parse(String(v));
        });
    };
    DatesColumn.prototype.getDate = function (row) {
        var av = this.getDates(row).filter(Boolean);
        if (av.length === 0) {
            return null;
        }
        return new Date(compute(av, this.sort));
    };
    DatesColumn.prototype.getSortMethod = function () {
        return this.sort;
    };
    DatesColumn.prototype.setSortMethod = function (sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire([DatesColumn_1.EVENT_SORTMETHOD_CHANGED], this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    };
    DatesColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.sortMethod = this.getSortMethod();
        r.filter = !isDummyDateFilter(this.currentFilter) ? this.currentFilter : null;
        return r;
    };
    DatesColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
        if (dump.filter) {
            this.currentFilter = restoreDateFilter(dump.filter);
        }
    };
    DatesColumn.prototype.compare = function (a, b) {
        var av = this.getValue(a).filter(Boolean);
        var bv = this.getValue(b).filter(Boolean);
        if (av === bv) {
            return 0;
        }
        if (av.length === 0) {
            return bv.length === 0 ? 0 : FIRST_IS_MISSING;
        }
        if (bv.length === 0) {
            return -FIRST_IS_MISSING;
        }
        var as = compute(av, this.sort);
        var bs = compute(bv, this.sort);
        return as - bs;
    };
    DatesColumn.prototype.isFiltered = function () {
        return DateColumn.prototype.isFiltered.call(this);
    };
    DatesColumn.prototype.getFilter = function () {
        return DateColumn.prototype.getFilter.call(this);
    };
    DatesColumn.prototype.setFilter = function (value) {
        if (value === void 0) { value = { min: -Infinity, max: +Infinity, filterMissing: false }; }
        DateColumn.prototype.setFilter.call(this, value);
    };
    DatesColumn.prototype.filter = function (row) {
        return DateColumn.prototype.filter.call(this, row);
    };
    var DatesColumn_1;
    DatesColumn.EVENT_SORTMETHOD_CHANGED = 'sortMethodChanged';
    DatesColumn.EVENT_FILTER_CHANGED = DateColumn.EVENT_FILTER_CHANGED;
    DatesColumn = DatesColumn_1 = __decorate([
        toolbar('filterDate'),
        dialogAddons('sort', 'sortDates')
    ], DatesColumn);
    return DatesColumn;
}(ArrayColumn));
export default DatesColumn;
function compute(arr, sort) {
    switch (sort) {
        case EDateSort.min:
            return min(arr, function (d) { return d.getTime(); });
        case EDateSort.max:
            return max(arr, function (d) { return d.getTime(); });
        case EDateSort.median:
            return median(arr, function (d) { return d.getTime(); });
    }
}
//# sourceMappingURL=DatesColumn.js.map