import { __extends } from "tslib";
import ArrayColumn from './ArrayColumn';
import { toCategory } from './ICategoricalColumn';
import { FIRST_IS_MISSING } from './missing';
var BooleansColumn = (function (_super) {
    __extends(BooleansColumn, _super);
    function BooleansColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.setDefaultRenderer('upset');
        return _this;
    }
    Object.defineProperty(BooleansColumn.prototype, "categories", {
        get: function () {
            return this.labels.map(function (d, i) { return toCategory(d, i); });
        },
        enumerable: true,
        configurable: true
    });
    BooleansColumn.prototype.getSet = function (row) {
        var vs = this.getValues(row);
        return new Set(this.categories.filter(function (_, i) { return vs[i]; }));
    };
    BooleansColumn.prototype.compare = function (a, b) {
        var aVal = this.getValue(a);
        var bVal = this.getValue(b);
        if (aVal == null) {
            return bVal == null ? 0 : FIRST_IS_MISSING;
        }
        if (bVal == null) {
            return -FIRST_IS_MISSING;
        }
        var aCat = aVal.filter(function (x) { return x; }).length;
        var bCat = bVal.filter(function (x) { return x; }).length;
        return (aCat - bCat);
    };
    return BooleansColumn;
}(ArrayColumn));
export default BooleansColumn;
//# sourceMappingURL=BooleansColumn.js.map