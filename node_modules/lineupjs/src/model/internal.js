import { __spreadArrays } from "tslib";
import { LazyBoxPlotData } from '../internal';
import { numberCompare } from './INumberColumn';
export function patternFunction(pattern) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new (Function.bind.apply(Function, __spreadArrays([void 0, 'value'], args, ["\n  const escapedValue = encodeURIComponent(String(value));\n  return `" + pattern + "`;\n "])))();
}
export function joinGroups(groups) {
    console.assert(groups.length > 0);
    if (groups.length === 1) {
        return groups[0];
    }
    var parents = groups.map(function (g) { return Object.assign({ subGroups: [] }, g); });
    parents.slice(1).forEach(function (g, i) {
        g.parent = parents[i];
        parents[i].subGroups.push(g);
    });
    var g = {
        name: parents.map(function (d) { return d.name; }).join(' âˆ© '),
        color: parents[0].color,
        parent: parents[parents.length - 1]
    };
    g.parent.subGroups.push(g);
    return g;
}
export function toGroupID(group) {
    return group.name;
}
export function unifyParents(groups) {
    if (groups.length <= 1) {
        return;
    }
    var lookup = new Map();
    var resolve = function (g) {
        var id = g.name;
        if (g.parent) {
            var parent_1 = resolve(g.parent);
            g.parent = parent_1.g;
            id = parent_1.id + ".$[id}";
        }
        if (lookup.has(id)) {
            return { g: lookup.get(id), id: id };
        }
        if (g.parent) {
            g.parent.subGroups.push(g);
        }
        g.subGroups = [];
        lookup.set(id, g);
        return { g: g, id: id };
    };
    groups.forEach(function (g) {
        if (g.parent) {
            g.parent = resolve(g.parent).g;
            g.parent.subGroups.push(g);
        }
    });
}
var schemeCategory10 = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'];
var set3 = ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'];
var colors = schemeCategory10.concat(set3);
export function colorPool() {
    var act = 0;
    return function () { return colors[(act++) % colors.length]; };
}
export function medianIndex(rows, col) {
    var data = rows.map(function (r, i) { return ({ i: i, v: col.getNumber(r), m: col.isMissing(r) }); });
    var sorted = data.filter(function (r) { return !r.m; }).sort(function (a, b) { return numberCompare(a.v, b.v); });
    var index = sorted[Math.floor(sorted.length / 2.0)];
    if (index === undefined) {
        return 0;
    }
    return index.i;
}
export function groupCompare(a, b, col, sortMethod) {
    var va = new LazyBoxPlotData(a.map(function (row) { return col.getNumber(row); }));
    var vb = new LazyBoxPlotData(b.map(function (row) { return col.getNumber(row); }));
    return numberCompare(va[sortMethod], vb[sortMethod]);
}
//# sourceMappingURL=internal.js.map