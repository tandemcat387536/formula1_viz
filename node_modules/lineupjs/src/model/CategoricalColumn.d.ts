import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import ValueColumn, { dataLoaded } from './ValueColumn';
import { ICategoricalColumn, ICategoricalColumnDesc, ICategoricalFilter, ICategory } from './ICategoricalColumn';
import { IDataRow, IGroup, IGroupData } from './interfaces';
import { IEventListener } from '../internal/AEventDispatcher';
export declare function filterChanged(previous: ICategoricalFilter | null, current: ICategoricalFilter | null): void;
export default class CategoricalColumn extends ValueColumn<string> implements ICategoricalColumn {
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    readonly categories: ICategory[];
    private readonly missingCategory;
    private readonly lookup;
    private currentFilter;
    constructor(id: string, desc: Readonly<ICategoricalColumnDesc>);
    protected createEventList(): string[];
    on(type: typeof CategoricalColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getValue(row: IDataRow): string | null;
    getCategory(row: IDataRow): ICategory | null;
    readonly dataLength: number;
    readonly labels: string[];
    getLabel(row: IDataRow): string;
    getColor(row: IDataRow): string;
    getValues(row: IDataRow): boolean[];
    getLabels(row: IDataRow): string[];
    getMap(row: IDataRow): {
        key: string;
        value: boolean;
    }[];
    getMapLabel(row: IDataRow): {
        key: string;
        value: string;
    }[];
    getSet(row: IDataRow): Set<ICategory>;
    isMissing(row: IDataRow): boolean;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    isFiltered(): boolean;
    filter(row: IDataRow): boolean;
    getFilter(): ICategoricalFilter | null;
    setFilter(filter: ICategoricalFilter | null): void;
    compare(a: IDataRow, b: IDataRow): number;
    group(row: IDataRow): IGroup;
    groupCompare(a: IGroupData, b: IGroupData): number;
    getGroupRenderer(): string;
}
