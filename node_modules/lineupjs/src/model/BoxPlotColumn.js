import { __decorate, __extends } from "tslib";
import { format } from 'd3-format';
import { Category, toolbar, SortByDefault, dialogAddons } from './annotations';
import Column from './Column';
import ValueColumn from './ValueColumn';
import { compareBoxPlot, ESortMethod, getBoxPlotNumber, noNumberFilter, isDummyNumberFilter, restoreNumberFilter } from './INumberColumn';
import { createMappingFunction, restoreMapping, ScaleMappingFunction } from './MappingFunction';
import NumberColumn from './NumberColumn';
import { restoreColorMapping, createColorMappingFunction } from './ColorMappingFunction';
var BoxPlotColumn = (function (_super) {
    __extends(BoxPlotColumn, _super);
    function BoxPlotColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.currentFilter = noNumberFilter();
        _this.mapping = restoreMapping(desc);
        _this.original = _this.mapping.clone();
        _this.colorMapping = restoreColorMapping(desc);
        _this.sort = desc.sort || ESortMethod.min;
        return _this;
    }
    BoxPlotColumn_1 = BoxPlotColumn;
    BoxPlotColumn.prototype.compare = function (a, b) {
        return compareBoxPlot(this, a, b);
    };
    BoxPlotColumn.prototype.getBoxPlotData = function (row) {
        return this.getValue(row);
    };
    BoxPlotColumn.prototype.getRange = function () {
        return this.mapping.getRange(BoxPlotColumn_1.DEFAULT_FORMATTER);
    };
    BoxPlotColumn.prototype.getRawBoxPlotData = function (row) {
        return this.getRawValue(row);
    };
    BoxPlotColumn.prototype.getRawValue = function (row) {
        return _super.prototype.getValue.call(this, row);
    };
    BoxPlotColumn.prototype.getExportValue = function (row, format) {
        return format === 'json' ? this.getRawValue(row) : _super.prototype.getExportValue.call(this, row, format);
    };
    BoxPlotColumn.prototype.getValue = function (row) {
        var _this = this;
        var v = this.getRawValue(row);
        if (v == null) {
            return v;
        }
        var r = {
            min: this.mapping.apply(v.min),
            max: this.mapping.apply(v.max),
            median: this.mapping.apply(v.median),
            q1: this.mapping.apply(v.q1),
            q3: this.mapping.apply(v.q3)
        };
        if (v.outlier) {
            Object.assign(r, {
                outlier: v.outlier.map(function (d) { return _this.mapping.apply(d); })
            });
        }
        if (v.whiskerLow != null) {
            Object.assign(r, {
                whiskerLow: this.mapping.apply(v.whiskerLow)
            });
        }
        if (v.whiskerHigh != null) {
            Object.assign(r, {
                whiskerHigh: this.mapping.apply(v.whiskerHigh)
            });
        }
        return r;
    };
    BoxPlotColumn.prototype.getNumber = function (row) {
        return getBoxPlotNumber(this, row, 'normalized');
    };
    BoxPlotColumn.prototype.getRawNumber = function (row) {
        return getBoxPlotNumber(this, row, 'raw');
    };
    BoxPlotColumn.prototype.getLabel = function (row) {
        var v = this.getRawValue(row);
        if (v == null) {
            return '';
        }
        var f = BoxPlotColumn_1.DEFAULT_FORMATTER;
        return "BoxPlot(min = " + f(v.min) + ", q1 = " + f(v.q1) + ", median = " + f(v.median) + ", q3 = " + f(v.q3) + ", max = " + f(v.max) + ")";
    };
    BoxPlotColumn.prototype.getSortMethod = function () {
        return this.sort;
    };
    BoxPlotColumn.prototype.setSortMethod = function (sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire(BoxPlotColumn_1.EVENT_SORTMETHOD_CHANGED, this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    };
    BoxPlotColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.sortMethod = this.getSortMethod();
        r.filter = !isDummyNumberFilter(this.currentFilter) ? this.currentFilter : null;
        r.map = this.mapping.dump();
        r.colorMapping = this.colorMapping.dump();
        return r;
    };
    BoxPlotColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
        if (dump.filter) {
            this.currentFilter = restoreNumberFilter(dump.filter);
        }
        if (dump.map) {
            this.mapping = createMappingFunction(dump.map);
        }
        else if (dump.domain) {
            this.mapping = new ScaleMappingFunction(dump.domain, 'linear', dump.range || [0, 1]);
        }
        if (dump.colorMapping) {
            this.colorMapping = createColorMappingFunction(dump.colorMapping);
        }
    };
    BoxPlotColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([BoxPlotColumn_1.EVENT_SORTMETHOD_CHANGED, BoxPlotColumn_1.EVENT_COLOR_MAPPING_CHANGED, BoxPlotColumn_1.EVENT_MAPPING_CHANGED, BoxPlotColumn_1.EVENT_FILTER_CHANGED]);
    };
    BoxPlotColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    BoxPlotColumn.prototype.getOriginalMapping = function () {
        return this.original.clone();
    };
    BoxPlotColumn.prototype.getMapping = function () {
        return this.mapping.clone();
    };
    BoxPlotColumn.prototype.setMapping = function (mapping) {
        if (this.mapping.eq(mapping)) {
            return;
        }
        this.fire([BoxPlotColumn_1.EVENT_MAPPING_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.mapping.clone(), this.mapping = mapping);
    };
    BoxPlotColumn.prototype.getColor = function (row) {
        return NumberColumn.prototype.getColor.call(this, row);
    };
    BoxPlotColumn.prototype.getColorMapping = function () {
        return this.colorMapping.clone();
    };
    BoxPlotColumn.prototype.setColorMapping = function (mapping) {
        if (this.colorMapping.eq(mapping)) {
            return;
        }
        this.fire([BoxPlotColumn_1.EVENT_COLOR_MAPPING_CHANGED, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.colorMapping.clone(), this.colorMapping = mapping);
    };
    BoxPlotColumn.prototype.isFiltered = function () {
        return NumberColumn.prototype.isFiltered.call(this);
    };
    BoxPlotColumn.prototype.getFilter = function () {
        return NumberColumn.prototype.getFilter.call(this);
    };
    BoxPlotColumn.prototype.setFilter = function (value) {
        if (value === void 0) { value = { min: -Infinity, max: +Infinity, filterMissing: false }; }
        NumberColumn.prototype.setFilter.call(this, value);
    };
    BoxPlotColumn.prototype.filter = function (row) {
        return NumberColumn.prototype.filter.call(this, row);
    };
    var BoxPlotColumn_1;
    BoxPlotColumn.EVENT_MAPPING_CHANGED = NumberColumn.EVENT_MAPPING_CHANGED;
    BoxPlotColumn.EVENT_COLOR_MAPPING_CHANGED = NumberColumn.EVENT_COLOR_MAPPING_CHANGED;
    BoxPlotColumn.EVENT_SORTMETHOD_CHANGED = NumberColumn.EVENT_SORTMETHOD_CHANGED;
    BoxPlotColumn.EVENT_FILTER_CHANGED = NumberColumn.EVENT_FILTER_CHANGED;
    BoxPlotColumn.DEFAULT_FORMATTER = format('.3n');
    BoxPlotColumn = BoxPlotColumn_1 = __decorate([
        toolbar('filterNumber', 'colorMapped', 'editMapping'),
        dialogAddons('sort', 'sortBoxPlot'),
        Category('array'),
        SortByDefault('descending')
    ], BoxPlotColumn);
    return BoxPlotColumn;
}(ValueColumn));
export default BoxPlotColumn;
//# sourceMappingURL=BoxPlotColumn.js.map