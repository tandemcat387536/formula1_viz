import { __decorate, __extends } from "tslib";
import { LazyBoxPlotData } from '../internal';
import { toolbar, SortByDefault, dialogAddons } from './annotations';
import Column from './Column';
import { compareBoxPlot, DEFAULT_FORMATTER, EAdvancedSortMethod, getBoxPlotNumber, noNumberFilter, isDummyNumberFilter, restoreNumberFilter } from './INumberColumn';
import { default as MapColumn } from './MapColumn';
import { createMappingFunction, restoreMapping, ScaleMappingFunction } from './MappingFunction';
import { isMissingValue } from './missing';
import NumberColumn from './NumberColumn';
import { restoreColorMapping, createColorMappingFunction } from './ColorMappingFunction';
var NumberMapColumn = (function (_super) {
    __extends(NumberMapColumn, _super);
    function NumberMapColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.currentFilter = noNumberFilter();
        _this.mapping = restoreMapping(desc);
        _this.original = _this.mapping.clone();
        _this.colorMapping = restoreColorMapping(desc);
        _this.sort = desc.sort || EAdvancedSortMethod.median;
        _this.setDefaultRenderer('mapbars');
        return _this;
    }
    NumberMapColumn_1 = NumberMapColumn;
    NumberMapColumn.prototype.compare = function (a, b) {
        return compareBoxPlot(this, a, b);
    };
    NumberMapColumn.prototype.getBoxPlotData = function (row) {
        var data = this.getRawValue(row);
        if (data == null) {
            return null;
        }
        return new LazyBoxPlotData(data.map(function (d) { return d.value; }), this.mapping);
    };
    NumberMapColumn.prototype.getRange = function () {
        return this.mapping.getRange(DEFAULT_FORMATTER);
    };
    NumberMapColumn.prototype.getRawBoxPlotData = function (row) {
        var data = this.getRawValue(row);
        if (data == null) {
            return null;
        }
        return new LazyBoxPlotData(data.map(function (d) { return d.value; }));
    };
    NumberMapColumn.prototype.getNumber = function (row) {
        return getBoxPlotNumber(this, row, 'normalized');
    };
    NumberMapColumn.prototype.getRawNumber = function (row) {
        return getBoxPlotNumber(this, row, 'raw');
    };
    NumberMapColumn.prototype.getValue = function (row) {
        var _this = this;
        var values = this.getRawValue(row);
        return values.map(function (_a) {
            var key = _a.key, value = _a.value;
            return ({ key: key, value: isMissingValue(value) ? NaN : _this.mapping.apply(value) });
        });
    };
    NumberMapColumn.prototype.getRawValue = function (row) {
        var r = _super.prototype.getValue.call(this, row);
        return r == null ? [] : r;
    };
    NumberMapColumn.prototype.getExportValue = function (row, format) {
        return format === 'json' ? this.getRawValue(row) : _super.prototype.getExportValue.call(this, row, format);
    };
    NumberMapColumn.prototype.getLabels = function (row) {
        var v = this.getValue(row);
        return v.map(function (_a) {
            var key = _a.key, value = _a.value;
            return ({ key: key, value: DEFAULT_FORMATTER(value) });
        });
    };
    NumberMapColumn.prototype.getSortMethod = function () {
        return this.sort;
    };
    NumberMapColumn.prototype.setSortMethod = function (sort) {
        if (this.sort === sort) {
            return;
        }
        this.fire([NumberMapColumn_1.EVENT_SORTMETHOD_CHANGED], this.sort, this.sort = sort);
        if (!this.isSortedByMe().asc) {
            this.sortByMe();
        }
    };
    NumberMapColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.sortMethod = this.getSortMethod();
        r.filter = !isDummyNumberFilter(this.currentFilter) ? this.currentFilter : null;
        r.map = this.mapping.dump();
        r.colorMapping = this.colorMapping.dump();
        return r;
    };
    NumberMapColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (dump.sortMethod) {
            this.sort = dump.sortMethod;
        }
        if (dump.filter) {
            this.currentFilter = restoreNumberFilter(dump.filter);
        }
        if (dump.map) {
            this.mapping = createMappingFunction(dump.map);
        }
        else if (dump.domain) {
            this.mapping = new ScaleMappingFunction(dump.domain, 'linear', dump.range || [0, 1]);
        }
        if (dump.colorMapping) {
            this.colorMapping = createColorMappingFunction(dump.colorMapping);
        }
    };
    NumberMapColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([NumberMapColumn_1.EVENT_COLOR_MAPPING_CHANGED, NumberMapColumn_1.EVENT_MAPPING_CHANGED, NumberMapColumn_1.EVENT_SORTMETHOD_CHANGED, NumberMapColumn_1.EVENT_FILTER_CHANGED]);
    };
    NumberMapColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    NumberMapColumn.prototype.getOriginalMapping = function () {
        return this.original.clone();
    };
    NumberMapColumn.prototype.getMapping = function () {
        return this.mapping.clone();
    };
    NumberMapColumn.prototype.setMapping = function (mapping) {
        if (this.mapping.eq(mapping)) {
            return;
        }
        this.fire([NumberMapColumn_1.EVENT_MAPPING_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.mapping.clone(), this.mapping = mapping);
    };
    NumberMapColumn.prototype.getColor = function (row) {
        return NumberColumn.prototype.getColor.call(this, row);
    };
    NumberMapColumn.prototype.getColorMapping = function () {
        return this.colorMapping.clone();
    };
    NumberMapColumn.prototype.setColorMapping = function (mapping) {
        if (this.colorMapping.eq(mapping)) {
            return;
        }
        this.fire([NumberMapColumn_1.EVENT_COLOR_MAPPING_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.colorMapping.clone(), this.colorMapping = mapping);
    };
    NumberMapColumn.prototype.isFiltered = function () {
        return NumberColumn.prototype.isFiltered.call(this);
    };
    NumberMapColumn.prototype.getFilter = function () {
        return NumberColumn.prototype.getFilter.call(this);
    };
    NumberMapColumn.prototype.setFilter = function (value) {
        if (value === void 0) { value = { min: -Infinity, max: +Infinity, filterMissing: false }; }
        NumberColumn.prototype.setFilter.call(this, value);
    };
    NumberMapColumn.prototype.filter = function (row) {
        return NumberColumn.prototype.filter.call(this, row);
    };
    var NumberMapColumn_1;
    NumberMapColumn.EVENT_MAPPING_CHANGED = NumberColumn.EVENT_MAPPING_CHANGED;
    NumberMapColumn.EVENT_COLOR_MAPPING_CHANGED = NumberColumn.EVENT_COLOR_MAPPING_CHANGED;
    NumberMapColumn.EVENT_SORTMETHOD_CHANGED = NumberColumn.EVENT_SORTMETHOD_CHANGED;
    NumberMapColumn.EVENT_FILTER_CHANGED = NumberColumn.EVENT_FILTER_CHANGED;
    NumberMapColumn = NumberMapColumn_1 = __decorate([
        toolbar('filterNumber', 'colorMapped', 'editMapping'),
        dialogAddons('sort', 'sortNumbers'),
        SortByDefault('descending')
    ], NumberMapColumn);
    return NumberMapColumn;
}(MapColumn));
export default NumberMapColumn;
//# sourceMappingURL=NumberMapColumn.js.map