import { __extends, __spreadArrays } from "tslib";
import { equalArrays, fixCSS } from '../internal';
import AEventDispatcher, { suffix } from '../internal/AEventDispatcher';
import { isSortingAscByDefault } from './annotations';
import Column from './Column';
import { defaultGroup } from './Group';
import { joinGroups } from './internal';
import NumberColumn from './NumberColumn';
import CompositeColumn from './CompositeColumn';
var Ranking = (function (_super) {
    __extends(Ranking, _super);
    function Ranking(id, maxSortCriteria, maxGroupColumns) {
        if (maxSortCriteria === void 0) { maxSortCriteria = 2; }
        if (maxGroupColumns === void 0) { maxGroupColumns = 1; }
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.maxSortCriteria = maxSortCriteria;
        _this.maxGroupColumns = maxGroupColumns;
        _this.sortCriteria = [];
        _this.groupSortCriteria = [];
        _this.groupColumns = [];
        _this.columns = [];
        _this.comparator = function (a, b) {
            if (_this.sortCriteria.length === 0) {
                return a.i - b.i;
            }
            for (var _i = 0, _a = _this.sortCriteria; _i < _a.length; _i++) {
                var sort = _a[_i];
                var r = sort.col.compare(a, b);
                if (r !== 0) {
                    return sort.asc ? r : -r;
                }
            }
            return a.i - b.i;
        };
        _this.groupComparator = function (a, b) {
            if (_this.groupSortCriteria.length === 0) {
                return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
            }
            for (var _i = 0, _a = _this.groupSortCriteria; _i < _a.length; _i++) {
                var sort = _a[_i];
                var r = sort.col.groupCompare(a, b);
                if (r !== 0) {
                    return sort.asc ? r : -r;
                }
            }
            return a.name.localeCompare(b.name);
        };
        _this.grouper = function (row) {
            var g = _this.groupColumns;
            switch (g.length) {
                case 0:
                    return defaultGroup;
                case 1:
                    return g[0].group(row);
                default:
                    var groups = g.map(function (gi) { return gi.group(row); });
                    return joinGroups(groups);
            }
        };
        _this.dirtyOrder = function () {
            _this.fire([Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], _this.getSortCriteria(), _this.getGroupSortCriteria(), _this.getGroupCriteria());
        };
        _this.groups = [Object.assign({ order: [] }, defaultGroup)];
        _this.id = fixCSS(id);
        _this.label = "Ranking " + (id.startsWith('rank') ? id.slice(4) : id);
        return _this;
    }
    Ranking.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([
            Ranking.EVENT_WIDTH_CHANGED, Ranking.EVENT_FILTER_CHANGED,
            Ranking.EVENT_LABEL_CHANGED, Ranking.EVENT_GROUPS_CHANGED,
            Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_GROUP_CRITERIA_CHANGED, Ranking.EVENT_MOVE_COLUMN,
            Ranking.EVENT_DIRTY, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES,
            Ranking.EVENT_GROUP_SORT_CRITERIA_CHANGED, Ranking.EVENT_COLUMN_VISIBILITY_CHANGED,
            Ranking.EVENT_SORT_CRITERIA_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_ORDER_CHANGED
        ]);
    };
    Ranking.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    Ranking.prototype.assignNewId = function (idGenerator) {
        this.id = fixCSS(idGenerator());
        this.columns.forEach(function (c) { return c.assignNewId(idGenerator); });
    };
    Ranking.prototype.getLabel = function () {
        return this.label;
    };
    Ranking.prototype.setLabel = function (value) {
        if (value === this.label) {
            return;
        }
        this.fire(Ranking.EVENT_LABEL_CHANGED, this.label, this.label = value);
    };
    Ranking.prototype.setOrder = function (order) {
        this.setGroups([Object.assign({ order: order }, defaultGroup)]);
    };
    Ranking.prototype.setGroups = function (groups) {
        var old = this.getOrder();
        var oldGroups = this.groups;
        this.groups = groups;
        this.fire([Ranking.EVENT_ORDER_CHANGED, Ranking.EVENT_GROUPS_CHANGED, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], old, this.getOrder(), oldGroups, groups);
    };
    Ranking.prototype.getOrder = function () {
        var _a;
        switch (this.groups.length) {
            case 0:
                return [];
            case 1:
                return this.groups[0].order;
            default:
                return (_a = []).concat.apply(_a, this.groups.map(function (g) { return g.order; }));
        }
    };
    Ranking.prototype.getGroups = function () {
        return this.groups.slice();
    };
    Ranking.prototype.dump = function (toDescRef) {
        var r = {};
        r.columns = this.columns.map(function (d) { return d.dump(toDescRef); });
        r.sortCriteria = this.sortCriteria.map(function (s) { return ({ asc: s.asc, sortBy: s.col.id }); });
        r.groupSortCriteria = this.groupSortCriteria.map(function (s) { return ({ asc: s.asc, sortBy: s.col.id }); });
        r.groupColumns = this.groupColumns.map(function (d) { return d.id; });
        return r;
    };
    Ranking.prototype.restore = function (dump, factory) {
        var _this = this;
        this.clear();
        dump.columns.map(function (child) {
            var c = factory(child);
            if (c) {
                _this.push(c);
            }
        });
        if (dump.sortColumn && dump.sortColumn.sortBy) {
            var help = this.columns.find(function (d) { return d.id === dump.sortColumn.sortBy; });
            if (help) {
                this.sortBy(help, dump.sortColumn.asc);
            }
        }
        if (dump.groupColumns) {
            var groupColumns = dump.groupColumns.map(function (id) { return _this.columns.find(function (d) { return d.id === id; }); });
            this.groupBy(groupColumns);
        }
        var restoreSortCriteria = function (dumped) {
            return dumped.map(function (s) {
                return {
                    asc: s.asc,
                    col: _this.columns.find(function (d) { return d.id === s.sortBy; }) || null
                };
            }).filter(function (s) { return s.col; });
        };
        if (dump.sortCriteria) {
            this.setSortCriteria(restoreSortCriteria(dump.sortCriteria));
        }
        if (dump.groupSortCriteria) {
            this.setGroupSortCriteria(restoreSortCriteria(dump.groupSortCriteria));
        }
    };
    Ranking.prototype.flatten = function (r, offset, levelsToGo, padding) {
        if (levelsToGo === void 0) { levelsToGo = 0; }
        if (padding === void 0) { padding = 0; }
        var acc = offset;
        if (levelsToGo > 0 || levelsToGo <= Column.FLAT_ALL_COLUMNS) {
            this.columns.forEach(function (c) {
                if (c.getVisible() && levelsToGo <= Column.FLAT_ALL_COLUMNS) {
                    acc += c.flatten(r, acc, levelsToGo - 1, padding) + padding;
                }
            });
        }
        return acc - offset;
    };
    Ranking.prototype.getPrimarySortCriteria = function () {
        if (this.sortCriteria.length === 0) {
            return null;
        }
        return this.sortCriteria[0];
    };
    Ranking.prototype.getSortCriteria = function () {
        return this.sortCriteria.map(function (d) { return Object.assign({}, d); });
    };
    Ranking.prototype.getGroupSortCriteria = function () {
        return this.groupSortCriteria.map(function (d) { return Object.assign({}, d); });
    };
    Ranking.prototype.toggleSorting = function (col) {
        return this.setSortCriteria(this.toggleSortingLogic(col, this.sortCriteria));
    };
    Ranking.prototype.toggleSortingLogic = function (col, sortCriteria) {
        var newSort = sortCriteria.slice();
        var current = newSort.findIndex(function (d) { return d.col === col; });
        var defaultAsc = isSortingAscByDefault(col);
        if (current < 0) {
            newSort.splice(0, newSort.length, { col: col, asc: defaultAsc });
        }
        else if (newSort[current].asc === defaultAsc) {
            newSort.splice(current, 1, { col: col, asc: !defaultAsc });
        }
        else {
            newSort.splice(current, 1);
        }
        return newSort;
    };
    Ranking.prototype.toggleGrouping = function (col) {
        var old = this.groupColumns.indexOf(col);
        if (old >= 0) {
            var newGroupings = this.groupColumns.slice();
            newGroupings.splice(old, 1);
            return this.setGroupCriteria(newGroupings);
        }
        return this.setGroupCriteria([col]);
    };
    Ranking.prototype.getGroupCriteria = function () {
        return this.groupColumns.slice();
    };
    Ranking.prototype.sortBy = function (col, ascending, priority) {
        if (ascending === void 0) { ascending = false; }
        if (priority === void 0) { priority = 0; }
        if (col.findMyRanker() !== this) {
            return false;
        }
        return this.setSortCriteria(this.hierarchyLogic(this.sortCriteria, this.sortCriteria.findIndex(function (d) { return d.col === col; }), { col: col, asc: ascending }, priority));
    };
    Ranking.prototype.groupSortBy = function (col, ascending, priority) {
        if (ascending === void 0) { ascending = false; }
        if (priority === void 0) { priority = 0; }
        if (col.findMyRanker() !== this) {
            return false;
        }
        return this.setGroupSortCriteria(this.hierarchyLogic(this.groupSortCriteria, this.groupSortCriteria.findIndex(function (d) { return d.col === col; }), { col: col, asc: ascending }, priority));
    };
    Ranking.prototype.hierarchyLogic = function (entries, index, entry, priority) {
        entries = entries.slice();
        if (index >= 0) {
            entries.splice(index, 1);
            if (priority >= 0) {
                entries.splice(Math.min(priority, entries.length), 0, entry);
            }
        }
        else if (priority >= 0) {
            entries[Math.min(priority, entries.length)] = entry;
        }
        return entries;
    };
    Ranking.prototype.groupBy = function (col, priority) {
        if (priority === void 0) { priority = 0; }
        if (col.findMyRanker() !== this) {
            return false;
        }
        return this.setGroupCriteria(this.hierarchyLogic(this.groupColumns, this.groupColumns.indexOf(col), col, priority));
    };
    Ranking.prototype.setSortCriteria = function (value) {
        var _a;
        var _this = this;
        var values = Array.isArray(value) ? value.slice() : [value];
        if (values.length > this.maxSortCriteria) {
            values.splice(this.maxSortCriteria, values.length - this.maxSortCriteria);
        }
        var bak = this.sortCriteria.slice();
        if (equalCriteria(values, bak)) {
            return false;
        }
        bak.forEach(function (d) {
            d.col.on(Column.EVENT_DIRTY_VALUES + ".order", null);
            d.col.on(NumberColumn.EVENT_SORTMETHOD_CHANGED + ".order", null);
        });
        values.forEach(function (d) {
            d.col.on(Column.EVENT_DIRTY_VALUES + ".order", _this.dirtyOrder);
            d.col.on(NumberColumn.EVENT_SORTMETHOD_CHANGED + ".order", _this.dirtyOrder);
        });
        (_a = this.sortCriteria).splice.apply(_a, __spreadArrays([0, this.sortCriteria.length], values.slice()));
        this.triggerResort(bak);
        return true;
    };
    Ranking.prototype.setGroupCriteria = function (column) {
        var _a;
        var _this = this;
        var cols = Array.isArray(column) ? column : [column];
        if (cols.length > this.maxGroupColumns) {
            cols = cols.slice(0, this.maxGroupColumns);
        }
        if (equalArrays(this.groupColumns, cols)) {
            return true;
        }
        this.groupColumns.forEach(function (groupColumn) {
            groupColumn.on(suffix('.group', Column.EVENT_DIRTY_VALUES, NumberColumn.EVENT_SORTMETHOD_CHANGED, NumberColumn.EVENT_GROUPING_CHANGED), null);
        });
        var bak = this.groupColumns.slice();
        (_a = this.groupColumns).splice.apply(_a, __spreadArrays([0, this.groupColumns.length], cols));
        this.groupColumns.forEach(function (groupColumn) {
            groupColumn.on(suffix('.group', Column.EVENT_DIRTY_VALUES, NumberColumn.EVENT_SORTMETHOD_CHANGED, NumberColumn.EVENT_GROUPING_CHANGED), _this.dirtyOrder);
        });
        this.fire([Ranking.EVENT_GROUP_CRITERIA_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_HEADER,
            Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], bak, this.getGroupCriteria());
        return true;
    };
    Ranking.prototype.toggleGroupSorting = function (col) {
        return this.setGroupSortCriteria(this.toggleSortingLogic(col, this.groupSortCriteria));
    };
    Ranking.prototype.setMaxSortCriteria = function (maxSortCriteria) {
        var old = this.maxSortCriteria;
        if (old === maxSortCriteria) {
            return;
        }
        this.maxSortCriteria = maxSortCriteria;
        if (old < maxSortCriteria || this.sortCriteria.length < maxSortCriteria) {
            return;
        }
        this.setSortCriteria(this.sortCriteria.slice(0, maxSortCriteria));
    };
    Ranking.prototype.getMaxSortCriteria = function () {
        return this.maxSortCriteria;
    };
    Ranking.prototype.setMaxGroupColumns = function (maxGroupColumns) {
        var old = this.maxGroupColumns;
        if (old === maxGroupColumns) {
            return;
        }
        this.maxGroupColumns = maxGroupColumns;
        if (old < maxGroupColumns || this.groupColumns.length < maxGroupColumns) {
            return;
        }
        this.setGroupCriteria(this.groupColumns.slice(0, maxGroupColumns));
    };
    Ranking.prototype.getMaxGroupColumns = function () {
        return this.maxGroupColumns;
    };
    Ranking.prototype.setGroupSortCriteria = function (value) {
        var _a;
        var _this = this;
        var values = Array.isArray(value) ? value.slice() : [value];
        if (values.length > this.maxSortCriteria) {
            values.splice(this.maxSortCriteria, values.length - this.maxSortCriteria);
        }
        var bak = this.groupSortCriteria.slice();
        if (equalCriteria(values, bak)) {
            return false;
        }
        bak.forEach(function (d) {
            d.col.on(Column.EVENT_DIRTY_VALUES + ".groupOrder", null);
            d.col.on(NumberColumn.EVENT_SORTMETHOD_CHANGED + ".groupOrder", null);
        });
        values.forEach(function (d) {
            d.col.on(Column.EVENT_DIRTY_VALUES + ".groupOrder", _this.dirtyOrder);
            d.col.on(NumberColumn.EVENT_SORTMETHOD_CHANGED + ".groupOrder", _this.dirtyOrder);
        });
        (_a = this.groupSortCriteria).splice.apply(_a, __spreadArrays([0, this.groupSortCriteria.length], values.slice()));
        this.triggerGroupResort(bak);
        return true;
    };
    Ranking.prototype.triggerGroupResort = function (bak) {
        var sortCriterias = this.getGroupSortCriteria();
        var bakMulti = Array.isArray(bak) ? bak : sortCriterias;
        this.fire([Ranking.EVENT_GROUP_SORT_CRITERIA_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_HEADER,
            Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], bakMulti, sortCriterias);
    };
    Ranking.prototype.triggerResort = function (bak) {
        var sortCriterias = this.getSortCriteria();
        var bakMulti = Array.isArray(bak) ? bak : sortCriterias;
        this.fire([Ranking.EVENT_SORT_CRITERIA_CHANGED, Ranking.EVENT_DIRTY_ORDER, Ranking.EVENT_DIRTY_HEADER,
            Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], bakMulti, sortCriterias);
    };
    Object.defineProperty(Ranking.prototype, "children", {
        get: function () {
            return this.columns.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Ranking.prototype, "length", {
        get: function () {
            return this.columns.length;
        },
        enumerable: true,
        configurable: true
    });
    Ranking.prototype.insert = function (col, index) {
        var _this = this;
        if (index === void 0) { index = this.columns.length; }
        this.columns.splice(index, 0, col);
        col.attach(this);
        this.forward.apply(this, __spreadArrays([col], suffix('.ranking', Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY, NumberColumn.EVENT_FILTER_CHANGED)));
        col.on(Ranking.EVENT_FILTER_CHANGED + ".order", this.dirtyOrder);
        col.on(Column.EVENT_VISIBILITY_CHANGED + ".ranking", function (oldValue, newValue) { return _this.fire([Ranking.EVENT_COLUMN_VISIBILITY_CHANGED, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, oldValue, newValue); });
        this.fire([Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, index);
        return col;
    };
    Ranking.prototype.move = function (col, index) {
        if (index === void 0) { index = this.columns.length; }
        if (col.parent !== this) {
            console.error('invalid move operation: ', col);
            return null;
        }
        var old = this.columns.indexOf(col);
        if (index === old) {
            return col;
        }
        this.columns.splice(old, 1);
        this.columns.splice(old < index ? index - 1 : index, 0, col);
        this.fire([Ranking.EVENT_MOVE_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, index, old);
        return col;
    };
    Ranking.prototype.moveAfter = function (col, reference) {
        var i = this.columns.indexOf(reference);
        if (i < 0) {
            return null;
        }
        return this.move(col, i + 1);
    };
    Object.defineProperty(Ranking.prototype, "fqpath", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Ranking.prototype.findByPath = function (fqpath) {
        var p = this;
        var indices = fqpath.split('@').map(Number).slice(1);
        while (indices.length > 0) {
            var i = indices.shift();
            p = p.at(i);
        }
        return p;
    };
    Ranking.prototype.indexOf = function (col) {
        return this.columns.indexOf(col);
    };
    Ranking.prototype.at = function (index) {
        return this.columns[index];
    };
    Ranking.prototype.insertAfter = function (col, ref) {
        var i = this.columns.indexOf(ref);
        if (i < 0) {
            return null;
        }
        return this.insert(col, i + 1);
    };
    Ranking.prototype.push = function (col) {
        return this.insert(col);
    };
    Ranking.prototype.remove = function (col) {
        var i = this.columns.indexOf(col);
        if (i < 0) {
            return false;
        }
        this.unforward.apply(this, __spreadArrays([col], suffix('.ranking', Column.EVENT_VISIBILITY_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY, NumberColumn.EVENT_FILTER_CHANGED)));
        var isSortCriteria = this.sortCriteria.findIndex(function (d) { return d.col === col; });
        var sortCriteriaChanged = isSortCriteria >= 0;
        if (sortCriteriaChanged) {
            this.sortCriteria.splice(isSortCriteria, 1);
        }
        var isGroupSortCriteria = this.groupSortCriteria.findIndex(function (d) { return d.col === col; });
        var groupSortCriteriaChanged = isGroupSortCriteria >= 0;
        if (groupSortCriteriaChanged) {
            this.groupSortCriteria.splice(isGroupSortCriteria, 1);
        }
        var newGrouping = null;
        var isGroupColumn = this.groupColumns.indexOf(col);
        if (isGroupColumn >= 0) {
            newGrouping = this.groupColumns.slice();
            newGrouping.splice(isGroupColumn, 1);
        }
        col.detach();
        this.columns.splice(i, 1);
        this.fire([Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], col, i);
        if (newGrouping) {
            this.setGroupCriteria(newGrouping);
        }
        else if (sortCriteriaChanged) {
            this.triggerResort(null);
        }
        else if (groupSortCriteriaChanged) {
            this.triggerGroupResort(null);
        }
        else if (col.isFiltered()) {
            this.dirtyOrder();
        }
        return true;
    };
    Ranking.prototype.clear = function () {
        var _this = this;
        if (this.columns.length === 0) {
            return;
        }
        this.sortCriteria.splice(0, this.sortCriteria.length);
        this.groupSortCriteria.splice(0, this.groupSortCriteria.length);
        this.groupColumns.forEach(function (groupColumn) {
            groupColumn.on(Column.EVENT_DIRTY_VALUES + ".group", null);
            groupColumn.on(NumberColumn.EVENT_SORTMETHOD_CHANGED + ".group", null);
        });
        this.groupColumns.splice(0, this.groupColumns.length);
        this.columns.forEach(function (col) {
            _this.unforward.apply(_this, __spreadArrays([col], suffix('.ranking', Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY, NumberColumn.EVENT_FILTER_CHANGED)));
            col.detach();
        });
        var removed = this.columns.splice(0, this.columns.length);
        this.fire([Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_DIRTY_VALUES, Ranking.EVENT_DIRTY], removed);
    };
    Object.defineProperty(Ranking.prototype, "flatColumns", {
        get: function () {
            var r = [];
            this.flatten(r, 0, Column.FLAT_ALL_COLUMNS);
            return r.map(function (d) { return d.col; });
        },
        enumerable: true,
        configurable: true
    });
    Ranking.prototype.find = function (idOrFilter) {
        var filter = typeof (idOrFilter) === 'string' ? function (col) { return col.id === idOrFilter; } : idOrFilter;
        var r = this.flatColumns;
        for (var _i = 0, r_1 = r; _i < r_1.length; _i++) {
            var v = r_1[_i];
            if (filter(v)) {
                return v;
            }
        }
        return null;
    };
    Ranking.prototype.isFiltered = function () {
        return this.columns.some(function (d) { return d.isFiltered(); });
    };
    Ranking.prototype.filter = function (row) {
        return this.columns.every(function (d) { return d.filter(row); });
    };
    Ranking.prototype.findMyRanker = function () {
        return this;
    };
    Object.defineProperty(Ranking.prototype, "fqid", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Ranking.prototype.markDirty = function (type) {
        if (type === void 0) { type = 'all'; }
        switch (type) {
            case 'header':
                return this.fire([Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY]);
            case 'values':
                return this.fire([Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY]);
            default:
                return this.fire([Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY]);
        }
    };
    Ranking.EVENT_WIDTH_CHANGED = Column.EVENT_WIDTH_CHANGED;
    Ranking.EVENT_FILTER_CHANGED = NumberColumn.EVENT_FILTER_CHANGED;
    Ranking.EVENT_LABEL_CHANGED = Column.EVENT_LABEL_CHANGED;
    Ranking.EVENT_ADD_COLUMN = CompositeColumn.EVENT_ADD_COLUMN;
    Ranking.EVENT_MOVE_COLUMN = CompositeColumn.EVENT_MOVE_COLUMN;
    Ranking.EVENT_REMOVE_COLUMN = CompositeColumn.EVENT_REMOVE_COLUMN;
    Ranking.EVENT_DIRTY = Column.EVENT_DIRTY;
    Ranking.EVENT_DIRTY_HEADER = Column.EVENT_DIRTY_HEADER;
    Ranking.EVENT_DIRTY_VALUES = Column.EVENT_DIRTY_VALUES;
    Ranking.EVENT_COLUMN_VISIBILITY_CHANGED = Column.EVENT_VISIBILITY_CHANGED;
    Ranking.EVENT_SORT_CRITERIA_CHANGED = 'sortCriteriaChanged';
    Ranking.EVENT_GROUP_CRITERIA_CHANGED = 'groupCriteriaChanged';
    Ranking.EVENT_GROUP_SORT_CRITERIA_CHANGED = 'groupSortCriteriaChanged';
    Ranking.EVENT_DIRTY_ORDER = 'dirtyOrder';
    Ranking.EVENT_ORDER_CHANGED = 'orderChanged';
    Ranking.EVENT_GROUPS_CHANGED = 'groupsChanged';
    return Ranking;
}(AEventDispatcher));
export default Ranking;
function equalCriteria(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    return a.every(function (ai, i) {
        var bi = b[i];
        return ai.col === bi.col && ai.asc === bi.asc;
    });
}
//# sourceMappingURL=Ranking.js.map