import { timeFormat } from 'd3-time-format';
import Column from './Column';
import { isNumberIncluded } from './INumberColumn';
import { timeDay, timeMonth, timeWeek, timeMinute, timeSecond, timeHour } from 'd3-time';
import { equal } from '../internal/utils';
export { restoreNumberFilter as restoreDateFilter, noNumberFilter as noDateFilter, isEqualNumberFilter as isEqualDateFilter, isDummyNumberFilter as isDummyDateFilter } from './INumberColumn';
export function isDateColumn(col) {
    return (col instanceof Column && typeof col.getDate === 'function' || (!(col instanceof Column) && col.type.startsWith('date')));
}
export function isDateIncluded(filter, value) {
    if (!filter) {
        return true;
    }
    if (value == null || !(value instanceof Date)) {
        return !filter.filterMissing;
    }
    return isNumberIncluded(filter, value.getTime());
}
export function defaultDateGrouper() {
    return { granularity: 'month', circular: false };
}
export function isDefaultDateGrouper(grouper) {
    return equal(defaultDateGrouper(), grouper);
}
export function toDateGroup(grouper, value) {
    switch (grouper.granularity) {
        case 'century':
            var centuryP = Math.floor(value.getFullYear() / 100);
            if (grouper.circular) {
                var century = centuryP % 10;
                return {
                    value: century,
                    name: "*" + century + "00"
                };
            }
            return {
                value: centuryP,
                name: centuryP + "00"
            };
        case 'decade':
            var decadeP = Math.floor(value.getFullYear() / 10);
            if (grouper.circular) {
                var decade = decadeP % 10;
                return {
                    value: decade,
                    name: "**" + decade + "0"
                };
            }
            return {
                value: decadeP,
                name: decadeP + "0"
            };
        case 'year':
            if (grouper.circular) {
                var year = value.getFullYear() % 10;
                return {
                    value: year,
                    name: "***" + year
                };
            }
            return {
                value: value.getFullYear(),
                name: String(value.getFullYear())
            };
        case 'month':
            if (grouper.circular) {
                return {
                    value: value.getMonth(),
                    name: timeFormat('%B')(value)
                };
            }
            return {
                value: timeMonth(value).getTime(),
                name: timeFormat('%B %Y')(value)
            };
        case 'week':
            if (grouper.circular) {
                return {
                    value: value.getMonth(),
                    name: timeFormat('%B')(value)
                };
            }
            return {
                value: timeWeek(value).getTime(),
                name: timeFormat('%B %Y')(value)
            };
        case 'day_of_week':
            if (grouper.circular) {
                return {
                    value: value.getDay(),
                    name: timeFormat('%A')(value)
                };
            }
            return {
                value: timeDay(value).getTime(),
                name: timeFormat('%x')(value)
            };
        case 'day_of_month':
            if (grouper.circular) {
                return {
                    value: value.getDate(),
                    name: timeFormat('%d')(value)
                };
            }
            return {
                value: timeDay(value).getTime(),
                name: timeFormat('%x')(value)
            };
        case 'day_of_year':
            if (grouper.circular) {
                var v = timeFormat('%j')(value);
                return {
                    value: parseInt(v, 10),
                    name: v
                };
            }
            return {
                value: timeDay(value).getTime(),
                name: timeFormat('%x')(value)
            };
        case 'hour':
            if (grouper.circular) {
                return {
                    value: value.getHours(),
                    name: timeFormat('%A')(value)
                };
            }
            return {
                value: timeHour(value).getTime(),
                name: timeFormat('%x')(value)
            };
        case 'minute':
            if (grouper.circular) {
                return {
                    value: value.getMinutes(),
                    name: timeFormat('%A')(value)
                };
            }
            return {
                value: timeMinute(value).getTime(),
                name: timeFormat('%x')(value)
            };
        case 'second':
            if (grouper.circular) {
                return {
                    value: value.getSeconds(),
                    name: timeFormat('%A')(value)
                };
            }
            return {
                value: timeSecond(value).getTime(),
                name: timeFormat('%x')(value)
            };
    }
    return {
        value: value.getTime(),
        name: value.toString()
    };
}
//# sourceMappingURL=IDateColumn.js.map