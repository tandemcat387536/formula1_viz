import { __decorate, __extends } from "tslib";
import { Category, toolbar } from './annotations';
import Column from './Column';
import ValueColumn from './ValueColumn';
import { compareCategory, groupCompareCategory, isEqualCategoricalFilter, isCategoryIncluded, toCategories, toCategory, } from './ICategoricalColumn';
import { missingGroup } from './missing';
var CategoricalColumn = (function (_super) {
    __extends(CategoricalColumn, _super);
    function CategoricalColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.lookup = new Map();
        _this.currentFilter = null;
        _this.categories = toCategories(desc);
        _this.missingCategory = desc.missingCategory ? toCategory(desc.missingCategory, NaN) : null;
        _this.categories.forEach(function (d) { return _this.lookup.set(d.name, d); });
        return _this;
    }
    CategoricalColumn_1 = CategoricalColumn;
    CategoricalColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([CategoricalColumn_1.EVENT_FILTER_CHANGED]);
    };
    CategoricalColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    CategoricalColumn.prototype.getValue = function (row) {
        var v = this.getCategory(row);
        return v ? v.name : null;
    };
    CategoricalColumn.prototype.getCategory = function (row) {
        var v = _super.prototype.getValue.call(this, row);
        if (!v) {
            return this.missingCategory;
        }
        var vs = String(v);
        return this.lookup.has(vs) ? this.lookup.get(vs) : this.missingCategory;
    };
    Object.defineProperty(CategoricalColumn.prototype, "dataLength", {
        get: function () {
            return this.categories.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalColumn.prototype, "labels", {
        get: function () {
            return this.categories.map(function (d) { return d.label; });
        },
        enumerable: true,
        configurable: true
    });
    CategoricalColumn.prototype.getLabel = function (row) {
        var v = this.getCategory(row);
        return v ? v.label : '';
    };
    CategoricalColumn.prototype.getColor = function (row) {
        var v = this.getCategory(row);
        return v ? v.color : Column.DEFAULT_COLOR;
    };
    CategoricalColumn.prototype.getValues = function (row) {
        var v = this.getCategory(row);
        return this.categories.map(function (d) { return d === v; });
    };
    CategoricalColumn.prototype.getLabels = function (row) {
        return this.getValues(row).map(String);
    };
    CategoricalColumn.prototype.getMap = function (row) {
        var cats = this.categories;
        return this.getValues(row).map(function (value, i) { return ({ key: cats[i].label, value: value }); });
    };
    CategoricalColumn.prototype.getMapLabel = function (row) {
        var cats = this.categories;
        return this.getLabels(row).map(function (value, i) { return ({ key: cats[i].label, value: value }); });
    };
    CategoricalColumn.prototype.getSet = function (row) {
        var cat = this.getCategory(row);
        var r = new Set();
        if (cat && cat !== this.missingCategory) {
            r.add(cat);
        }
        return r;
    };
    CategoricalColumn.prototype.isMissing = function (row) {
        return this.getCategory(row) === this.missingCategory;
    };
    CategoricalColumn.prototype.dump = function (toDescRef) {
        var r = _super.prototype.dump.call(this, toDescRef);
        r.filter = this.currentFilter;
        return r;
    };
    CategoricalColumn.prototype.restore = function (dump, factory) {
        _super.prototype.restore.call(this, dump, factory);
        if (!('filter' in dump)) {
            this.currentFilter = null;
            return;
        }
        var bak = dump.filter;
        if (typeof bak === 'string' || Array.isArray(bak)) {
            this.currentFilter = { filter: bak, filterMissing: false };
        }
        else {
            this.currentFilter = bak;
        }
    };
    CategoricalColumn.prototype.isFiltered = function () {
        return this.currentFilter != null;
    };
    CategoricalColumn.prototype.filter = function (row) {
        return isCategoryIncluded(this.currentFilter, this.getCategory(row));
    };
    CategoricalColumn.prototype.getFilter = function () {
        return this.currentFilter == null ? null : Object.assign({}, this.currentFilter);
    };
    CategoricalColumn.prototype.setFilter = function (filter) {
        if (isEqualCategoricalFilter(this.currentFilter, filter)) {
            return;
        }
        this.fire([CategoricalColumn_1.EVENT_FILTER_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY], this.currentFilter, this.currentFilter = filter);
    };
    CategoricalColumn.prototype.compare = function (a, b) {
        return compareCategory(this.getCategory(a), this.getCategory(b));
    };
    CategoricalColumn.prototype.group = function (row) {
        var cat = this.getCategory(row);
        if (!cat) {
            return missingGroup;
        }
        return { name: cat.label, color: cat.color };
    };
    CategoricalColumn.prototype.groupCompare = function (a, b) {
        return groupCompareCategory(a.rows, b.rows, this);
    };
    CategoricalColumn.prototype.getGroupRenderer = function () {
        var current = _super.prototype.getGroupRenderer.call(this);
        if (current === this.desc.type && this.isGroupedBy() >= 0) {
            return 'catdistributionbar';
        }
        return current;
    };
    var CategoricalColumn_1;
    CategoricalColumn.EVENT_FILTER_CHANGED = 'filterChanged';
    CategoricalColumn = CategoricalColumn_1 = __decorate([
        toolbar('group', 'groupBy', 'sortGroupBy', 'filterCategorical'),
        Category('categorical')
    ], CategoricalColumn);
    return CategoricalColumn;
}(ValueColumn));
export default CategoricalColumn;
//# sourceMappingURL=CategoricalColumn.js.map