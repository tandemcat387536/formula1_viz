import { __decorate, __extends } from "tslib";
import { Category } from './annotations';
import Column from './Column';
import ValueColumn from './ValueColumn';
import { range } from 'd3-array';
var ArrayColumn = (function (_super) {
    __extends(ArrayColumn, _super);
    function ArrayColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this._dataLength = desc.dataLength == null || isNaN(desc.dataLength) ? null : desc.dataLength;
        _this.originalLabels = desc.labels || (range(_this._dataLength == null ? 0 : _this._dataLength).map(function (_d, i) { return "Column " + i; }));
        _this.splicer = {
            length: _this._dataLength,
            splice: function (v) { return v; }
        };
        return _this;
    }
    ArrayColumn_1 = ArrayColumn;
    ArrayColumn.prototype.setSplicer = function (splicer) {
        this.fire([ArrayColumn_1.EVENT_SPLICE_CHANGED, Column.EVENT_DIRTY_VALUES, Column.EVENT_DIRTY_HEADER, Column.EVENT_DIRTY], this.splicer, this.splicer = splicer);
    };
    Object.defineProperty(ArrayColumn.prototype, "labels", {
        get: function () {
            if (this.splicer) {
                return this.splicer.splice(this.originalLabels);
            }
            return this.originalLabels;
        },
        enumerable: true,
        configurable: true
    });
    ArrayColumn.prototype.getSplicer = function () {
        return this.splicer;
    };
    Object.defineProperty(ArrayColumn.prototype, "dataLength", {
        get: function () {
            if (this.splicer) {
                return this.splicer.length;
            }
            return this._dataLength;
        },
        enumerable: true,
        configurable: true
    });
    ArrayColumn.prototype.getValue = function (row) {
        return this.getValues(row);
    };
    ArrayColumn.prototype.getValues = function (row) {
        var r = _super.prototype.getValue.call(this, row);
        if (this.splicer && r != null) {
            r = this.splicer.splice(r);
        }
        return r == null ? [] : r;
    };
    ArrayColumn.prototype.getLabels = function (row) {
        return this.getValues(row).map(String);
    };
    ArrayColumn.prototype.getLabel = function (row) {
        var v = this.getLabels(row);
        if (!v) {
            return '';
        }
        return v.toString();
    };
    ArrayColumn.prototype.getMap = function (row) {
        var labels = this.labels;
        return this.getValues(row).map(function (value, i) { return ({ key: labels[i], value: value }); });
    };
    ArrayColumn.prototype.getMapLabel = function (row) {
        var labels = this.labels;
        return this.getLabels(row).map(function (value, i) { return ({ key: labels[i], value: value }); });
    };
    ArrayColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([ArrayColumn_1.EVENT_SPLICE_CHANGED]);
    };
    ArrayColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    var ArrayColumn_1;
    ArrayColumn.EVENT_SPLICE_CHANGED = 'spliceChanged';
    ArrayColumn = ArrayColumn_1 = __decorate([
        Category('array')
    ], ArrayColumn);
    return ArrayColumn;
}(ValueColumn));
export default ArrayColumn;
//# sourceMappingURL=ArrayColumn.js.map