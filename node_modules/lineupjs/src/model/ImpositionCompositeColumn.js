import { __decorate, __extends, __spreadArrays } from "tslib";
import { suffix } from '../internal/AEventDispatcher';
import { toolbar, SortByDefault } from './annotations';
import Column from './Column';
import CompositeColumn from './CompositeColumn';
import { isNumberColumn } from './INumberColumn';
import NumberColumn from './NumberColumn';
import { isMapAbleColumn } from './MappingFunction';
export function createImpositionDesc(label) {
    if (label === void 0) { label = 'Imposition'; }
    return { type: 'imposition', label: label };
}
var ImpositionCompositeColumn = (function (_super) {
    __extends(ImpositionCompositeColumn, _super);
    function ImpositionCompositeColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.setDefaultRenderer('number');
        _this.setDefaultGroupRenderer('boxplot');
        return _this;
    }
    ImpositionCompositeColumn_1 = ImpositionCompositeColumn;
    Object.defineProperty(ImpositionCompositeColumn.prototype, "label", {
        get: function () {
            var l = _super.prototype.getMetaData.call(this).label;
            var c = this._children;
            if (l !== 'Imposition' || c.length === 0) {
                return l;
            }
            if (c.length === 1) {
                return c[0].label;
            }
            return c[0].label + " (" + c.slice(1).map(function (c) { return c.label; }).join(', ') + ")";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImpositionCompositeColumn.prototype, "wrapper", {
        get: function () {
            var c = this._children;
            return c.length === 0 ? null : c[0];
        },
        enumerable: true,
        configurable: true
    });
    ImpositionCompositeColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([ImpositionCompositeColumn_1.EVENT_MAPPING_CHANGED, ImpositionCompositeColumn_1.EVENT_COLOR_MAPPING_CHANGED]);
    };
    ImpositionCompositeColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    ImpositionCompositeColumn.prototype.getLabel = function (row) {
        var c = this._children;
        if (c.length === 0) {
            return '';
        }
        if (c.length === 1) {
            return c[0].getLabel(row);
        }
        return c[0].getLabel(row) + " (" + c.slice(1).map(function (c) { return c.label + " = " + c.getLabel(row); }).join(', ') + ")";
    };
    ImpositionCompositeColumn.prototype.getColor = function (row) {
        var c = this._children;
        switch (c.length) {
            case 0:
                return Column.DEFAULT_COLOR;
            case 1:
                return c[0].getColor(row);
            default:
                return c[1].getColor(row);
        }
    };
    ImpositionCompositeColumn.prototype.getValue = function (row) {
        var w = this.wrapper;
        return w ? w.getValue(row) : NaN;
    };
    ImpositionCompositeColumn.prototype.getNumber = function (row) {
        var w = this.wrapper;
        return w ? w.getNumber(row) : NaN;
    };
    ImpositionCompositeColumn.prototype.getRawNumber = function (row) {
        var w = this.wrapper;
        return w ? w.getRawNumber(row) : NaN;
    };
    ImpositionCompositeColumn.prototype.getExportValue = function (row, format) {
        if (format === 'json') {
            if (this.isMissing(row)) {
                return null;
            }
            return {
                label: this.getLabel(row),
                color: this.getColor(row),
                value: this.getRawNumber(row)
            };
        }
        return _super.prototype.getExportValue.call(this, row, format);
    };
    ImpositionCompositeColumn.prototype.isMissing = function (row) {
        var w = this.wrapper;
        return w ? w.isMissing(row) : true;
    };
    ImpositionCompositeColumn.prototype.compare = function (a, b) {
        return NumberColumn.prototype.compare.call(this, a, b);
    };
    ImpositionCompositeColumn.prototype.group = function (row) {
        return NumberColumn.prototype.group.call(this, row);
    };
    ImpositionCompositeColumn.prototype.groupCompare = function (a, b) {
        return NumberColumn.prototype.groupCompare.call(this, a, b);
    };
    ImpositionCompositeColumn.prototype.insert = function (col, index) {
        if (this._children.length === 0 && !isNumberColumn(col)) {
            return null;
        }
        if (this._children.length >= 2) {
            return null;
        }
        return _super.prototype.insert.call(this, col, index);
    };
    ImpositionCompositeColumn.prototype.insertImpl = function (col, index) {
        if (isNumberColumn(col)) {
            this.forward.apply(this, __spreadArrays([col], suffix('.impose', NumberColumn.EVENT_MAPPING_CHANGED)));
        }
        if (isMapAbleColumn(col)) {
            this.forward.apply(this, __spreadArrays([col], suffix('.impose', NumberColumn.EVENT_COLOR_MAPPING_CHANGED)));
        }
        return _super.prototype.insertImpl.call(this, col, index);
    };
    ImpositionCompositeColumn.prototype.removeImpl = function (child, index) {
        if (isNumberColumn(child)) {
            this.unforward.apply(this, __spreadArrays([child], suffix('.impose', NumberColumn.EVENT_MAPPING_CHANGED)));
        }
        if (isMapAbleColumn(child)) {
            this.unforward.apply(this, __spreadArrays([child], suffix('.impose', NumberColumn.EVENT_COLOR_MAPPING_CHANGED)));
        }
        return _super.prototype.removeImpl.call(this, child, index);
    };
    var ImpositionCompositeColumn_1;
    ImpositionCompositeColumn.EVENT_MAPPING_CHANGED = NumberColumn.EVENT_MAPPING_CHANGED;
    ImpositionCompositeColumn.EVENT_COLOR_MAPPING_CHANGED = NumberColumn.EVENT_COLOR_MAPPING_CHANGED;
    ImpositionCompositeColumn = ImpositionCompositeColumn_1 = __decorate([
        toolbar('filterNumber', 'colorMapped', 'editMapping'),
        SortByDefault('descending')
    ], ImpositionCompositeColumn);
    return ImpositionCompositeColumn;
}(CompositeColumn));
export default ImpositionCompositeColumn;
//# sourceMappingURL=ImpositionCompositeColumn.js.map