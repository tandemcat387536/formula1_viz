import { IDataRow, IGroupData, IGroup } from './interfaces';
import ValueColumn, { IValueColumnDesc, dataLoaded } from './ValueColumn';
import { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import { IEventListener } from '../internal/AEventDispatcher';
import Column from './Column';
import { IDateFilter, IDateDesc, IDateGrouper, IDateColumn } from './IDateColumn';
export declare type IDateColumnDesc = IValueColumnDesc<Date> & IDateDesc;
export declare function filterChanged(previous: IDateFilter | null, current: IDateFilter | null): void;
export declare function groupingChanged(previous: IDateGrouper | null, current: IDateGrouper | null): void;
export default class DateColumn extends ValueColumn<Date> implements IDateColumn {
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    static readonly EVENT_GROUPING_CHANGED = "groupingChanged";
    private readonly format;
    private readonly parse;
    private currentFilter;
    private currentGrouper;
    constructor(id: string, desc: Readonly<IDateColumnDesc>);
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    protected createEventList(): string[];
    on(type: typeof DateColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof DateColumn.EVENT_GROUPING_CHANGED, listener: typeof groupingChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getValue(row: IDataRow): Date | null;
    getDate(row: IDataRow): Date | null;
    getLabel(row: IDataRow): string;
    isFiltered(): boolean;
    getFilter(): IDateFilter;
    setFilter(value?: IDateFilter): void;
    filter(row: IDataRow): boolean;
    compare(a: IDataRow, b: IDataRow): number;
    getDateGrouper(): IDateGrouper;
    setDateGrouper(value: IDateGrouper): void;
    group(row: IDataRow): IGroup;
    groupCompare(a: IGroupData, b: IGroupData): number;
}
