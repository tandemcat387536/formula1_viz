import { scaleLinear, scaleLog, scalePow, scaleSqrt } from 'd3-scale';
import { similar } from '../internal';
function toScale(type) {
    if (type === void 0) { type = 'linear'; }
    switch (type) {
        case 'log':
            return scaleLog().clamp(true);
        case 'sqrt':
            return scaleSqrt().clamp(true);
        case 'pow1.1':
            return scalePow().exponent(1.1).clamp(true);
        case 'pow2':
            return scalePow().exponent(2).clamp(true);
        case 'pow3':
            return scalePow().exponent(3).clamp(true);
        default:
            return scaleLinear().clamp(true);
    }
}
export function isMapAbleColumn(col) {
    return typeof col.getMapping === 'function';
}
function isSame(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    return a.every(function (ai, i) { return similar(ai, b[i], 0.0001); });
}
function fixDomain(domain, type) {
    if (type === 'log' && domain[0] === 0) {
        domain[0] = 0.0000001;
    }
    return domain;
}
var ScaleMappingFunction = (function () {
    function ScaleMappingFunction(domain, type, range) {
        if (domain === void 0) { domain = [0, 1]; }
        if (type === void 0) { type = 'linear'; }
        if (range === void 0) { range = [0, 1]; }
        this.type = type;
        this.s = toScale(type).domain(fixDomain(domain, this.type)).range(range);
    }
    Object.defineProperty(ScaleMappingFunction.prototype, "domain", {
        get: function () {
            return this.s.domain();
        },
        set: function (domain) {
            this.s.domain(fixDomain(domain, this.type));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScaleMappingFunction.prototype, "range", {
        get: function () {
            return this.s.range();
        },
        set: function (range) {
            this.s.range(range);
        },
        enumerable: true,
        configurable: true
    });
    ScaleMappingFunction.prototype.getRange = function (format) {
        return [format(this.invert(0)), format(this.invert(1))];
    };
    ScaleMappingFunction.prototype.apply = function (v) {
        return this.s(v);
    };
    ScaleMappingFunction.prototype.invert = function (r) {
        return this.s.invert(r);
    };
    Object.defineProperty(ScaleMappingFunction.prototype, "scaleType", {
        get: function () {
            return this.type;
        },
        enumerable: true,
        configurable: true
    });
    ScaleMappingFunction.prototype.dump = function () {
        return {
            type: this.type,
            domain: this.domain,
            range: this.range
        };
    };
    ScaleMappingFunction.prototype.eq = function (other) {
        if (!(other instanceof ScaleMappingFunction)) {
            return false;
        }
        var that = other;
        return that.type === this.type && isSame(this.domain, that.domain) && isSame(this.range, that.range);
    };
    ScaleMappingFunction.prototype.restore = function (dump) {
        this.type = dump.type;
        this.s = toScale(dump.type).domain(dump.domain).range(dump.range);
    };
    ScaleMappingFunction.prototype.clone = function () {
        return new ScaleMappingFunction(this.domain, this.type, this.range);
    };
    return ScaleMappingFunction;
}());
export { ScaleMappingFunction };
var ScriptMappingFunction = (function () {
    function ScriptMappingFunction(domain, _code) {
        if (domain === void 0) { domain = [0, 1]; }
        if (_code === void 0) { _code = 'return this.linear(value,this.value_min,this.value_max);'; }
        this.domain = domain;
        this._code = _code;
        this.f = new Function('value', _code);
    }
    Object.defineProperty(ScriptMappingFunction.prototype, "code", {
        get: function () {
            return this._code;
        },
        set: function (code) {
            if (this._code === code) {
                return;
            }
            this._code = code;
            this.f = new Function('value', code);
        },
        enumerable: true,
        configurable: true
    });
    ScriptMappingFunction.prototype.getRange = function () {
        return ['?', '?'];
    };
    ScriptMappingFunction.prototype.apply = function (v) {
        var min = this.domain[0], max = this.domain[this.domain.length - 1];
        var r = this.f.call({
            value_min: min,
            value_max: max,
            value_range: max - min,
            value_domain: this.domain.slice(),
            linear: function (v, mi, ma) { return (v - mi) / (ma - mi); }
        }, v);
        if (typeof r === 'number') {
            return Math.max(Math.min(r, 1), 0);
        }
        return NaN;
    };
    ScriptMappingFunction.prototype.dump = function () {
        return {
            type: 'script',
            code: this.code,
            domain: this.domain
        };
    };
    ScriptMappingFunction.prototype.eq = function (other) {
        if (!(other instanceof ScriptMappingFunction)) {
            return false;
        }
        var that = other;
        return that.code === this.code;
    };
    ScriptMappingFunction.prototype.restore = function (dump) {
        this.code = dump.code;
        this.domain = dump.domain;
    };
    ScriptMappingFunction.prototype.clone = function () {
        return new ScriptMappingFunction(this.domain, this.code);
    };
    return ScriptMappingFunction;
}());
export { ScriptMappingFunction };
export function createMappingFunction(dump) {
    if (dump.type === 'script') {
        var s = new ScriptMappingFunction();
        s.restore(dump);
        return s;
    }
    var l = new ScaleMappingFunction();
    l.restore(dump);
    return l;
}
export function restoreMapping(desc) {
    if (desc.map) {
        return createMappingFunction(desc.map);
    }
    if (desc.domain) {
        return new ScaleMappingFunction(desc.domain, 'linear', desc.range || [0, 1]);
    }
    return new ScaleMappingFunction([0, 1], 'linear', [0, 1]);
}
//# sourceMappingURL=MappingFunction.js.map