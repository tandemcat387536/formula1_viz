import { __extends } from "tslib";
import ActionColumn from './ActionColumn';
import AggregateGroupColumn from './AggregateGroupColumn';
import AnnotateColumn from './AnnotateColumn';
import BooleanColumn from './BooleanColumn';
import BooleansColumn from './BooleansColumn';
import BoxPlotColumn from './BoxPlotColumn';
import CategoricalColumn from './CategoricalColumn';
import CategoricalMapColumn from './CategoricalMapColumn';
import CategoricalsColumn from './CategoricalsColumn';
import DateColumn from './DateColumn';
import DatesColumn from './DatesColumn';
import DatesMapColumn from './DatesMapColumn';
import GroupColumn from './GroupColumn';
import HierarchyColumn from './HierarchyColumn';
import ImpositionCompositeColumn from './ImpositionCompositeColumn';
import ImpositionCompositesColumn from './ImpositionCompositesColumn';
import NestedColumn from './NestedColumn';
import NumberColumn from './NumberColumn';
import NumberMapColumn from './NumberMapColumn';
import NumbersColumn from './NumbersColumn';
import OrdinalColumn from './OrdinalColumn';
import RankColumn from './RankColumn';
import ReduceColumn from './ReduceColumn';
import ScriptColumn from './ScriptColumn';
import SelectionColumn from './SelectionColumn';
import SetColumn from './SetColumn';
import StackColumn from './StackColumn';
import StringColumn from './StringColumn';
import StringMapColumn from './StringMapColumn';
import StringsColumn from './StringsColumn';
import ValueColumn from './ValueColumn';
import ImpositionBoxPlotColumn from './ImpositionBoxPlotColumn';
import LinkColumn from './LinkColumn';
import LinkMapColumn from './LinkMapColumn';
import LinksColumn from './LinksColumn';
export { isSupportType, Category, SupportType, SortByDefault, Categories, toolbar, dialogAddons, categoryOfDesc, categoryOf } from './annotations';
export { isMissingValue, isUnknown, FIRST_IS_NAN, FIRST_IS_MISSING, missingGroup } from './missing';
export * from './Group';
export * from './interfaces';
export * from './ICategoricalColumn';
export * from './INumberColumn';
export * from './IDateColumn';
export * from './IArrayColumn';
export * from './MappingFunction';
export { default as ActionColumn } from './ActionColumn';
export * from './ActionColumn';
export { default as AggregateGroupColumn, createAggregateDesc } from './AggregateGroupColumn';
export { default as AnnotateColumn } from './AnnotateColumn';
export { default as ArrayColumn } from './ArrayColumn';
export { default as BooleanColumn } from './BooleanColumn';
export * from './BooleansColumn';
export { default as BooleansColumn } from './BooleansColumn';
export { default as BoxPlotColumn } from './BoxPlotColumn';
export { default as CategoricalColumn } from './CategoricalColumn';
export * from './CategoricalMapColumn';
export { default as CategoricalMapColumn } from './CategoricalMapColumn';
export * from './CategoricalsColumn';
export { default as CategoricalsColumn } from './CategoricalsColumn';
export { default, default as Column } from './Column';
export { default as CompositeColumn, isMultiLevelColumn } from './CompositeColumn';
export * from './CompositeNumberColumn';
export { default as CompositeNumberColumn } from './CompositeNumberColumn';
export { default as DateColumn } from './DateColumn';
export { default as DatesMapColumn } from './DatesMapColumn';
export { default as DatesColumn } from './DatesColumn';
export * from './DummyColumn';
export { default as DummyColumn } from './DummyColumn';
export { default as GroupColumn, createGroupDesc, EGroupSortMethod } from './GroupColumn';
export { default as HierarchyColumn, resolveInnerNodes, isHierarchical, deriveHierarchy } from './HierarchyColumn';
export * from './ImpositionBoxPlotColumn';
export { default as ImpositionBoxPlotColumn } from './ImpositionBoxPlotColumn';
export * from './ImpositionCompositeColumn';
export { default as ImpositionCompositeColumn } from './ImpositionCompositeColumn';
export * from './ImpositionCompositesColumn';
export { default as ImpositionCompositesColumn } from './ImpositionCompositesColumn';
export * from './MapColumn';
export { default as MapColumn } from './MapColumn';
export { default as MultiLevelCompositeColumn } from './MultiLevelCompositeColumn';
export * from './NestedColumn';
export { default as NestedColumn } from './NestedColumn';
export { default as NumberColumn, isNumberColumn } from './NumberColumn';
export { default as NumberMapColumn } from './NumberMapColumn';
export { default as NumbersColumn } from './NumbersColumn';
export { default as OrdinalColumn } from './OrdinalColumn';
export * from './RankColumn';
export { default as RankColumn } from './RankColumn';
export { default as Ranking } from './Ranking';
export { default as ReduceColumn, createReduceDesc } from './ReduceColumn';
export { default as ScriptColumn, createScriptDesc } from './ScriptColumn';
export { default as SelectionColumn, createSelectionDesc } from './SelectionColumn';
export { default as SetColumn } from './SetColumn';
export { default as StackColumn, createStackDesc } from './StackColumn';
export { default as StringColumn, EAlignment, EStringGroupCriteriaType } from './StringColumn';
export * from './StringMapColumn';
export { default as StringMapColumn } from './StringMapColumn';
export * from './StringsColumn';
export { default as StringsColumn } from './StringsColumn';
export { default as ValueColumn } from './ValueColumn';
export { default as LinkColumn } from './LinkColumn';
export * from './LinkMapColumn';
export { default as LinkMapColumn } from './LinkMapColumn';
export * from './LinksColumn';
export { default as LinksColumn } from './LinksColumn';
export function defineColumn(name, functions) {
    if (functions === void 0) { functions = {}; }
    var CustomColumn = (function (_super) {
        __extends(CustomColumn, _super);
        function CustomColumn(id, desc) {
            var _this = _super.call(this, id, desc) || this;
            if (typeof (_this.init) === 'function') {
                _this.init.apply(_this, [].slice.apply(arguments));
            }
            return _this;
        }
        CustomColumn.prototype.init = function () {
        };
        return CustomColumn;
    }(ValueColumn));
    CustomColumn.prototype.toString = function () { return name; };
    CustomColumn.prototype = Object.assign(CustomColumn.prototype, functions);
    return CustomColumn;
}
export function models() {
    return {
        actions: ActionColumn,
        aggregate: AggregateGroupColumn,
        annotate: AnnotateColumn,
        boolean: BooleanColumn,
        booleans: BooleansColumn,
        boxplot: BoxPlotColumn,
        categorical: CategoricalColumn,
        categoricalMap: CategoricalMapColumn,
        categoricals: CategoricalsColumn,
        date: DateColumn,
        dateMap: DatesMapColumn,
        dates: DatesColumn,
        group: GroupColumn,
        hierarchy: HierarchyColumn,
        imposition: ImpositionCompositeColumn,
        impositionBoxPlot: ImpositionBoxPlotColumn,
        impositions: ImpositionCompositesColumn,
        reduce: ReduceColumn,
        nested: NestedColumn,
        number: NumberColumn,
        numbers: NumbersColumn,
        numberMap: NumberMapColumn,
        ordinal: OrdinalColumn,
        rank: RankColumn,
        script: ScriptColumn,
        selection: SelectionColumn,
        set: SetColumn,
        stack: StackColumn,
        string: StringColumn,
        stringMap: StringMapColumn,
        strings: StringsColumn,
        link: LinkColumn,
        linkMap: LinkMapColumn,
        links: LinksColumn
    };
}
//# sourceMappingURL=index.js.map