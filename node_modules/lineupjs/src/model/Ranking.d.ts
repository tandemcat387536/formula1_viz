import AEventDispatcher from '../internal/AEventDispatcher';
import Column, { IColumnParent, IFlatColumn, visibilityChanged, dirtyValues, dirtyHeader, labelChanged, widthChanged, dirty } from './Column';
import { IOrderedGroup } from './Group';
import { IDataRow, IGroup, IGroupData } from './interfaces';
import { filterChanged } from './NumberColumn';
import { IEventListener } from '../internal/AEventDispatcher';
export interface ISortCriteria {
    readonly col: Column;
    readonly asc: boolean;
}
export declare function addColumn(col: Column, index: number): void;
export declare function moveColumn(col: Column, index: number, oldIndex: number): void;
export declare function removeColumn(col: Column, index: number): void;
export declare function sortCriteriaChanged(previous: ISortCriteria[], current: ISortCriteria[]): void;
export declare function groupCriteriaChanged(previous: Column[], current: Column[]): void;
export declare function groupSortCriteriaChanged(previous: ISortCriteria[], current: ISortCriteria[]): void;
export declare function dirtyOrder(): void;
export declare function orderChanged(previous: number[], current: number[], previousGroups: IOrderedGroup[], currentGroups: IOrderedGroup[]): void;
export declare function groupsChanged(previous: number[], current: number[], previousGroups: IOrderedGroup[], currentGroups: IOrderedGroup[]): void;
export default class Ranking extends AEventDispatcher implements IColumnParent {
    id: string;
    private maxSortCriteria;
    private maxGroupColumns;
    static readonly EVENT_WIDTH_CHANGED = "widthChanged";
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    static readonly EVENT_LABEL_CHANGED = "labelChanged";
    static readonly EVENT_ADD_COLUMN = "addColumn";
    static readonly EVENT_MOVE_COLUMN = "moveColumn";
    static readonly EVENT_REMOVE_COLUMN = "removeColumn";
    static readonly EVENT_DIRTY = "dirty";
    static readonly EVENT_DIRTY_HEADER = "dirtyHeader";
    static readonly EVENT_DIRTY_VALUES = "dirtyValues";
    static readonly EVENT_COLUMN_VISIBILITY_CHANGED = "visibilityChanged";
    static readonly EVENT_SORT_CRITERIA_CHANGED = "sortCriteriaChanged";
    static readonly EVENT_GROUP_CRITERIA_CHANGED = "groupCriteriaChanged";
    static readonly EVENT_GROUP_SORT_CRITERIA_CHANGED = "groupSortCriteriaChanged";
    static readonly EVENT_DIRTY_ORDER = "dirtyOrder";
    static readonly EVENT_ORDER_CHANGED = "orderChanged";
    static readonly EVENT_GROUPS_CHANGED = "groupsChanged";
    private label;
    private readonly sortCriteria;
    private readonly groupSortCriteria;
    private readonly groupColumns;
    private readonly columns;
    readonly comparator: (a: IDataRow, b: IDataRow) => number;
    readonly groupComparator: (a: IGroupData, b: IGroupData) => number;
    readonly grouper: (row: IDataRow) => IGroup;
    readonly dirtyOrder: () => void;
    private groups;
    constructor(id: string, maxSortCriteria?: number, maxGroupColumns?: number);
    protected createEventList(): string[];
    on(type: typeof Ranking.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Ranking.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof Ranking.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Ranking.EVENT_ADD_COLUMN, listener: typeof addColumn | null): this;
    on(type: typeof Ranking.EVENT_MOVE_COLUMN, listener: typeof moveColumn | null): this;
    on(type: typeof Ranking.EVENT_REMOVE_COLUMN, listener: typeof removeColumn | null): this;
    on(type: typeof Ranking.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Ranking.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Ranking.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Ranking.EVENT_COLUMN_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: typeof Ranking.EVENT_SORT_CRITERIA_CHANGED, listener: typeof sortCriteriaChanged | null): this;
    on(type: typeof Ranking.EVENT_GROUP_CRITERIA_CHANGED, listener: typeof groupCriteriaChanged | null): this;
    on(type: typeof Ranking.EVENT_GROUP_SORT_CRITERIA_CHANGED, listener: typeof groupSortCriteriaChanged | null): this;
    on(type: typeof Ranking.EVENT_DIRTY_ORDER, listener: typeof dirtyOrder | null): this;
    on(type: typeof Ranking.EVENT_ORDER_CHANGED, listener: typeof orderChanged | null): this;
    on(type: typeof Ranking.EVENT_GROUPS_CHANGED, listener: typeof groupsChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    assignNewId(idGenerator: () => string): void;
    getLabel(): string;
    setLabel(value: string): void;
    setOrder(order: number[]): void;
    setGroups(groups: IOrderedGroup[]): void;
    getOrder(): number[];
    getGroups(): IOrderedGroup[];
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    flatten(r: IFlatColumn[], offset: number, levelsToGo?: number, padding?: number): number;
    getPrimarySortCriteria(): ISortCriteria | null;
    getSortCriteria(): ISortCriteria[];
    getGroupSortCriteria(): ISortCriteria[];
    toggleSorting(col: Column): boolean;
    private toggleSortingLogic;
    toggleGrouping(col: Column): boolean;
    getGroupCriteria(): Column[];
    sortBy(col: Column, ascending?: boolean, priority?: number): boolean;
    groupSortBy(col: Column, ascending?: boolean, priority?: number): boolean;
    private hierarchyLogic;
    groupBy(col: Column, priority?: number): boolean;
    setSortCriteria(value: ISortCriteria | ISortCriteria[]): boolean;
    setGroupCriteria(column: Column[] | Column): boolean;
    toggleGroupSorting(col: Column): boolean;
    setMaxSortCriteria(maxSortCriteria: number): void;
    getMaxSortCriteria(): number;
    setMaxGroupColumns(maxGroupColumns: number): void;
    getMaxGroupColumns(): number;
    setGroupSortCriteria(value: ISortCriteria | ISortCriteria[]): boolean;
    private triggerGroupResort;
    private triggerResort;
    readonly children: Column[];
    readonly length: number;
    insert(col: Column, index?: number): Column;
    move(col: Column, index?: number): Column | null;
    moveAfter(col: Column, reference: Column): Column | null;
    readonly fqpath: string;
    findByPath(fqpath: string): Column;
    indexOf(col: Column): number;
    at(index: number): Column;
    insertAfter(col: Column, ref: Column): Column | null;
    push(col: Column): Column;
    remove(col: Column): boolean;
    clear(): void;
    readonly flatColumns: Column[];
    find(idOrFilter: string | ((col: Column) => boolean)): Column | null;
    isFiltered(): boolean;
    filter(row: IDataRow): boolean;
    findMyRanker(): this;
    readonly fqid: string;
    markDirty(type?: 'header' | 'values' | 'all'): void;
}
