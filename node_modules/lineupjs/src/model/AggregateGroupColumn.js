import { __decorate, __extends } from "tslib";
import { Category, SupportType } from './annotations';
import Column from './Column';
export function createAggregateDesc(label) {
    if (label === void 0) { label = 'Aggregate Groups'; }
    return { type: 'aggregate', label: label, fixed: true };
}
var AggregateGroupColumn = (function (_super) {
    __extends(AggregateGroupColumn, _super);
    function AggregateGroupColumn(id, desc) {
        var _this = _super.call(this, id, desc) || this;
        _this.setDefaultWidth(20);
        return _this;
    }
    AggregateGroupColumn_1 = AggregateGroupColumn;
    Object.defineProperty(AggregateGroupColumn.prototype, "frozen", {
        get: function () {
            return this.desc.frozen !== false;
        },
        enumerable: true,
        configurable: true
    });
    AggregateGroupColumn.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([AggregateGroupColumn_1.EVENT_AGGREGATE]);
    };
    AggregateGroupColumn.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    AggregateGroupColumn.prototype.isAggregated = function (group) {
        var ranking = this.findMyRanker();
        if (this.desc.isAggregated) {
            return this.desc.isAggregated(ranking, group);
        }
        return false;
    };
    AggregateGroupColumn.prototype.setAggregated = function (group, value) {
        var ranking = this.findMyRanker();
        var current = (this.desc.isAggregated) && this.desc.isAggregated(ranking, group);
        if (current === value) {
            return true;
        }
        if (this.desc.setAggregated) {
            this.desc.setAggregated(ranking, group, value);
        }
        this.fire(AggregateGroupColumn_1.EVENT_AGGREGATE, ranking, group, value);
        return false;
    };
    var AggregateGroupColumn_1;
    AggregateGroupColumn.EVENT_AGGREGATE = 'aggregate';
    AggregateGroupColumn = AggregateGroupColumn_1 = __decorate([
        SupportType(),
        Category('support')
    ], AggregateGroupColumn);
    return AggregateGroupColumn;
}(Column));
export default AggregateGroupColumn;
//# sourceMappingURL=AggregateGroupColumn.js.map