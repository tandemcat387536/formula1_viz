import Column, { widthChanged, labelChanged, metaDataChanged, dirty, dirtyHeader, dirtyValues, rendererTypeChanged, groupRendererChanged, summaryRendererChanged, visibilityChanged } from './Column';
import { IDataRow, IGroup, IGroupData } from './interfaces';
import { default as INumberColumn, EAdvancedSortMethod, INumberDesc, INumberFilter } from './INumberColumn';
import { IMapAbleColumn, IMappingFunction } from './MappingFunction';
import ValueColumn, { IValueColumnDesc, dataLoaded } from './ValueColumn';
import { IEventListener } from '../internal/AEventDispatcher';
import { IColorMappingFunction } from './ColorMappingFunction';
export { default as INumberColumn, isNumberColumn } from './INumberColumn';
export declare type INumberColumnDesc = INumberDesc & IValueColumnDesc<number>;
export declare function mappingChanged(previous: IMappingFunction, current: IMappingFunction): void;
export declare function colorMappingChanged(previous: IColorMappingFunction, current: IColorMappingFunction): void;
export declare function filterChanged(previous: INumberFilter | null, current: INumberFilter | null): void;
export declare function sortMethodChanged(previous: EAdvancedSortMethod, current: EAdvancedSortMethod): void;
export declare function groupingChanged(previous: number[], current: number[]): void;
export default class NumberColumn extends ValueColumn<number> implements INumberColumn, IMapAbleColumn {
    static readonly EVENT_MAPPING_CHANGED = "mappingChanged";
    static readonly EVENT_COLOR_MAPPING_CHANGED = "colorMappingChanged";
    static readonly EVENT_FILTER_CHANGED = "filterChanged";
    static readonly EVENT_SORTMETHOD_CHANGED = "sortMethodChanged";
    static readonly EVENT_GROUPING_CHANGED = "groupingChanged";
    private readonly missingValue;
    private mapping;
    private colorMapping;
    private original;
    private currentFilter;
    private numberFormat;
    private currentGroupThresholds;
    private groupSortMethod;
    constructor(id: string, desc: INumberColumnDesc);
    getNumberFormat(): (n: number) => string;
    dump(toDescRef: (desc: any) => any): any;
    restore(dump: any, factory: (dump: any) => Column | null): void;
    protected createEventList(): string[];
    on(type: typeof NumberColumn.EVENT_MAPPING_CHANGED, listener: typeof mappingChanged | null): this;
    on(type: typeof NumberColumn.EVENT_COLOR_MAPPING_CHANGED, listener: typeof colorMappingChanged | null): this;
    on(type: typeof NumberColumn.EVENT_FILTER_CHANGED, listener: typeof filterChanged | null): this;
    on(type: typeof NumberColumn.EVENT_SORTMETHOD_CHANGED, listener: typeof sortMethodChanged | null): this;
    on(type: typeof NumberColumn.EVENT_GROUPING_CHANGED, listener: typeof groupingChanged | null): this;
    on(type: typeof ValueColumn.EVENT_DATA_LOADED, listener: typeof dataLoaded | null): this;
    on(type: typeof Column.EVENT_WIDTH_CHANGED, listener: typeof widthChanged | null): this;
    on(type: typeof Column.EVENT_LABEL_CHANGED, listener: typeof labelChanged | null): this;
    on(type: typeof Column.EVENT_METADATA_CHANGED, listener: typeof metaDataChanged | null): this;
    on(type: typeof Column.EVENT_DIRTY, listener: typeof dirty | null): this;
    on(type: typeof Column.EVENT_DIRTY_HEADER, listener: typeof dirtyHeader | null): this;
    on(type: typeof Column.EVENT_DIRTY_VALUES, listener: typeof dirtyValues | null): this;
    on(type: typeof Column.EVENT_RENDERER_TYPE_CHANGED, listener: typeof rendererTypeChanged | null): this;
    on(type: typeof Column.EVENT_GROUP_RENDERER_TYPE_CHANGED, listener: typeof groupRendererChanged | null): this;
    on(type: typeof Column.EVENT_SUMMARY_RENDERER_TYPE_CHANGED, listener: typeof summaryRendererChanged | null): this;
    on(type: typeof Column.EVENT_VISIBILITY_CHANGED, listener: typeof visibilityChanged | null): this;
    on(type: string | string[], listener: IEventListener | null): this;
    getLabel(row: IDataRow): string;
    getRange(): [string, string];
    getRawValue(row: IDataRow, missingValue?: number): number;
    getExportValue(row: IDataRow, format: 'text' | 'json'): any;
    isMissing(row: IDataRow): boolean;
    getValue(row: IDataRow): number;
    getNumber(row: IDataRow): number;
    getRawNumber(row: IDataRow, missingValue?: number): number;
    compare(a: IDataRow, b: IDataRow): number;
    groupCompare(a: IGroupData, b: IGroupData): number;
    getOriginalMapping(): IMappingFunction;
    getMapping(): IMappingFunction;
    setMapping(mapping: IMappingFunction): void;
    getColor(row: IDataRow): string;
    getColorMapping(): IColorMappingFunction;
    setColorMapping(mapping: IColorMappingFunction): void;
    isFiltered(): boolean;
    getFilter(): INumberFilter;
    setFilter(value?: INumberFilter): void;
    filter(row: IDataRow): boolean;
    getGroupThresholds(): number[];
    setGroupThresholds(value: number[]): void;
    group(row: IDataRow): IGroup;
    getSortMethod(): EAdvancedSortMethod;
    setSortMethod(sortMethod: EAdvancedSortMethod): void;
}
