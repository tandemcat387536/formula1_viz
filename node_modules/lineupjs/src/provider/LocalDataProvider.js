import { __extends } from "tslib";
import { computeHist, computeStats } from '../internal';
import { defaultGroup, NumberColumn } from '../model';
import ACommonDataProvider from './ACommonDataProvider';
var LocalDataProvider = (function (_super) {
    __extends(LocalDataProvider, _super);
    function LocalDataProvider(_data, columns, options) {
        if (columns === void 0) { columns = []; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, columns, options) || this;
        _this._data = _data;
        _this.options = {
            filterGlobally: false,
            jumpToSearchResult: false,
            maxNestedSortingCriteria: Infinity,
            maxGroupColumns: Infinity
        };
        _this.filter = null;
        Object.assign(_this.options, options);
        _this._dataRows = toRows(_data);
        var that = _this;
        _this.reorderAll = function () {
            var ranking = this.source;
            that.getRankings().forEach(function (r) {
                if (r !== ranking) {
                    r.dirtyOrder();
                }
            });
        };
        return _this;
    }
    LocalDataProvider.prototype.setFilter = function (filter) {
        this.filter = filter;
        this.reorderAll();
    };
    LocalDataProvider.prototype.getFilter = function () {
        return this.filter;
    };
    LocalDataProvider.prototype.getTotalNumberOfRows = function () {
        return this.data.length;
    };
    LocalDataProvider.prototype.getMaxGroupColumns = function () {
        return this.options.maxGroupColumns;
    };
    LocalDataProvider.prototype.getMaxNestedSortingCriteria = function () {
        return this.options.maxNestedSortingCriteria;
    };
    Object.defineProperty(LocalDataProvider.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    LocalDataProvider.prototype.setData = function (data) {
        this._data = data;
        this._dataRows = toRows(data);
        this.reorderAll();
    };
    LocalDataProvider.prototype.clearData = function () {
        this.setData([]);
    };
    LocalDataProvider.prototype.appendData = function (data) {
        var _a, _b;
        (_a = this._data).push.apply(_a, data);
        (_b = this._dataRows).push.apply(_b, toRows(data));
        this.reorderAll();
    };
    LocalDataProvider.prototype.cloneRanking = function (existing) {
        var clone = _super.prototype.cloneRanking.call(this, existing);
        if (this.options.filterGlobally) {
            clone.on(NumberColumn.EVENT_FILTER_CHANGED + ".reorderAll", this.reorderAll);
        }
        return clone;
    };
    LocalDataProvider.prototype.cleanUpRanking = function (ranking) {
        if (this.options.filterGlobally) {
            ranking.on(NumberColumn.EVENT_FILTER_CHANGED + ".reorderAll", null);
        }
        _super.prototype.cleanUpRanking.call(this, ranking);
    };
    LocalDataProvider.prototype.sortImpl = function (ranking) {
        var _this = this;
        if (this._data.length === 0) {
            return [];
        }
        var helper = this._data.map(function (r, i) { return ({ v: r, i: i, group: null }); });
        var filter = null;
        if (this.options.filterGlobally) {
            var filtered_1 = this.getRankings().filter(function (d) { return d.isFiltered(); });
            if (filtered_1.length > 0) {
                filter = function (d) { return filtered_1.every(function (f) { return f.filter(d); }); };
            }
        }
        else if (ranking.isFiltered()) {
            filter = function (d) { return ranking.filter(d); };
        }
        if (filter || this.filter) {
            helper = helper.filter(function (d) { return (!_this.filter || _this.filter(d)) && (!filter || filter(d)); });
        }
        if (helper.length === 0) {
            return [];
        }
        helper.forEach(function (r) { return r.group = ranking.grouper(r) || defaultGroup; });
        if ((new Set(helper.map(function (r) { return r.group.name; }))).size === 1) {
            var group_1 = helper[0].group;
            helper.sort(function (a, b) { return ranking.comparator(a, b); });
            var order = helper.map(function (r) { return r.i; });
            return [Object.assign({ order: order }, group_1)];
        }
        helper.sort(function (a, b) {
            var ga = a.group;
            var gb = b.group;
            if (ga.name !== gb.name) {
                return ga.name.toLowerCase().localeCompare(gb.name.toLowerCase());
            }
            return ranking.comparator(a, b);
        });
        var groups = [Object.assign({ order: [], rows: [] }, helper[0].group)];
        var group = groups[0];
        helper.forEach(function (row) {
            var rowGroup = row.group;
            if (rowGroup.name === group.name) {
                group.order.push(row.i);
                group.rows.push(row);
            }
            else {
                group = Object.assign({ order: [row.i], rows: [row] }, rowGroup);
                groups.push(group);
            }
        });
        groups.sort(function (a, b) { return ranking.groupComparator(a, b); });
        return groups;
    };
    LocalDataProvider.prototype.viewRaw = function (indices) {
        var _this = this;
        return indices.map(function (index) { return _this._data[index]; });
    };
    LocalDataProvider.prototype.viewRawRows = function (indices) {
        var _this = this;
        return indices.map(function (index) { return _this._dataRows[index]; });
    };
    LocalDataProvider.prototype.view = function (indices) {
        return this.viewRaw(indices);
    };
    LocalDataProvider.prototype.fetch = function (orders) {
        var _this = this;
        return orders.map(function (order) { return order.map(function (index) { return _this._dataRows[index]; }); });
    };
    LocalDataProvider.prototype.stats = function (indices) {
        var _this = this;
        var d = null;
        var getD = function () {
            if (d == null) {
                d = _this.viewRawRows(indices);
            }
            return d;
        };
        return {
            stats: function (col) { return computeStats(getD(), function (d) { return col.getNumber(d); }, function (d) { return col.isMissing(d); }, [0, 1]); },
            hist: function (col) { return computeHist(getD(), function (d) { return col.getCategory(d); }, col.categories); }
        };
    };
    LocalDataProvider.prototype.mappingSample = function (col) {
        var _this = this;
        var MAX_SAMPLE = 120;
        var l = this._dataRows.length;
        if (l <= MAX_SAMPLE) {
            return this._dataRows.map(col.getRawNumber.bind(col));
        }
        var indices = [];
        for (var i = 0; i < MAX_SAMPLE; ++i) {
            var j = Math.floor(Math.random() * (l - 1));
            while (indices.indexOf(j) >= 0) {
                j = Math.floor(Math.random() * (l - 1));
            }
            indices.push(j);
        }
        return indices.map(function (i) { return col.getRawNumber(_this._dataRows[i]); });
    };
    LocalDataProvider.prototype.searchAndJump = function (search, col) {
        search = typeof search === 'string' ? search.toLowerCase() : search;
        var f = typeof search === 'string' ? function (v) { return v.toLowerCase().indexOf(search) >= 0; } : search.test.bind(search);
        var indices = [];
        for (var i = 0; i < this._dataRows.length; ++i) {
            if (f(col.getLabel(this._dataRows[i]))) {
                indices.push(i);
            }
        }
        this.jumpToNearest(indices);
    };
    return LocalDataProvider;
}(ACommonDataProvider));
export default LocalDataProvider;
function toRows(data) {
    return data.map(function (v, i) { return ({ v: v, i: i }); });
}
//# sourceMappingURL=LocalDataProvider.js.map