import { __extends, __spreadArrays } from "tslib";
import AEventDispatcher, { suffix } from '../internal/AEventDispatcher';
import debounce from '../internal/debounce';
import OrderedSet from '../internal/OrderedSet';
import { createActionDesc, createAggregateDesc, createGroupDesc, createRankDesc, createSelectionDesc, createStackDesc, models } from '../model';
import AggregateGroupColumn from '../model/AggregateGroupColumn';
import { toGroupID, unifyParents } from '../model/internal';
import RankColumn from '../model/RankColumn';
import Ranking from '../model/Ranking';
import { exportRanking } from './utils';
import { isSupportType } from '../model/annotations';
var ADataProvider = (function (_super) {
    __extends(ADataProvider, _super);
    function ADataProvider(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.rankings = [];
        _this.selection = new OrderedSet();
        _this.aggregations = new Set();
        _this.uid = 0;
        _this.createHelper = function (d) {
            var desc = _this.fromDescRef(d.desc);
            var c = null;
            if (desc && desc.type) {
                _this.fixDesc(d.desc);
                var type = _this.columnTypes[desc.type];
                c = new type(d.id, desc);
                c.restore(d, _this.createHelper);
            }
            return c;
        };
        _this.columnTypes = Object.assign(models(), options.columnTypes || {});
        _this.multiSelections = options.multiSelection !== false;
        return _this;
    }
    ADataProvider.prototype.createEventList = function () {
        return _super.prototype.createEventList.call(this).concat([
            ADataProvider.EVENT_ADD_COLUMN, ADataProvider.EVENT_REMOVE_COLUMN,
            ADataProvider.EVENT_ADD_RANKING, ADataProvider.EVENT_REMOVE_RANKING,
            ADataProvider.EVENT_DIRTY, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES,
            ADataProvider.EVENT_ORDER_CHANGED, ADataProvider.EVENT_SELECTION_CHANGED,
            ADataProvider.EVENT_ADD_DESC, ADataProvider.EVENT_CLEAR_DESC,
            ADataProvider.EVENT_JUMP_TO_NEAREST, ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED
        ]);
    };
    ADataProvider.prototype.on = function (type, listener) {
        return _super.prototype.on.call(this, type, listener);
    };
    ADataProvider.prototype.pushRanking = function (existing) {
        var r = this.cloneRanking(existing);
        this.insertRanking(r);
        return r;
    };
    ADataProvider.prototype.takeSnapshot = function (col) {
        var _this = this;
        var r = this.cloneRanking();
        var ranking = col.findMyRanker();
        var hasString = col.desc.type === 'string';
        var hasColumn = false;
        var toClone = !ranking ? [col] : ranking.children.filter(function (c) {
            if (c === col) {
                hasColumn = false;
                return true;
            }
            if (!hasString && c.desc.type === 'string') {
                hasString = true;
                return true;
            }
            return isSupportType(c);
        });
        if (!hasColumn) {
            toClone.push(col);
        }
        toClone.forEach(function (c) {
            var clone = _this.clone(c);
            r.push(clone);
            if (c === col) {
                clone.sortByMe();
            }
        });
        this.insertRanking(r);
        return r;
    };
    ADataProvider.prototype.insertRanking = function (r, index) {
        if (index === void 0) { index = this.rankings.length; }
        this.rankings.splice(index, 0, r);
        this.forward.apply(this, __spreadArrays([r], suffix('.provider', Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_ORDER_CHANGED, Ranking.EVENT_DIRTY_VALUES)));
        var that = this;
        r.on(Ranking.EVENT_DIRTY_ORDER + ".provider", debounce(function () {
            that.triggerReorder(this.source);
        }, 100));
        this.fire([ADataProvider.EVENT_ADD_RANKING, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], r, index);
        this.triggerReorder(r);
    };
    ADataProvider.prototype.triggerReorder = function (ranking) {
        Promise.resolve(this.sort(ranking)).then(function (order) {
            unifyParents(order);
            ranking.setGroups(order);
        });
    };
    ADataProvider.prototype.removeRanking = function (ranking) {
        var i = this.rankings.indexOf(ranking);
        if (i < 0) {
            return false;
        }
        this.unforward.apply(this, __spreadArrays([ranking], suffix('.provider', Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_ORDER_CHANGED, Ranking.EVENT_DIRTY_VALUES)));
        this.rankings.splice(i, 1);
        ranking.on(Ranking.EVENT_DIRTY_ORDER + ".provider", null);
        this.cleanUpRanking(ranking);
        this.fire([ADataProvider.EVENT_REMOVE_RANKING, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], ranking, i);
        return true;
    };
    ADataProvider.prototype.clearRankings = function () {
        var _this = this;
        this.rankings.forEach(function (ranking) {
            _this.unforward.apply(_this, __spreadArrays([ranking], suffix('.provider', Ranking.EVENT_ADD_COLUMN, Ranking.EVENT_REMOVE_COLUMN, Ranking.EVENT_DIRTY, Ranking.EVENT_DIRTY_HEADER, Ranking.EVENT_ORDER_CHANGED, Ranking.EVENT_DIRTY_VALUES)));
            ranking.on(Ranking.EVENT_DIRTY_ORDER + ".provider", null);
            _this.cleanUpRanking(ranking);
        });
        this.rankings = [];
        this.fire([ADataProvider.EVENT_REMOVE_RANKING, ADataProvider.EVENT_DIRTY_HEADER, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], null, -1);
    };
    ADataProvider.prototype.getRankings = function () {
        return this.rankings.slice();
    };
    ADataProvider.prototype.getFirstRanking = function () {
        return this.rankings[0] || null;
    };
    ADataProvider.prototype.getLastRanking = function () {
        return this.rankings[this.rankings.length - 1];
    };
    ADataProvider.prototype.ensureOneRanking = function () {
        if (this.rankings.length === 0) {
            var r = this.pushRanking();
            this.push(r, createRankDesc());
        }
    };
    ADataProvider.prototype.cleanUpRanking = function (_ranking) {
    };
    ADataProvider.prototype.push = function (ranking, desc) {
        var r = this.create(desc);
        if (r) {
            ranking.push(r);
            return r;
        }
        return null;
    };
    ADataProvider.prototype.insert = function (ranking, index, desc) {
        var r = this.create(desc);
        if (r) {
            ranking.insert(r, index);
            return r;
        }
        return null;
    };
    ADataProvider.prototype.nextId = function () {
        return "col" + this.uid++;
    };
    ADataProvider.prototype.fixDesc = function (desc) {
        var _this = this;
        if (desc.type === 'rank') {
            desc.accessor = this.rankAccessor.bind(this);
        }
        else if (desc.type === 'selection') {
            desc.accessor = function (row) { return _this.isSelected(row.i); };
            desc.setter = function (row, value) { return value ? _this.select(row.i) : _this.deselect(row.i); };
            desc.setterAll = function (rows, value) { return value ? _this.selectAll(rows.map(function (d) { return d.i; })) : _this.deselectAll(rows.map(function (d) { return d.i; })); };
        }
        else if (desc.type === 'aggregate') {
            desc.isAggregated = function (ranking, group) { return _this.isAggregated(ranking, group); };
            desc.setAggregated = function (ranking, group, value) { return _this.setAggregated(ranking, group, value); };
        }
    };
    ADataProvider.prototype.create = function (desc) {
        this.fixDesc(desc);
        var type = this.columnTypes[desc.type];
        if (type) {
            return new type(this.nextId(), desc);
        }
        return null;
    };
    ADataProvider.prototype.clone = function (col) {
        var dump = this.dumpColumn(col);
        return this.restoreColumn(dump);
    };
    ADataProvider.prototype.restoreColumn = function (dump) {
        var _this = this;
        var create = function (d) {
            var desc = _this.fromDescRef(d.desc);
            var type = _this.columnTypes[desc.type];
            _this.fixDesc(desc);
            var c = new type('', desc);
            c.restore(d, create);
            c.assignNewId(_this.nextId.bind(_this));
            return c;
        };
        return create(dump);
    };
    ADataProvider.prototype.find = function (idOrFilter) {
        var filter = typeof (idOrFilter) === 'string' ? function (col) { return col.id === idOrFilter; } : idOrFilter;
        for (var _i = 0, _a = this.rankings; _i < _a.length; _i++) {
            var ranking = _a[_i];
            var r = ranking.find(filter);
            if (r) {
                return r;
            }
        }
        return null;
    };
    ADataProvider.prototype.dump = function () {
        var _this = this;
        return {
            uid: this.uid,
            selection: this.getSelection(),
            aggregations: Array.from(this.aggregations),
            rankings: this.rankings.map(function (r) { return r.dump(_this.toDescRef); })
        };
    };
    ADataProvider.prototype.dumpColumn = function (col) {
        return col.dump(this.toDescRef);
    };
    ADataProvider.prototype.toDescRef = function (desc) {
        return desc;
    };
    ADataProvider.prototype.fromDescRef = function (descRef) {
        return descRef;
    };
    ADataProvider.prototype.restoreRanking = function (dump) {
        var ranking = this.cloneRanking();
        ranking.restore(dump, this.createHelper);
        if (!ranking.children.some(function (d) { return d instanceof RankColumn; })) {
            ranking.insert(this.create(createRankDesc()), 0);
        }
        var idGenerator = this.nextId.bind(this);
        ranking.children.forEach(function (c) { return c.assignNewId(idGenerator); });
        return ranking;
    };
    ADataProvider.prototype.restore = function (dump) {
        var _this = this;
        this.clearRankings();
        this.uid = dump.uid || 0;
        if (dump.selection) {
            dump.selection.forEach(function (s) { return _this.selection.add(s); });
        }
        if (dump.aggregations) {
            this.aggregations.clear();
            dump.aggregations.forEach(function (a) { return _this.aggregations.add(a); });
        }
        if (dump.rankings) {
            dump.rankings.forEach(function (r) {
                var ranking = _this.cloneRanking();
                ranking.restore(r, _this.createHelper);
                if (!ranking.children.some(function (d) { return d instanceof RankColumn; })) {
                    ranking.insert(_this.create(createRankDesc()), 0);
                }
                _this.insertRanking(ranking);
            });
        }
        if (dump.layout) {
            Object.keys(dump.layout).forEach(function (key) {
                _this.deriveRanking(dump.layout[key]);
            });
        }
        var idGenerator = this.nextId.bind(this);
        this.rankings.forEach(function (r) {
            r.children.forEach(function (c) { return c.assignNewId(idGenerator); });
        });
    };
    ADataProvider.prototype.deriveRanking = function (bundle) {
        var _this = this;
        var ranking = this.cloneRanking();
        ranking.clear();
        var toCol = function (column) {
            switch (column.type) {
                case 'rank':
                    return _this.create(createRankDesc());
                case 'selection':
                    return _this.create(createSelectionDesc());
                case 'group':
                    return _this.create(createGroupDesc());
                case 'aggregate':
                    return _this.create(createAggregateDesc());
                case 'actions':
                    var actions = _this.create(createActionDesc(column.label || 'actions'));
                    actions.restore(column, _this.createHelper);
                    return actions;
                case 'stacked':
                    var stacked_1 = _this.create(createStackDesc(column.label || 'Combined'));
                    (column.children || []).forEach(function (col) {
                        var c = toCol(col);
                        if (c) {
                            stacked_1.push(c);
                        }
                    });
                    return stacked_1;
                default: {
                    var desc = _this.findDesc(column.column);
                    if (desc) {
                        var r = _this.create(desc);
                        column.label = column.label || desc.label || desc.column;
                        if (r) {
                            r.restore(column, _this.createHelper);
                        }
                        return r;
                    }
                    return null;
                }
            }
        };
        bundle.forEach(function (column) {
            var col = toCol(column);
            if (col) {
                ranking.push(col);
            }
        });
        if (!ranking.children.some(function (d) { return d instanceof RankColumn; })) {
            ranking.insert(this.create(createRankDesc()), 0);
        }
        this.insertRanking(ranking);
        return ranking;
    };
    ADataProvider.prototype.isAggregated = function (ranking, group) {
        var g = group;
        while (g) {
            var key = ranking.id + "@" + toGroupID(g);
            if (this.aggregations.has(key)) {
                this.aggregations.add(ranking.id + "@" + toGroupID(group));
                return true;
            }
            g = g.parent;
        }
        return false;
    };
    ADataProvider.prototype.unaggregateParents = function (ranking, group) {
        var g = group.parent;
        while (g) {
            this.aggregations.delete(ranking.id + "@" + toGroupID(g));
            g = g.parent;
        }
    };
    ADataProvider.prototype.setAggregated = function (ranking, group, value) {
        this.unaggregateParents(ranking, group);
        var key = ranking.id + "@" + toGroupID(group);
        var current = this.isAggregated(ranking, group);
        if (current === value) {
            return;
        }
        if (value) {
            this.aggregations.add(key);
        }
        else {
            this.aggregations.delete(key);
        }
        this.fire([ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], ranking, group, value);
    };
    ADataProvider.prototype.aggregateAllOf = function (ranking, aggregateAll) {
        var _this = this;
        var groups = ranking.getGroups();
        groups.forEach(function (group) {
            _this.unaggregateParents(ranking, group);
            var current = _this.isAggregated(ranking, group);
            if (current === aggregateAll) {
                return;
            }
            var key = ranking.id + "@" + toGroupID(group);
            if (aggregateAll) {
                _this.aggregations.add(key);
            }
            else {
                _this.aggregations.delete(key);
            }
        });
        this.fire([ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED, ADataProvider.EVENT_DIRTY_VALUES, ADataProvider.EVENT_DIRTY], ranking, groups, aggregateAll);
    };
    ADataProvider.prototype.isSelected = function (index) {
        return this.selection.has(index);
    };
    ADataProvider.prototype.select = function (index) {
        if (this.selection.has(index)) {
            return;
        }
        if (!this.multiSelections && this.selection.size > 0) {
            this.selection.clear();
        }
        this.selection.add(index);
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    };
    ADataProvider.prototype.jumpToNearest = function (indices) {
        if (indices.length === 0) {
            return;
        }
        this.fire(ADataProvider.EVENT_JUMP_TO_NEAREST, indices);
    };
    ADataProvider.prototype.selectAll = function (indices) {
        var _this = this;
        if (indices.every(function (i) { return _this.selection.has(i); })) {
            return;
        }
        if (!this.multiSelections) {
            this.selection.clear();
            indices = indices.slice(0, 1);
        }
        indices.forEach(function (index) {
            _this.selection.add(index);
        });
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    };
    ADataProvider.prototype.selectAllOf = function (ranking) {
        this.setSelection(ranking.getOrder());
    };
    ADataProvider.prototype.setSelection = function (indices) {
        var _this = this;
        if (indices.length === 0) {
            return this.clearSelection();
        }
        if (this.selection.size === indices.length && indices.every(function (i) { return _this.selection.has(i); })) {
            return;
        }
        this.selection.clear();
        this.selectAll(indices);
    };
    ADataProvider.prototype.toggleSelection = function (index, additional) {
        if (additional === void 0) { additional = false; }
        if (this.isSelected(index)) {
            if (additional) {
                this.deselect(index);
            }
            else {
                this.clearSelection();
            }
            return false;
        }
        if (additional) {
            this.select(index);
        }
        else {
            this.setSelection([index]);
        }
        return true;
    };
    ADataProvider.prototype.deselect = function (index) {
        if (!this.selection.has(index)) {
            return;
        }
        this.selection.delete(index);
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    };
    ADataProvider.prototype.deselectAll = function (indices) {
        var _this = this;
        if (indices.every(function (i) { return !_this.selection.has(i); })) {
            return;
        }
        indices.forEach(function (index) {
            _this.selection.delete(index);
        });
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, this.getSelection());
    };
    ADataProvider.prototype.selectedRows = function () {
        if (this.selection.size === 0) {
            return [];
        }
        return this.view(this.getSelection());
    };
    ADataProvider.prototype.getSelection = function () {
        return Array.from(this.selection);
    };
    ADataProvider.prototype.clearSelection = function () {
        if (this.selection.size === 0) {
            return;
        }
        this.selection.clear();
        this.fire(ADataProvider.EVENT_SELECTION_CHANGED, [], false);
    };
    ADataProvider.prototype.exportTable = function (ranking, options) {
        if (options === void 0) { options = {}; }
        return Promise.resolve(this.view(ranking.getOrder())).then(function (data) { return exportRanking(ranking, data, options); });
    };
    ADataProvider.EVENT_SELECTION_CHANGED = 'selectionChanged';
    ADataProvider.EVENT_ADD_COLUMN = Ranking.EVENT_ADD_COLUMN;
    ADataProvider.EVENT_REMOVE_COLUMN = Ranking.EVENT_REMOVE_COLUMN;
    ADataProvider.EVENT_ADD_RANKING = 'addRanking';
    ADataProvider.EVENT_REMOVE_RANKING = 'removeRanking';
    ADataProvider.EVENT_DIRTY = Ranking.EVENT_DIRTY;
    ADataProvider.EVENT_DIRTY_HEADER = Ranking.EVENT_DIRTY_HEADER;
    ADataProvider.EVENT_DIRTY_VALUES = Ranking.EVENT_DIRTY_VALUES;
    ADataProvider.EVENT_ORDER_CHANGED = Ranking.EVENT_ORDER_CHANGED;
    ADataProvider.EVENT_ADD_DESC = 'addDesc';
    ADataProvider.EVENT_CLEAR_DESC = 'clearDesc';
    ADataProvider.EVENT_JUMP_TO_NEAREST = 'jumpToNearest';
    ADataProvider.EVENT_GROUP_AGGREGATION_CHANGED = AggregateGroupColumn.EVENT_AGGREGATE;
    return ADataProvider;
}(AEventDispatcher));
export default ADataProvider;
//# sourceMappingURL=ADataProvider.js.map