import { __extends } from "tslib";
import { defaultGroup } from '../model/Group';
import ACommonDataProvider from './ACommonDataProvider';
var RemoteDataProvider = (function (_super) {
    __extends(RemoteDataProvider, _super);
    function RemoteDataProvider(server, columns, options) {
        if (columns === void 0) { columns = []; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, columns, options) || this;
        _this.server = server;
        _this.options = {
            maxCacheSize: 1000
        };
        _this.cache = new Map();
        Object.assign(_this.options, options);
        return _this;
    }
    RemoteDataProvider.prototype.getTotalNumberOfRows = function () {
        return this.cache.size;
    };
    RemoteDataProvider.prototype.sortImpl = function (ranking) {
        return this.server.sort(ranking).then(function (order) { return [Object.assign({ order: order }, defaultGroup)]; });
    };
    RemoteDataProvider.prototype.loadFromServer = function (indices) {
        return this.server.view(indices).then(function (view) {
            return view.map(function (v, i) {
                var dataIndex = indices[i];
                return { v: v, dataIndex: dataIndex };
            });
        });
    };
    RemoteDataProvider.prototype.view = function (indices) {
        if (indices.length === 0) {
            return Promise.resolve([]);
        }
        var base = this.fetch([indices])[0];
        return Promise.all(base).then(function (rows) { return rows.map(function (d) { return d.v; }); });
    };
    RemoteDataProvider.prototype.computeMissing = function (orders) {
        var union = new Set();
        var unionAdd = union.add.bind(union);
        orders.forEach(function (order) { return order.forEach(unionAdd); });
        this.cache.forEach(function (_v, k) { return union.delete(k); });
        if ((this.cache.size + union.size) > this.options.maxCacheSize) {
        }
        return Array.from(union);
    };
    RemoteDataProvider.prototype.loadInCache = function (missing) {
        var _this = this;
        if (missing.length === 0) {
            return;
        }
        var v = this.loadFromServer(missing);
        missing.forEach(function (_m, i) {
            var dataIndex = missing[i];
            _this.cache.set(dataIndex, v.then(function (loaded) { return ({ v: loaded[i], i: dataIndex }); }));
        });
    };
    RemoteDataProvider.prototype.fetch = function (orders) {
        var _this = this;
        var toLoad = this.computeMissing(orders);
        this.loadInCache(toLoad);
        return orders.map(function (order) {
            return order.map(function (i) { return _this.cache.get(i); });
        });
    };
    RemoteDataProvider.prototype.mappingSample = function (col) {
        return this.server.mappingSample(col.desc.column);
    };
    RemoteDataProvider.prototype.searchAndJump = function (search, col) {
        var _this = this;
        this.server.search(search, col.desc.column).then(function (indices) {
            _this.jumpToNearest(indices);
        });
    };
    RemoteDataProvider.prototype.stats = function (indices) {
        return this.server.stats(indices);
    };
    return RemoteDataProvider;
}(ACommonDataProvider));
export default RemoteDataProvider;
//# sourceMappingURL=RemoteDataProvider.js.map