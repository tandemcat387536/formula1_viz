import { extent } from 'd3-array';
import { isNumberColumn, isSupportType } from '../model';
import { default as Column } from '../model/Column';
import { colorPool } from '../model/internal';
import { resolveValue } from '../internal/accessor';
export function cleanCategories(categories) {
    categories.delete(null);
    categories.delete(undefined);
    categories.delete('');
    categories.delete('NA');
    categories.delete('NaN');
    categories.delete('na');
    return Array.from(categories).map(String).sort();
}
function deriveType(label, value, column, data, options) {
    var _a, _b;
    var base = {
        type: 'string',
        label: label,
        column: column,
    };
    if (typeof value === 'number') {
        base.type = 'number';
        base.domain = extent(data, function (d) { return resolveValue(d, column); });
        return base;
    }
    if (value && value instanceof Date) {
        base.type = 'date';
        return base;
    }
    if (typeof value === 'boolean') {
        base.type = 'boolean';
        return base;
    }
    if (typeof value === 'string') {
        var categories = new Set(data.map(function (d) { return resolveValue(d, column); }));
        if (categories.size < data.length * options.categoricalThreshold) {
            base.type = 'categorical';
            base.categories = cleanCategories(categories);
        }
        return base;
    }
    if (Array.isArray(value)) {
        base.type = 'strings';
        base.dataLength = value.length;
        var vs = value[0];
        if (typeof vs === 'number') {
            base.type = 'numbers';
            base.domain = extent((_a = []).concat.apply(_a, data.map(function (d) { return resolveValue(d, column); })));
            return base;
        }
        if (vs && value instanceof Date) {
            base.type = 'dates';
            return base;
        }
        if (typeof value === 'boolean') {
            base.type = 'booleans';
            return base;
        }
        if (typeof value === 'string') {
            var categories = new Set((_b = []).concat.apply(_b, data.map(function (d) { return resolveValue(d, column); })));
            if (categories.size < data.length * options.categoricalThreshold) {
                base.type = 'categoricals';
                base.categories = cleanCategories(categories);
            }
            return base;
        }
    }
    console.log('cannot infer type of column:', column);
    return base;
}
export function deriveColumnDescriptions(data, options) {
    if (options === void 0) { options = {}; }
    var config = Object.assign({
        categoricalThreshold: 0.7,
        columns: []
    }, options);
    var r = [];
    if (data.length === 0) {
        return r;
    }
    var first = data[0];
    if (Array.isArray(first)) {
        return first.map(function (v, i) { return deriveType("Col" + i, v, i, data, config); });
    }
    var columns = config.columns.length > 0 ? config.columns : Object.keys(first);
    return columns.map(function (key) { return deriveType(key, resolveValue(first, key), key, data, config); });
}
export function deriveColors(columns) {
    var colors = colorPool();
    columns.forEach(function (col) {
        switch (col.type) {
            case 'number':
                col.colorMapping = col.colorMapping || col.color || colors() || Column.DEFAULT_COLOR;
                break;
        }
    });
    return columns;
}
export function exportRanking(ranking, data, options) {
    if (options === void 0) { options = {}; }
    var opts = Object.assign({
        separator: '\t',
        newline: '\n',
        header: true,
        quote: false,
        quoteChar: '"',
        filter: function (c) { return !isSupportType(c); },
        verboseColumnHeaders: false
    }, options);
    var escape = new RegExp("[" + opts.quoteChar + "]", 'g');
    function quote(v, c) {
        var l = String(v);
        if ((opts.quote || l.indexOf('\n') >= 0) && (!c || !isNumberColumn(c))) {
            return "" + opts.quoteChar + l.replace(escape, opts.quoteChar + opts.quoteChar) + opts.quoteChar;
        }
        return l;
    }
    var columns = ranking.flatColumns.filter(function (c) { return opts.filter(c); });
    var order = ranking.getOrder();
    var r = [];
    if (opts.header) {
        r.push(columns.map(function (d) { return quote("" + d.label + (opts.verboseColumnHeaders && d.description ? "\n" + d.description : '')); }).join(opts.separator));
    }
    data.forEach(function (row, i) {
        r.push(columns.map(function (c) { return quote(c.getExportValue({ v: row, i: order[i] }, 'text'), c); }).join(opts.separator));
    });
    return r.join(opts.newline);
}
//# sourceMappingURL=utils.js.map