import { __extends } from "tslib";
import { createAggregateDesc, createRankDesc, createSelectionDesc, isSupportType } from '../model';
import Ranking from '../model/Ranking';
import ADataProvider from './ADataProvider';
import { resolveValue } from '../internal/accessor';
function isComplexAccessor(column) {
    return typeof column === 'string' && (column.indexOf('.') >= 0 || column.indexOf('[') >= 0);
}
function resolveComplex(column, row) {
    return resolveValue(row, column);
}
function rowGetter(row, _id, desc) {
    var column = desc.column;
    if (isComplexAccessor(column)) {
        return resolveComplex(column, row.v);
    }
    return row.v[column];
}
var ACommonDataProvider = (function (_super) {
    __extends(ACommonDataProvider, _super);
    function ACommonDataProvider(columns, options) {
        if (columns === void 0) { columns = []; }
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, options) || this;
        _this.columns = columns;
        _this.rankingIndex = 0;
        _this.ranks = new Map();
        columns.forEach(function (d) {
            d.accessor = d.accessor || rowGetter;
            d.label = d.label || d.column;
        });
        return _this;
    }
    ACommonDataProvider.prototype.rankAccessor = function (row, _id, _desc, ranking) {
        var groups = this.ranks.get(ranking.id) || [];
        var acc = 0;
        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
            var group = groups_1[_i];
            var rank = group.order.indexOf(row.i);
            if (rank >= 0) {
                return acc + rank + 1;
            }
            acc += group.order.length;
        }
        return -1;
    };
    ACommonDataProvider.prototype.getMaxNestedSortingCriteria = function () {
        return 1;
    };
    ACommonDataProvider.prototype.getMaxGroupColumns = function () {
        return 1;
    };
    ACommonDataProvider.prototype.cloneRanking = function (existing) {
        var _this = this;
        var id = this.nextRankingId();
        var clone = new Ranking(id, this.getMaxNestedSortingCriteria(), this.getMaxGroupColumns());
        if (existing) {
            this.ranks.set(id, this.ranks.get(existing.id));
            existing.children.forEach(function (child) {
                _this.push(clone, child.desc);
            });
        }
        return clone;
    };
    ACommonDataProvider.prototype.cleanUpRanking = function (ranking) {
        this.ranks.delete(ranking.id);
    };
    ACommonDataProvider.prototype.sort = function (ranking) {
        var _this = this;
        var r = this.sortImpl(ranking);
        if (Array.isArray(r)) {
            this.ranks.set(ranking.id, r);
            return r;
        }
        return r.then(function (r) {
            _this.ranks.set(ranking.id, r);
            return r;
        });
    };
    ACommonDataProvider.prototype.pushDesc = function (column) {
        var d = column;
        d.accessor = d.accessor || rowGetter;
        d.label = column.label || d.column;
        this.columns.push(column);
        this.fire(ADataProvider.EVENT_ADD_DESC, d);
    };
    ACommonDataProvider.prototype.clearColumns = function () {
        this.clearRankings();
        this.columns.splice(0, this.columns.length);
        this.fire(ADataProvider.EVENT_CLEAR_DESC);
    };
    ACommonDataProvider.prototype.getColumns = function () {
        return this.columns.slice();
    };
    ACommonDataProvider.prototype.findDesc = function (ref) {
        return this.columns.filter(function (c) { return c.column === ref; })[0];
    };
    ACommonDataProvider.prototype.toDescRef = function (desc) {
        return typeof desc.column !== 'undefined' ? desc.type + "@" + desc.column : desc;
    };
    ACommonDataProvider.prototype.deriveDefault = function (addSupportType) {
        var _this = this;
        if (addSupportType === void 0) { addSupportType = true; }
        var r = this.pushRanking();
        if (addSupportType) {
            if (this.getMaxGroupColumns() > 0) {
                r.push(this.create(createAggregateDesc()));
            }
            r.push(this.create(createRankDesc()));
            if (this.multiSelections) {
                r.push(this.create(createSelectionDesc()));
            }
        }
        this.getColumns().forEach(function (col) {
            var c = _this.create(col);
            if (!c || isSupportType(c)) {
                return;
            }
            r.push(c);
        });
        return r;
    };
    ACommonDataProvider.prototype.fromDescRef = function (descRef) {
        if (typeof (descRef) === 'string') {
            return this.columns.find(function (d) { return d.type + "@" + d.column === descRef; });
        }
        var existing = this.columns.find(function (d) { return descRef.column === d.column && descRef.label === d.label && descRef.type === d.type; });
        if (existing) {
            return existing;
        }
        return descRef;
    };
    ACommonDataProvider.prototype.restore = function (dump) {
        _super.prototype.restore.call(this, dump);
        this.rankingIndex = 1 + Math.max.apply(Math, this.getRankings().map(function (r) { return +r.id.substring(4); }));
    };
    ACommonDataProvider.prototype.nextRankingId = function () {
        return "rank" + this.rankingIndex++;
    };
    return ACommonDataProvider;
}(ADataProvider));
export default ACommonDataProvider;
//# sourceMappingURL=ACommonDataProvider.js.map